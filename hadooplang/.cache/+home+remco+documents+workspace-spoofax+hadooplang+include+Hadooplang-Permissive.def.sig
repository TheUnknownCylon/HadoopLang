definition([module(unparameterized("grammar/Types"),[],[exports(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(sorts([sort("WATER"),sort("WATERTOKEN"),sort("WATERTOKENSTART"),sort("WATERTOKENSEPARATOR"),sort("WATERTOKENSTAR")]),lexical-syntax([prod([char-class(comp(simple-charclass(present(conc(range(short("A"),short("Z")),conc(range(short("a"),short("z")),conc(range(short("0"),short("9")),short("\\_"))))))))],sort("WATERTOKENSTART"),attrs([term(recover),avoid])),prod([sort("WATERTOKENSTART"),iter-star(char-class(simple-charclass(present(conc(range(short("A"),short("Z")),conc(range(short("a"),short("z")),conc(range(short("0"),short("9")),short("\\_"))))))))],sort("WATERTOKEN"),attrs([])),prod([char-class(comp(simple-charclass(present(conc(range(short("A"),short("Z")),conc(range(short("a"),short("z")),conc(range(short("0"),short("9")),conc(short("\\_"),conc(short("\\ "),conc(short("\\t"),conc(numeric("\\12"),conc(short("\\r"),conc(short("\\n"),short("\\*"))))))))))))))],sort("WATERTOKENSEPARATOR"),attrs([term(recover),avoid])),prod([lit("*")],sort("WATERTOKENSTAR"),attrs([term(recover),avoid])),prod([sort("WATERTOKEN")],sort("WATER"),attrs([])),prod([sort("WATERTOKENSEPARATOR")],sort("WATER"),attrs([])),prod([sort("WATERTOKENSTAR")],sort("WATER"),attrs([])),prod([],sort("WATEREOF"),attrs([]))])),lexical-restrictions([follow([sort("WATERTOKEN")],single(char-class(simple-charclass(present(conc(range(short("A"),short("Z")),conc(range(short("a"),short("z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([sort("WATERTOKENSTAR")],single(char-class(simple-charclass(present(short("\\/"))))))])),context-free-syntax([prod([sort("WATER")],layout,attrs([term(cons("WATER"))]))])),conc-grammars(conc-grammars(conc-grammars(sorts([sort("WATEREOF")]),lexical-restrictions([follow([sort("WATEREOF")],single(char-class(comp(simple-charclass(absent)))))])),lexical-syntax([prod([lit("/*")],sort("INSERTSTART"),attrs([term(recover)])),prod([sort("INSERTSTART"),iter-star(alt(char-class(comp(simple-charclass(present(short("\\*"))))),sort("CommentChar"))),sort("WATEREOF")],layout,attrs([term(cons("INSERTEND"))])),prod([lit("\\\"")],sort("INSERTOPENQUOTE"),attrs([term(recover)])),prod([sort("INSERTOPENQUOTE"),iter-star(sort("StringChar")),lit("\\n")],sort("STRING"),attrs([term(cons("INSERTEND"))])),prod([sort("INSERTOPENQUOTE"),iter-star(sort("StringChar")),sort("WATEREOF")],sort("STRING"),attrs([term(cons("INSERTEND"))])),prod([],lit("module"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit("from"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit("store"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit(";"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit(")"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit(","),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit("input"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit("map"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit("reduce"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit("}"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit("mapper"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit("reducer"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit(":"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit("rewriter"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit("."),attrs([term(recover),term(cons("INSERTION"))]))])),syntax([]))),context-free-syntax([prod([lit("String")],sort("Type"),attrs([term(cons("TypeString"))])),prod([lit("Number")],sort("Type"),attrs([term(cons("TypeNum"))])),prod([lit("Boolean")],sort("Type"),attrs([term(cons("TypeBoolean"))])),prod([lit("Dict"),lit("("),sort("Type"),lit(")")],sort("Type"),attrs([term(cons("TypeDict"))])),prod([lit("List"),lit("("),sort("Type"),lit(")")],sort("Type"),attrs([term(cons("TypeList"))])),prod([lit("Iterator"),lit("("),sort("Type"),lit(")")],sort("Type"),attrs([term(cons("TypeIterator"))]))])))]),module(unparameterized("grammar/Expressions"),[imports([module(unparameterized("lexical/Identifiers")),module(unparameterized("grammar/Types"))])],[exports(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(context-free-syntax([prod([sort("NUM")],sort("Exp"),attrs([term(cons("Num"))])),prod([sort("STRING")],sort("Exp"),attrs([term(cons("String"))])),prod([sort("DatasetRef")],sort("Exp"),attrs([])),prod([sort("ID")],sort("DatasetRef"),attrs([term(cons("DatasetRef"))])),prod([sort("DatasetRef"),lit("["),sort("Exp"),lit("]")],sort("DictAccess"),attrs([term(cons("DictAccess"))]))]),context-free-syntax([prod([lit("True")],sort("Exp"),attrs([term(cons("True"))])),prod([lit("False")],sort("Exp"),attrs([term(cons("False"))]))])),context-free-syntax([prod([sort("Type"),lit("{"),iter-star-sep(sort("DictItem"),lit(",")),lit("}")],sort("Exp"),attrs([term(cons("Dict"))])),prod([sort("Type"),lit("["),iter-star-sep(sort("Exp"),lit(",")),lit("]")],sort("Exp"),attrs([term(cons("List"))])),prod([sort("Exp"),lit(":"),sort("Exp")],sort("DictItem"),attrs([term(cons("DictItem"))]))])),context-free-syntax([prod([lit(","),iter-star-sep(sort("Exp"),lit(","))],sort("Params"),attrs([term(cons("Params"))])),prod([],sort("Params"),attrs([term(cons("Params"))]))])),context-free-syntax([prod([sort("DictAccess")],sort("Exp"),attrs([term(cons("ExpDictaccess")),assoc(left),prefer])),prod([lit("("),sort("Exp"),lit(")")],sort("Exp"),attrs([term(cons("Brackets"))])),prod([sort("Exp"),lit("+"),sort("Exp")],sort("Exp"),attrs([term(cons("Plus")),assoc(left)])),prod([sort("Exp"),lit("*"),sort("Exp")],sort("Exp"),attrs([term(cons("Times")),assoc(left)])),prod([sort("Exp"),lit("-"),sort("Exp")],sort("Exp"),attrs([term(cons("Min")),assoc(left)])),prod([sort("Exp"),lit("/"),sort("Exp")],sort("Exp"),attrs([term(cons("Divide")),assoc(left)])),prod([sort("Exp"),lit("%"),sort("Exp")],sort("Exp"),attrs([term(cons("Modulo")),assoc(left)])),prod([sort("Exp"),lit("&&"),sort("Exp")],sort("Exp"),attrs([term(cons("And")),assoc(left)])),prod([sort("Exp"),lit("||"),sort("Exp")],sort("Exp"),attrs([term(cons("Or")),assoc(left)])),prod([sort("Exp"),lit("=="),sort("Exp")],sort("Exp"),attrs([term(cons("Equals")),assoc(left)])),prod([sort("Exp"),lit(">"),sort("Exp")],sort("Exp"),attrs([term(cons("GreaterThan")),assoc(left)])),prod([sort("Exp"),lit("<"),sort("Exp")],sort("Exp"),attrs([term(cons("SmallerThan")),assoc(left)])),prod([sort("Exp"),lit(">="),sort("Exp")],sort("Exp"),attrs([term(cons("EqSmallerThan")),assoc(left)])),prod([sort("Exp"),lit("<="),sort("Exp")],sort("Exp"),attrs([term(cons("EqGreaterThan")),assoc(left)]))])),context-free-priorities([chain([assoc-group(left,[prod([sort("Exp"),lit("["),sort("Exp"),lit("]")],sort("Exp"),attrs([]))]),assoc-group(non-assoc,[prod([sort("Exp"),lit("%"),sort("Exp")],sort("Exp"),attrs([]))]),assoc-group(left,[prod([sort("Exp"),lit("/"),sort("Exp")],sort("Exp"),attrs([])),prod([sort("Exp"),lit("*"),sort("Exp")],sort("Exp"),attrs([]))]),assoc-group(left,[prod([sort("Exp"),lit("+"),sort("Exp")],sort("Exp"),attrs([])),prod([sort("Exp"),lit("-"),sort("Exp")],sort("Exp"),attrs([]))]),assoc-group(non-assoc,[prod([sort("Exp"),lit(">"),sort("Exp")],sort("Exp"),attrs([])),prod([sort("Exp"),lit("<"),sort("Exp")],sort("Exp"),attrs([])),prod([sort("Exp"),lit(">="),sort("Exp")],sort("Exp"),attrs([])),prod([sort("Exp"),lit("<="),sort("Exp")],sort("Exp"),attrs([]))]),assoc-group(left,[prod([sort("Exp"),lit("=="),sort("Exp")],sort("Exp"),attrs([]))]),assoc-group(left,[prod([sort("Exp"),lit("&&"),sort("Exp")],sort("Exp"),attrs([]))]),assoc-group(left,[prod([sort("Exp"),lit("||"),sort("Exp")],sort("Exp"),attrs([]))])])])))]),module(unparameterized("layout/layout"),[imports([module(unparameterized("lexical/Identifiers"))])],[exports(conc-grammars(conc-grammars(conc-grammars(lexical-syntax([prod([char-class(simple-charclass(present(conc(short("\\ "),conc(short("\\t"),conc(short("\\n"),short("\\r")))))))],layout,attrs([]))]),lexical-syntax([prod([char-class(simple-charclass(present(short("\\*"))))],sort("CommentChar"),attrs([])),prod([lit("/*"),iter-star(alt(char-class(comp(simple-charclass(present(short("\\*"))))),sort("CommentChar"))),lit("*/")],layout,attrs([])),prod([lit("//"),iter-star(char-class(comp(simple-charclass(present(conc(short("\\n"),short("\\r"))))))),alt(char-class(simple-charclass(present(conc(short("\\n"),short("\\r"))))),sort("EOF"))],layout,attrs([]))])),lexical-restrictions([follow([sort("CommentChar")],single(char-class(simple-charclass(present(short("\\/")))))),follow([sort("BackSlashChar")],single(char-class(simple-charclass(present(short("\\\""))))))])),context-free-restrictions([follow([opt(layout)],single(char-class(simple-charclass(present(conc(short("\\ "),conc(short("\\t"),conc(short("\\n"),short("\\r"))))))))),follow([opt(layout)],single(seq(simple-charclass(present(short("\\/"))),single(char-class(simple-charclass(present(short("\\/")))))))),follow([opt(layout)],single(seq(simple-charclass(present(short("\\/"))),single(char-class(simple-charclass(present(short("\\*"))))))))])))]),module(unparameterized("lexical/Keywords"),[],[exports(lexical-syntax([prod([lit("import")],sort("KeyWord"),attrs([])),prod([lit("module")],sort("KeyWord"),attrs([])),prod([lit("store")],sort("KeyWord"),attrs([])),prod([lit("from")],sort("KeyWord"),attrs([])),prod([lit("with")],sort("KeyWord"),attrs([])),prod([lit("where")],sort("KeyWord"),attrs([])),prod([lit("write")],sort("KeyWord"),attrs([])),prod([lit("List")],sort("KeyWord"),attrs([])),prod([lit("Dict")],sort("KeyWord"),attrs([])),prod([lit("String")],sort("KeyWord"),attrs([])),prod([lit("Number")],sort("KeyWord"),attrs([])),prod([lit("Boolean")],sort("KeyWord"),attrs([])),prod([lit("map")],sort("KeyWord"),attrs([])),prod([lit("reduce")],sort("KeyWord"),attrs([])),prod([lit("for")],sort("KeyWord"),attrs([])),prod([lit("store")],sort("KeyWord"),attrs([])),prod([lit("in")],sort("KeyWord"),attrs([])),prod([lit("to")],sort("KeyWord"),attrs([])),prod([lit("nowarning")],sort("KeyWord"),attrs([])),prod([lit("True")],sort("KeyWord"),attrs([])),prod([lit("False")],sort("KeyWord"),attrs([])),prod([lit("mapper")],sort("KeyWord"),attrs([])),prod([lit("reducer")],sort("KeyWord"),attrs([])),prod([lit("rewriter")],sort("KeyWord"),attrs([])),prod([lit("_")],sort("KeyWord"),attrs([]))]))]),module(unparameterized("lexical/Identifiers"),[imports([module(unparameterized("lexical/Keywords"))])],[exports(conc-grammars(conc-grammars(lexical-syntax([prod([char-class(simple-charclass(present(conc(range(short("a"),short("z")),range(short("A"),short("Z")))))),iter-star(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),range(short("0"),short("9"))))))))],sort("ID"),attrs([])),prod([opt(lit("-")),iter(char-class(simple-charclass(present(range(short("0"),short("9"))))))],sort("NUM"),attrs([])),prod([iter-star(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))],sort("JAVACLASS"),attrs([])),prod([],sort("EOF"),attrs([])),prod([lit("\\\""),iter-star(sort("StringChar")),lit("\\\"")],sort("STRING"),attrs([])),prod([char-class(comp(simple-charclass(present(conc(short("\\\""),short("\\n"))))))],sort("StringChar"),attrs([])),prod([lit("\\\\\\\"")],sort("StringChar"),attrs([])),prod([sort("BackSlashChar")],sort("StringChar"),attrs([])),prod([lit("\\\\")],sort("BackSlashChar"),attrs([]))]),lexical-restrictions([follow([sort("NUM")],single(char-class(simple-charclass(present(range(short("0"),short("9"))))))),follow([sort("ID")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([sort("EOF")],single(char-class(comp(simple-charclass(absent)))))])),lexical-syntax([prod([sort("KeyWord")],sort("ID"),attrs([reject]))])))]),module(unparameterized("Hadooplang"),[imports([module(unparameterized("lexical/Identifiers")),module(unparameterized("layout/layout")),module(unparameterized("grammar/Expressions")),module(unparameterized("grammar/Types"))])],[exports(conc-grammars(conc-grammars(conc-grammars(context-free-start-symbols([sort("Start")]),context-free-syntax([prod([lit("module"),sort("ID"),iter-star(sort("Import")),iter-star(sort("RootStatement"))],sort("Start"),attrs([term(cons("Module")),term(scope([[]]))])),prod([sort("ImportPart"),lit(";")],sort("Import"),attrs([term(cons("Import"))])),prod([lit("from"),sort("ID"),lit("import"),lit("mapper"),sort("MapperRef")],sort("ImportPart"),attrs([term(cons("OneImportMapper"))])),prod([lit("from"),sort("ID"),lit("import"),lit("reducer"),sort("ReducerRef")],sort("ImportPart"),attrs([term(cons("OneImportReducer"))])),prod([lit("from"),sort("ID"),lit("import"),lit("rewriter"),sort("RewriteRef")],sort("ImportPart"),attrs([term(cons("OneImportRewriter"))])),prod([sort("ID")],sort("ReducerRef"),attrs([term(cons("ReducerRef"))])),prod([sort("ID")],sort("RewriteRef"),attrs([term(cons("RewriteRef"))])),prod([sort("ID")],sort("MapperRef"),attrs([term(cons("MapperRef"))])),prod([lit("rewrite"),sort("Exp"),lit("with"),sort("RewriteRef"),sort("Params")],sort("Exp"),attrs([term(cons("Rewrite")),prefer])),prod([sort("ID"),lit(":="),sort("MapReduceChain"),lit(";")],sort("RootStatement"),attrs([term(cons("DatasetDef"))])),prod([lit("store"),sort("ID"),lit(";")],sort("RootStatement"),attrs([term(cons("Store"))])),prod([sort("Rewriter")],sort("RootStatement"),attrs([])),prod([sort("Mapper")],sort("RootStatement"),attrs([])),prod([sort("Reducer")],sort("RootStatement"),attrs([])),prod([sort("Statement")],sort("MapReduceStatement"),attrs([])),prod([lit("write"),sort("Exp"),lit(":"),sort("Exp"),lit(";")],sort("Statement"),attrs([term(cons("write"))])),prod([sort("MRInput"),lit("->"),sort("MRMapper"),lit("->"),sort("MRReducer")],sort("MapReduceChain"),attrs([term(cons("MapReduceChain"))])),prod([lit("input"),sort("ID"),lit("("),iter-star-sep(sort("Exp"),lit(",")),lit(")")],sort("MRInput"),attrs([term(cons("MRInputMethod"))])),prod([lit("input"),sort("ID")],sort("MRInput"),attrs([term(cons("MRInputSet"))])),prod([lit("map"),lit("with"),sort("MapperRef")],sort("MRMapper"),attrs([term(cons("MRMapper"))])),prod([lit("reduce"),lit("with"),sort("ReducerRef")],sort("MRReducer"),attrs([term(cons("MRReducer"))])),prod([lit("{"),iter-star(sort("Statement")),lit("}")],sort("Block"),attrs([term(cons("Block")),term(scope([[]]))])),prod([lit("{"),iter-star(sort("MapReduceStatement")),lit("}")],sort("BlockMR"),attrs([term(cons("BlockMR")),term(scope([[]]))])),prod([lit("{"),iter-star(sort("Statement")),lit("return"),sort("Exp"),lit(";"),lit("}")],sort("BlockReturn"),attrs([term(cons("BlockReturn")),term(scope([[]]))]))])),context-free-syntax([prod([sort("Type"),sort("ID")],sort("RewriterParameter"),attrs([term(cons("RewriterParameter"))])),prod([sort("Type"),sort("ID")],sort("Parameter"),attrs([term(cons("Parameter"))])),prod([lit(","),sort("Type"),sort("ID")],sort("CommaParameter"),attrs([term(cons("Parameter"))])),prod([sort("Type"),sort("ID")],sort("ReduceIterator"),attrs([term(cons("ReduceIterator"))])),prod([lit("mapper"),sort("ID"),sort("MapInner")],sort("Mapper"),attrs([term(cons("Mapper")),term(scope([[]]))])),prod([lit("reducer"),sort("ID"),sort("RedInner")],sort("Reducer"),attrs([term(cons("Reducer")),term(scope([[]]))])),prod([lit(":"),sort("MRKey"),lit(":"),sort("Parameter"),sort("BlockMR")],sort("MapInner"),attrs([term(cons("MapInner")),term(scope([[]]))])),prod([lit(":"),sort("MRKey"),lit(":"),sort("ReduceIterator"),sort("BlockMR")],sort("RedInner"),attrs([term(cons("RedInner")),term(scope([[]]))])),prod([lit("rewriter"),sort("ID"),sort("RewriterParameter"),iter-star(sort("CommaParameter")),sort("BlockReturn")],sort("Rewriter"),attrs([term(cons("Rewriter")),term(scope([[]]))])),prod([lit("rewriter"),sort("ID"),sort("RewriterParameter"),iter-star(sort("CommaParameter")),lit("alias"),iter-star-sep(sort("JAVACLASS"),lit(".")),lit("returns"),sort("Type")],sort("Rewriter"),attrs([term(cons("RewriterAlias")),term(scope([[]]))])),prod([sort("Type"),sort("ID")],sort("MRKey"),attrs([term(cons("MapReduceKey"))]))])),context-free-syntax([prod([sort("ID"),lit(":="),sort("Exp"),lit(";")],sort("Statement"),attrs([term(cons("DatasetDefStatement"))])),prod([sort("DatasetRef"),lit("="),sort("Exp"),lit(";")],sort("Statement"),attrs([term(cons("DatasetSetVar"))])),prod([sort("DatasetRef"),lit("["),lit("]"),lit("="),sort("Exp"),lit(";")],sort("Statement"),attrs([term(cons("ListAddItem"))])),prod([sort("DictAccess"),lit("="),sort("Exp"),lit(";")],sort("Statement"),attrs([term(cons("ListDictSetItem"))])),prod([sort("If")],sort("Statement"),attrs([])),prod([sort("LoopStatement")],sort("Statement"),attrs([term(cons("loop")),term(scope([[]]))])),prod([sort("Block")],sort("LoopBlock"),attrs([term(cons("loopblock")),term(scope([[]]))])),prod([lit("for"),sort("ID"),lit("in"),sort("Exp"),sort("LoopBlock")],sort("LoopStatement"),attrs([term(cons("ForloopSet")),term(scope([[]]))])),prod([lit("for"),sort("ForKeyDef"),lit(":"),sort("ID"),lit("in"),sort("Exp"),sort("LoopBlock")],sort("LoopStatement"),attrs([term(cons("ForloopDict")),term(scope([[]]))])),prod([lit("for"),sort("ID"),lit("in"),sort("Exp"),lit("where"),lit("("),sort("Exp"),lit(")"),sort("LoopBlock")],sort("LoopStatement"),attrs([term(cons("ForloopSet")),term(scope([[]]))])),prod([lit("for"),sort("ForKeyDef"),lit(":"),sort("ID"),lit("in"),sort("Exp"),lit("where"),lit("("),sort("Exp"),lit(")"),sort("LoopBlock")],sort("LoopStatement"),attrs([term(cons("ForloopDict")),term(scope([[]]))])),prod([sort("ID")],sort("ForKeyDef"),attrs([term(cons("ForKeyDef"))])),prod([lit("if"),lit("("),sort("Exp"),lit(")"),sort("Block"),opt(sort("IfElse"))],sort("If"),attrs([term(cons("If"))])),prod([lit("else"),sort("Block")],sort("IfElse"),attrs([term(cons("IfElse"))]))])))])])