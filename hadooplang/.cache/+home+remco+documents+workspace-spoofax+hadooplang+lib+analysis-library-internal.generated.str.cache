Module("lib/analysis-library-internal.generated",[Imports([Import("libstratego-lib"),Import("libstratego-parallel"),Import("lib/editor-common.generated"),Import("lib/analysis-library.generated"),Import("lib/index-library.generated")]),Signature([Constructors([OpDecl("Results",FunType([ConstType(SortNoArgs("AST")),ConstType(Sort("List",[SortNoArgs("Def")])),ConstType(Sort("List",[SortNoArgs("Use")])),ConstType(Sort("List",[SortNoArgs("DefData")])),ConstType(Sort("List",[SortNoArgs("Def")])),ConstType(Sort("List",[SortNoArgs("Def")])),ConstType(Sort("List",[SortNoArgs("File")]))],ConstType(SortNoArgs("Results")))),OpDecl("ParallelResults",FunType([ConstType(SortNoArgs("AST")),ConstType(SortNoArgs("AST")),ConstType(Sort("List",[SortNoArgs("Error")])),ConstType(Sort("List",[SortNoArgs("Warning")])),ConstType(Sort("List",[SortNoArgs("Note")])),ConstType(Sort("List",[SortNoArgs("File")]))],ConstType(SortNoArgs("ParallelResults")))),OpDecl("Diff",ConstType(SortNoArgs("Namespace"))),OpDecl("ASTDiff",ConstType(SortNoArgs("Namespace")))])]),Rules([RDefT("analyze-top-internal",[],[DefaultVarDec("phase"),DefaultVarDec("language"),DefaultVarDec("project-path"),DefaultVarDec("full-path")],Rule(Var("astFilePairs"),NoAnnoList(Op("Results",[Var("asts"),Var("defs"),Var("uses"),Var("data"),Var("added"),Var("removed"),Var("filesToAnalyze")])),[WithClause(Seq(CallT(SVar("index-setup"),[],[Var("language"),NoAnnoList(List([Var("project-path")])),Var("full-path")]),Assign(Var("revision"),RootApp(CallNoArgs(SVar("index-start-transaction")))))),WithClause(Seq(Assign(Var("oldElems"),App(Call(SVar("filter"),[CallNoArgs(SVar("index-diff-constructors"))]),App(CallNoArgs(SVar("index-get-all-in-file")),Var("full-path")))),BA(CallNoArgs(SVar("index-clear-file")),Var("full-path")))),WithClause(DynRuleScope([DynRuleScopeId("Index-UnresolvedSet")],Seq(Assign(Var("unresolvedSet"),RootApp(CallNoArgs(SVar("new-iset")))),Seq(GenDynRules([SetDynRule(DynRuleId(RDecNoArgs("Index-UnresolvedSet")),RuleNoCond(Wld,Var("unresolvedSet")))]),Seq(Assign(NoAnnoList(Tuple([Var("astFilePairs2"),Var("defsList")])),App(CallNoArgs(SVar("unzip")),App(Call(SVar("map"),[CallNoArgs(SVar("analyze-top-defs"))]),Var("astFilePairs")))),Seq(Assign(Var("defs"),App(CallNoArgs(SVar("concat")),Var("defsList"))),Seq(Assign(NoAnnoList(Tuple([Var("astFilePairs3"),Var("dataList")])),App(CallNoArgs(SVar("unzip")),App(Call(SVar("map"),[CallT(SVar("analyze-top-data"),[],[Var("language"),Var("full-path")])]),Var("astFilePairs2")))),Seq(Assign(Var("data"),App(CallNoArgs(SVar("concat")),Var("dataList"))),Seq(Assign(NoAnnoList(Tuple([Var("astFilePairs4"),Var("usesList")])),App(CallNoArgs(SVar("unzip")),App(Call(SVar("map"),[CallT(SVar("analyze-top-uses"),[],[Var("language"),Var("full-path")])]),Var("astFilePairs3")))),Seq(Assign(Var("uses"),App(CallNoArgs(SVar("concat")),Var("usesList"))),Assign(NoAnnoList(Tuple([Var("asts"),Wld])),App(CallNoArgs(SVar("unzip")),Var("astFilePairs4"))))))))))))),WithClause(CallNoArgs(SVar("index-end-transaction"))),WithClause(CondChoice(Seq(Assign(NoAnnoList(Op("Editor",[])),Var("phase")),Not(BA(CallNoArgs(SVar("is-test-file")),Var("full-path")))),Seq(Assign(Var("newElems"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("defs"),App(Call(SVar("filter"),[CallNoArgs(SVar("index-diff-constructors"))]),Var("data"))])))),Seq(Assign(NoAnnoList(Tuple([Var("added"),Var("removed")])),App(CallNoArgs(SVar("analyze-diff")),NoAnnoList(Tuple([Var("oldElems"),Var("newElems")])))),Seq(Assign(Var("changed"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("added"),Var("removed")])))),Call(SVar("index-transaction"),[Assign(Var("filesToAnalyze"),App(CallT(SVar("analyze-store-diff"),[],[Var("changed"),Var("revision")]),Var("astFilePairs4")))])))),Seq(Assign(NoAnnoList(Tuple([Var("added"),Var("removed")])),NoAnnoList(Tuple([NoAnnoList(List([])),NoAnnoList(List([]))]))),Assign(Var("filesToAnalyze"),NoAnnoList(List([])))))),WithClause(BA(Call(SVar("list-loop"),[CallNoArgs(SVar("analyze-top-store-ast"))]),Var("astFilePairs4")))])),RDefNoArgs("analyze-top-defs",Rule(NoAnnoList(Tuple([Var("ast"),Var("file")])),NoAnnoList(Tuple([NoAnnoList(Tuple([Var("ast2"),Var("file")])),Var("defs")])),[WithClause(Seq(BA(CallNoArgs(SVar("index-set-current-file")),Var("file")),Seq(Assign(NoAnnoList(Tuple([NoAnnoList(Op("Some",[Var("ast2")])),Var("defs")])),App(CallNoArgs(SVar("analyze-defs")),NoAnnoList(Op("Some",[Var("ast")])))),BA(CallT(SVar("index-add-all"),[],[Var("file")]),Var("defs")))))])),RDefT("analyze-top-data",[],[DefaultVarDec("language"),DefaultVarDec("full-path")],Rule(NoAnnoList(Tuple([Var("ast"),Var("file")])),NoAnnoList(Tuple([NoAnnoList(Tuple([Var("ast2"),Var("file")])),Var("data2")])),[WithClause(Seq(BA(CallNoArgs(SVar("index-set-current-file")),Var("file")),DynRuleScope([DynRuleScopeId("Index-ReadSet")],Seq(Assign(Var("readSet"),RootApp(CallNoArgs(SVar("new-iset")))),Seq(GenDynRules([SetDynRule(DynRuleId(RDecNoArgs("Index-ReadSet")),RuleNoCond(Wld,Var("readSet")))]),Seq(Assign(Var("ast2"),App(Prim("\"SSL_EXT_clone_and_set_parents\"",[RootApp(Id)]),Var("ast"))),Seq(Assign(Var("data"),App(Call(SVar("origin-track-forced"),[CallNoArgs(SVar("analyze-tree-data"))]),Var("ast2"))),Seq(Assign(NoAnnoList(Tuple([Var("data2"),Wld])),App(CallNoArgs(SVar("analyze-uses")),Var("data"))),Seq(BA(CallT(SVar("index-add-all"),[],[Var("file")]),Var("data2")),IfThen(Not(CallT(SVar("is-test-input"),[],[Var("language"),Var("full-path")])),BA(CallT(SVar("index-add-all"),[],[Var("file")]),App(CallNoArgs(SVar("iset-elements")),Var("readSet")))))))))))))])),RDefT("analyze-top-uses",[],[DefaultVarDec("language"),DefaultVarDec("full-path")],Rule(NoAnnoList(Tuple([Var("ast"),Var("file")])),NoAnnoList(Tuple([NoAnnoList(Tuple([Var("ast3"),Var("file")])),Var("uses")])),[WithClause(Seq(BA(CallNoArgs(SVar("index-set-current-file")),Var("file")),DynRuleScope([DynRuleScopeId("Index-ReadSet")],Seq(Assign(Var("readSet"),RootApp(CallNoArgs(SVar("new-iset")))),Seq(GenDynRules([SetDynRule(DynRuleId(RDecNoArgs("Index-ReadSet")),RuleNoCond(Wld,Var("readSet")))]),Seq(Assign(NoAnnoList(Tuple([Var("ast2"),Var("uses")])),App(CallNoArgs(SVar("analyze-uses")),Var("ast"))),Seq(BA(CallT(SVar("index-add-all"),[],[Var("file")]),Var("uses")),Seq(Assign(Var("ast3"),App(Prim("\"SSL_EXT_clone_and_set_parents\"",[RootApp(Id)]),Var("ast2"))),IfThen(Not(CallT(SVar("is-test-input"),[],[Var("language"),Var("full-path")])),BA(CallT(SVar("index-add-all"),[],[Var("file")]),App(CallNoArgs(SVar("iset-elements")),Var("readSet"))))))))))))])),RDefNoArgs("analyze-top-store-ast",Rule(NoAnnoList(Tuple([Var("ast"),Var("file")])),RootApp(Id),[WithClause(BA(CallT(SVar("index-set-global"),[],[App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([App(CallNoArgs(SVar("index-file-to-uri")),Var("file")),NoAnnoList(List([NoAnnoList(Str("\"ast\""))]))])))]),Var("ast")))])),SDefNoArgs("analyze-defs",CallT(SVar("analyze-defs"),[],[NoAnnoList(Op("Anon",[])),NoAnnoList(Op("Anon",[]))])),RDefT("analyze-defs",[],[DefaultVarDec("head-scope"),DefaultVarDec("head-scope-ns")],Rule(Var("ast"),NoAnnoList(Tuple([Var("ast'"),Var("defs'")])),[WithClause(Seq(CondChoice(Assign(Var("def"),App(CallNoArgs(SVar("nam-get-definition")),Var("ast"))),Seq(Assign(NoAnnoList(Op("Def",[Var("def-path")])),Var("def")),Assign(NoAnnoList(ListTail([Var("head-scope-ns'"),Var("head-scope'")],Wld)),Var("def-path"))),Seq(Assign(Var("def-path"),NoAnnoList(Op("INTERNAL_ERROR",[]))),Seq(Assign(Var("head-scope-ns'"),Var("head-scope-ns")),Assign(Var("head-scope'"),Var("head-scope"))))),Seq(CondChoice(Assign(Var("scope-types"),App(CallNoArgs(SVar("nam-get-scope-types")),Var("ast"))),DynRuleScope([DynRuleScopeId("IndexPath")],Seq(BA(Call(SVar("list-loop"),[CallT(SVar("update-index-path"),[],[Var("head-scope'"),Var("head-scope-ns'"),Var("ast")])]),Var("scope-types")),Assign(NoAnnoList(Tuple([Var("ast'"),Var("defs")])),App(CallT(SVar("analyze-defs-recurse"),[],[NoAnnoList(Op("Anon",[])),NoAnnoList(Op("Anon",[])),Var("def-path")]),Var("ast"))))),Assign(NoAnnoList(Tuple([Var("ast'"),Var("defs")])),App(CallT(SVar("analyze-defs-recurse"),[],[Var("head-scope'"),Var("head-scope-ns'"),Var("def-path")]),Var("ast")))),Assign(Var("defs'"),RootApp(LChoice(Build(NoAnnoList(ListTail([Var("def")],Var("defs")))),Build(Var("defs"))))))))])),RDefT("analyze-defs-recurse",[],[DefaultVarDec("head-scope"),DefaultVarDec("head-scope-ns"),DefaultVarDec("def-path")],Rule(Var("ast"),NoAnnoList(Tuple([Var("ast''"),Var("defs")])),Seq(Assign(Var("analyzed"),App(All(CallT(SVar("analyze-defs"),[],[Var("head-scope"),Var("head-scope-ns")])),Var("ast"))),Seq(Assign(NoAnnoList(Tuple([Var("ast'"),Var("defs")])),App(CallNoArgs(SVar("unzip-analyzed")),Var("analyzed"))),Assign(Var("ast''"),App(Call(SVar("try"),[CallT(SVar("nam-annotate-names"),[],[Var("def-path")])]),Var("ast'"))))))),RDefT("update-index-path",[],[DefaultVarDec("head-scope"),DefaultVarDec("head-scope-ns"),DefaultVarDec("ast")],Rule(Var("scope-type"),Var("scope-type"),Seq(CondChoice(AM(Build(Var("head-scope-ns")),NoAnnoList(Op("Anon",[]))),Seq(Assign(Var("path"),App(LChoice(CallNoArgs(SVar("IndexPath")),Build(NoAnnoList(List([])))),Var("scope-type"))),Assign(Var("path'"),App(CallT(SVar("do-adjusted-index-path"),[],[Var("scope-type"),Var("path"),NoAnnoList(Op("Anon",[RootApp(CallNoArgs(SVar("new")))]))]),Var("ast")))),Seq(Assign(Var("path"),App(LChoice(CallNoArgs(SVar("IndexPath")),Build(NoAnnoList(List([])))),Var("head-scope-ns"))),Assign(Var("path'"),App(CallT(SVar("do-adjusted-index-path"),[],[Var("scope-type"),Var("path"),Var("head-scope")]),Var("ast"))))),GenDynRules([SetDynRule(DynRuleId(RDecNoArgs("IndexPath")),RuleNoCond(Var("scope-type"),Var("path'")))])))),RDefNoArgs("analyze-uses",Rule(Var("ast"),NoAnnoList(Tuple([Var("ast''"),Var("uses'")])),[WithClause(Seq(Assign(Var("analyzed"),App(All(CallNoArgs(SVar("analyze-uses"))),Var("ast"))),Seq(Assign(NoAnnoList(Tuple([Var("ast'"),Var("uses")])),App(CallNoArgs(SVar("unzip-analyzed")),Var("analyzed"))),CondChoice(AM(Build(Var("ast'")),AnnoList(Wld,[As(Var("unresolved"),NoAnnoList(ListTail([NoAnnoList(Op("Unresolved",[Var("namespace")])),Var("x")],Var("path"))))])),CondChoice(Assign(NoAnnoList(Op("Def",[Var("def-uri")])),App(CallT(SVar("index-lookup"),[Id],[Var("namespace"),Var("path"),App(CallNoArgs(SVar("strip-annos")),Var("ast'"))]),Var("ast'"))),Seq(Assign(Var("ast''"),AnnoList(Var("ast"),[Var("def-uri")])),Assign(Var("uses'"),NoAnnoList(ListTail([NoAnnoList(Op("Use",[Var("def-uri")]))],Var("uses"))))),Seq(Assign(Var("ast''"),Var("ast'")),Assign(Var("uses'"),NoAnnoList(ListTail([NoAnnoList(Op("BadUse",[NoAnnoList(List([Var("namespace"),Var("x")]))]))],Var("uses")))))),Seq(Assign(Var("ast''"),Var("ast'")),Assign(Var("uses'"),Var("uses")))))))])),RDefNoArgs("analyze-tree-data",Rule(Var("tree"),Var("data"),Seq(Assign(Var("set"),RootApp(CallNoArgs(SVar("new-iset")))),Seq(BA(Call(SVar("topdown"),[CallT(SVar("analyze-tree-data-part"),[],[Var("set")])]),Var("tree")),Assign(Var("data"),App(CallNoArgs(SVar("iset-elements")),Var("set"))))))),RDefT("analyze-tree-data-part",[],[DefaultVarDec("set")],Rule(Var("tree"),Var("tree"),IfThen(Assign(Var("def-term"),RootApp(CallNoArgs(SVar("nam-get-definition-key")))),Seq(Assign(AnnoList(Wld,[NoAnnoList(ListTail([Var("namespace")],Var("path")))]),Var("def-term")),IfThen(Assign(Var("result"),App(CallT(SVar("adjust-index-def-data"),[CallT(SVar("store-index-data-results"),[],[Var("set")])],[Var("namespace"),Var("path")]),Var("tree"))),BA(CallT(SVar("fatal-err"),[],[NoAnnoList(Str("\"Unexpected result from adjust-index-def-data; should call <store-results>\""))]),Var("result"))))))),RDefT("store-index-data-results",[],[DefaultVarDec("set")],Rule(Var("t"),RootApp(Fail),CondChoice(CallNoArgs(SVar("is-list")),BA(CallT(SVar("iset-addlist"),[],[Var("t")]),Var("set")),BA(CallT(SVar("iset-add"),[],[Var("t")]),Var("set")))))]),Rules([RDef("index-parallel-analyze",[DefaultVarDec("analyze")],Rule(Var("files"),Var("allResults"),[WithClause(Seq(Call(SVar("map"),[CallNoArgs(SVar("index-parse-file"))]),Seq(Call(SVar("map"),[LRule(RuleNoCond(NoAnnoList(Tuple([Var("ast"),Var("file")])),NoAnnoList(Tuple([Var("ast"),Var("file"),RootApp(CallNoArgs(SVar("project-path")))]))))]),Seq(Call(SVar("parallel-unordered"),[All(Call(SVar("index-analyze"),[CallNoArgs(SVar("analyze"))]))]),Seq(Match(Var("results")),Seq(CallT(SVar("with"),[BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([App(CallNoArgs(SVar("length")),Var("results")),App(CallNoArgs(SVar("length")),Var("files"))])))],[NoAnnoList(Str("\"Input size not equal to output size\""))]),Seq(Assign(Var("filesToAnalyze"),App(CallNoArgs(SVar("make-set")),App(Call(SVar("mapconcat"),[Match(NoAnnoList(Op("ParallelResults",[Wld,Wld,Wld,Wld,Wld,RootApp(Id)])))]),Var("results")))),CondChoice(Not(Assign(NoAnnoList(List([])),Var("filesToAnalyze"))),Assign(Var("allResults"),App(CallNoArgs(SVar("concat")),NoAnnoList(List([Var("results"),App(Call(SVar("index-parallel-analyze"),[CallNoArgs(SVar("analyze"))]),Var("filesToAnalyze"))])))),Assign(Var("allResults"),Var("results"))))))))))])),RDefNoArgs("index-parse-file",Rule(Var("file"),NoAnnoList(Tuple([Var("ast"),Var("file")])),[WithClause(CondChoice(BA(CallNoArgs(SVar("file-exists")),Var("file")),Assign(Var("ast"),App(CallNoArgs(SVar("parse-file")),Var("file"))),Assign(Var("ast"),NoAnnoList(Tuple([])))))])),RDefNoArgs("index-set-markers",Rule(NoAnnoList(Op("ParallelResults",[Var("ast"),Var("ast'"),Var("errors"),Var("warnings"),Var("notes"),Var("diffs")])),RootApp(Id),[WithClause(BA(CallT(SVar("set-markers"),[],[Var("ast")]),NoAnnoList(Tuple([Var("ast'"),Var("errors"),Var("warnings"),Var("notes")]))))])),RDef("index-analyze",[DefaultVarDec("analyze")],Rule(NoAnnoList(Tuple([Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Op("ParallelResults",[Var("ast"),Var("ast'"),Var("errors"),Var("warnings"),Var("notes"),Var("filesToAnalyze")])),[WithClause(Seq(Assign(NoAnnoList(Tuple([Var("ast'"),Var("errors"),Var("warnings"),Var("notes"),Var("filesToAnalyze")])),RootApp(CallNoArgs(SVar("analyze")))),IfThen(Assign(NoAnnoList(List([])),Var("filesToAnalyze")),CallNoArgs(SVar("complete-work-unit")))))]))]),Rules([SDefNoArgs("index-split",Fail),SDefNoArgs("index-is-toplevel",Fail),SDefNoArgs("index-is-qualifier",Fail),SDefNoArgs("index-qualifier-subelements",Fail),SDefT("index-create-qualifier",[],[DefaultVarDec("qualifier")],Fail),RDefNoArgs("index-toplevel-split",Rule(Var("ast"),Var("asts'"),[WithClause(Seq(Assign(NoAnnoList(Tuple([Var("ast'"),Wld])),App(CallNoArgs(SVar("analyze-defs")),Var("ast"))),Seq(Assign(Var("asts"),App(CallNoArgs(SVar("index-toplevel-split-internal")),Var("ast'"))),Assign(Var("asts'"),App(CallNoArgs(SVar("strip-annos")),Var("asts"))))))])),RDefNoArgs("index-toplevel-split-internal",Rule(Var("node"),Var("units"),[WithClause(SwitchChoice(Id,[SwitchCase(Match(NoAnnoList(Tuple([]))),Assign(Var("units"),NoAnnoList(List([NoAnnoList(Tuple([NoAnnoList(Tuple([])),NoAnnoList(List([]))]))])))),SwitchCase(CallNoArgs(SVar("index-is-qualifier")),Seq(Assign(Var("elems"),App(Call(SVar("mapconcat"),[CallNoArgs(SVar("index-toplevel-split-internal"))]),App(CallNoArgs(SVar("index-qualifier-subelements")),Var("node")))),Assign(Var("units"),App(Call(SVar("map"),[CallT(SVar("index-transform-qualifier"),[],[Var("node")])]),Var("elems"))))),SwitchCase(CallNoArgs(SVar("index-is-toplevel")),Assign(Var("units"),NoAnnoList(List([NoAnnoList(Tuple([Var("node"),App(CallNoArgs(SVar("index-uri")),App(CallNoArgs(SVar("nam-get-definition-key")),Var("node")))]))]))))],Assign(Var("units"),NoAnnoList(List([NoAnnoList(Tuple([Var("node"),NoAnnoList(List([]))]))])))))])),RDefT("index-transform-qualifier",[],[DefaultVarDec("node")],Rule(NoAnnoList(Tuple([Var("elem"),Var("subfileName")])),NoAnnoList(Tuple([Var("qualifier"),Var("subfileName")])),[WithClause(Assign(Var("qualifier"),App(CallT(SVar("index-create-qualifier"),[],[Var("node")]),Var("elem"))))]))]),Rules([RDefNoArgs("analyze-diff",Rule(NoAnnoList(Tuple([Var("defs1"),Var("defs2")])),NoAnnoList(Tuple([Var("added"),Var("removed")])),[WithClause(Seq(Assign(Var("added"),App(Call(SVar("diff"),[CallNoArgs(SVar("index-diff-compare"))]),NoAnnoList(Tuple([Var("defs2"),Var("defs1")])))),Assign(Var("removed"),App(Call(SVar("diff"),[CallNoArgs(SVar("index-diff-compare"))]),NoAnnoList(Tuple([Var("defs1"),Var("defs2")]))))))])),RDefT("analyze-store-diff",[],[DefaultVarDec("changedEntries"),DefaultVarDec("revision")],Rule(Var("astFilePairs"),Var("analyzeFiles'"),[WithClause(Seq(Assign(Var("changedFiles"),App(Call(SVar("mapconcat"),[CallNoArgs(SVar("index-get-files-of"))]),Var("changedEntries"))),Seq(Assign(Var("dependentFiles"),App(CallNoArgs(SVar("index-get-dependent-files")),Var("changedEntries"))),Seq(Assign(Var("analyzeFiles"),App(CallNoArgs(SVar("make-set")),App(Call(SVar("remove-all"),[CallNoArgs(SVar("fake-file"))]),Var("dependentFiles")))),Seq(Assign(Var("analyzeFiles'"),Var("analyzeFiles")),Seq(Assign(Var("changedAstFiles"),App(Call(SVar("filter"),[CallNoArgs(SVar("analyze-astdiff"))]),Var("astFilePairs"))),Seq(Assign(Var("compileFiles"),App(CallNoArgs(SVar("make-set")),App(CallNoArgs(SVar("concat")),NoAnnoList(List([Var("analyzeFiles'"),Var("changedFiles"),Var("changedAstFiles")]))))),BA(Call(SVar("map"),[CallNoArgs(SVar("analyze-add-compilediff"))]),Var("compileFiles")))))))))])),RDefNoArgs("analyze-astdiff",Rule(NoAnnoList(Tuple([Var("ast"),Var("file")])),Var("file"),Seq(Assign(Var("name"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([App(CallNoArgs(SVar("index-file-to-uri")),Var("file")),NoAnnoList(List([NoAnnoList(Str("\"ast-checksum\""))]))])))),Seq(Assign(Var("newChecksum"),App(CallNoArgs(SVar("checksum")),Var("ast"))),CondChoice(Assign(Var("oldChecksum"),RootApp(CallT(SVar("index-get-global"),[],[Var("name")]))),Seq(BA(CallT(SVar("index-set-global"),[],[Var("name")]),Var("newChecksum")),Not(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("oldChecksum"),Var("newChecksum")]))))),BA(CallT(SVar("index-set-global"),[],[Var("name")]),Var("newChecksum"))))))),SDefNoArgs("analyze-add-compilediff",CallT(SVar("index-add-global"),[],[NoAnnoList(Str("\"compile-diff\""))])),SDefNoArgs("analyze-get-compilediffs",Seq(CallT(SVar("index-get-all-globals"),[],[NoAnnoList(Str("\"compile-diff\""))]),CallT(SVar("index-clear-global"),[],[NoAnnoList(Str("\"compile-diff\""))])))]),Rules([RDefT("index-lookup",[DefaultVarDec("is-adjust-lookup-enabled")],[DefaultVarDec("namespace"),DefaultVarDec("path"),DefaultVarDec("prefix")],Rule(Var("x"),Var("def"),Seq(Assign(Var("candidates"),RootApp(CallT(SVar("index-lookup-one-level"),[CallNoArgs(SVar("is-adjust-lookup-enabled"))],[Var("namespace"),Var("path"),Var("prefix")]))),CondChoice(BA(Match(NoAnnoList(Op("StopLookup",[]))),Var("candidates")),Fail,LChoice(Assign(Var("def"),RootApp(CallT(SVar("index-select"),[],[Var("namespace"),Var("path"),Var("x")]))),Seq(Assign(NoAnnoList(ListTail([Wld],Var("path'"))),Var("path")),Assign(Var("def"),App(CallT(SVar("index-lookup"),[CallNoArgs(SVar("is-adjust-lookup-enabled"))],[Var("namespace"),Var("path'"),Var("prefix")]),Var("x"))))))))),RDefT("index-lookup-all",[DefaultVarDec("is-adjust-lookup-enabled")],[DefaultVarDec("namespace"),DefaultVarDec("path"),DefaultVarDec("prefix")],Rule(Var("x"),Var("defs'"),Seq(Assign(Var("candidates"),RootApp(CallT(SVar("index-lookup-one-level"),[CallNoArgs(SVar("is-adjust-lookup-enabled"))],[Var("namespace"),Var("path"),Var("prefix")]))),Seq(Assign(Var("defs"),RootApp(CallT(SVar("index-select-all"),[],[Var("namespace"),Var("path"),Var("x")]))),CondChoice(Assign(NoAnnoList(ListTail([Wld],Var("path'"))),Var("path")),Seq(Assign(Var("defs2"),App(CallT(SVar("index-lookup-all"),[CallNoArgs(SVar("is-adjust-lookup-enabled"))],[Var("namespace"),Var("path'"),Var("prefix")]),Var("x"))),Assign(Var("defs'"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("defs"),Var("defs2")]))))),Assign(Var("defs'"),Var("defs"))))))),RDefT("index-lookup-outermost",[DefaultVarDec("is-adjust-lookup-enabled")],[DefaultVarDec("namespace"),DefaultVarDec("path"),DefaultVarDec("prefix")],Rule(Var("x"),Var("def"),LChoice(Seq(Assign(NoAnnoList(ListTail([Wld],Var("path'"))),Var("path")),Assign(Var("def"),App(CallT(SVar("index-lookup-outermost"),[CallNoArgs(SVar("is-adjust-lookup-enabled"))],[Var("namespace"),Var("path'"),Var("prefix")]),Var("x")))),Seq(Assign(Var("candidates"),RootApp(CallT(SVar("index-lookup-one-level"),[CallNoArgs(SVar("is-adjust-lookup-enabled"))],[Var("namespace"),Var("path"),Var("prefix")]))),Assign(Var("def"),RootApp(CallT(SVar("index-select"),[],[Var("namespace"),Var("path"),Var("x")]))))))),RDefT("index-lookup-one-level",[DefaultVarDec("is-adjusted-lookup-enabled")],[DefaultVarDec("namespace"),DefaultVarDec("path"),DefaultVarDec("prefix")],Rule(AnnoList(Var("x"),[Wld]),Var("defs"),[WithClause(LChoice(Seq(CallNoArgs(SVar("is-adjusted-lookup-enabled")),Seq(CallT(SVar("do-adjust-index-lookup"),[],[Var("namespace"),Var("path"),Var("x"),Var("prefix")]),CondChoice(Match(NoAnnoList(Op("StopLookup",[]))),Assign(Var("defs"),NoAnnoList(Op("StopLookup",[]))),Seq(Call(SVar("mapconcat"),[LChoice(LRule(RuleNoCond(As(Var("d"),NoAnnoList(Op("Def",[Var("p")]))),NoAnnoList(List([Var("d")])))),LChoice(LRule(RuleNoCond(NoAnnoList(ListTail([Var("namespace'")],Var("path'"))),App(CallT(SVar("index-lookup-one-level"),[Fail],[Var("namespace'"),Var("path'"),Var("prefix")]),Var("x")))),CallT(SVar("fatal-err"),[],[NoAnnoList(Str("\"Unexpected result from adjust-index-lookup, should be a list Def(_) or [namespace | path] or StopLookup() to stop the lookup\""))])))]),Match(Var("defs")))))),Assign(Var("defs"),App(CallT(SVar("index-get-children"),[],[Var("namespace"),Var("prefix")]),NoAnnoList(Op("Def",[NoAnnoList(ListTail([Var("namespace")],Var("path")))]))))))])),RDefT("index-lookup-all-levels",[DefaultVarDec("is-adjust-lookup-enabled")],[DefaultVarDec("namespace"),DefaultVarDec("path"),DefaultVarDec("prefix")],Rule(AnnoList(Var("x"),[Wld]),Var("all-defs"),[WithClause(LChoice(Seq(CallNoArgs(SVar("is-adjust-lookup-enabled")),Seq(CallT(SVar("do-adjust-index-lookup"),[],[Var("namespace"),Var("path"),Var("x"),Var("prefix")]),CondChoice(Match(NoAnnoList(Op("StopLookup",[]))),Assign(Var("all-defs"),NoAnnoList(List([]))),Seq(Call(SVar("mapconcat"),[LChoice(LRule(RuleNoCond(As(Var("d"),NoAnnoList(Op("Def",[Var("p")]))),NoAnnoList(List([Var("d")])))),LChoice(LRule(RuleNoCond(NoAnnoList(ListTail([Var("namespace'")],Var("path'"))),App(CallT(SVar("index-lookup-all-levels"),[Fail],[Var("namespace'"),Var("path'"),Var("prefix")]),Var("x")))),CallT(SVar("fatal-err"),[],[NoAnnoList(Str("\"Unexpected result from adjust-index-lookup, should be a list Def(_) or [namespace | path] or StopLookup() to stop the lookup\""))])))]),Match(Var("all-defs")))))),Seq(Assign(Var("one-level"),App(CallT(SVar("index-get-children"),[],[Var("namespace"),Var("prefix")]),NoAnnoList(Op("Def",[NoAnnoList(ListTail([Var("namespace")],Var("path")))])))),CondChoice(Assign(NoAnnoList(ListTail([Wld],Var("path'"))),Var("path")),Assign(Var("all-defs"),App(CallNoArgs(SVar("concat")),NoAnnoList(List([Var("one-level"),App(CallT(SVar("index-lookup-all-levels"),[Fail],[Var("namespace"),Var("path'"),Var("prefix")]),Var("x"))])))),Assign(Var("all-defs"),Var("one-level"))))))]))]),Rules([RDefNoArgs("index-uri-impl",RuleNoCond(NoAnnoList(Op("Def",[Var("uri")])),Var("uri"))),RDefNoArgs("index-uri-impl",RuleNoCond(NoAnnoList(Op("Use",[Var("uri")])),Var("uri"))),RDefNoArgs("index-uri-impl",RuleNoCond(NoAnnoList(Op("Read",[Var("uri")])),Var("uri"))),RDefNoArgs("index-uri-impl",RuleNoCond(AnnoList(Var("x"),[NoAnnoList(ListTail([Var("namespace")],Var("path")))]),NoAnnoList(ListTail([App(CallNoArgs(SVar("index-namespace-unwrap")),Var("namespace"))],Var("path"))))),RDefNoArgs("index-uri-impl",RuleNoCond(NoAnnoList(Op("ReadWildcard",[Var("uri"),Wld])),Var("uri"))),RDefNoArgs("index-value-impl",RuleNoCond(NoAnnoList(Op("Def",[Var("value")])),Var("value"))),RDefNoArgs("index-value-impl",RuleNoCond(NoAnnoList(Op("Use",[Var("value")])),Var("value"))),RDefNoArgs("index-value-impl",RuleNoCond(NoAnnoList(Op("Read",[Var("value")])),Var("value"))),RDefNoArgs("index-value-impl",RuleNoCond(NoAnnoList(Op("ReadWildcard",[Wld,Var("value")])),Var("value")))]),Rules([RDefNoArgs("unzip-analyzed",Rule(Var("appl"),NoAnnoList(Tuple([Var("appl'"),Var("unzipped-parts")])),[WithClause(Seq(Assign(Var("appl'"),App(All(LRule(RuleNoCond(NoAnnoList(Tuple([Var("a"),Wld])),Var("a")))),Var("appl"))),Assign(Var("unzipped-parts"),App(CallNoArgs(SVar("concat")),App(LChoice(Call(SVar("get-appl-arguments"),[LRule(RuleNoCond(NoAnnoList(Tuple([Wld,Var("b")])),Var("b")))]),LChoice(Call(SVar("map"),[LRule(RuleNoCond(NoAnnoList(Tuple([Wld,Var("b")])),Var("b")))]),Build(NoAnnoList(List([]))))),Var("appl"))))))])),SDefNoArgs("is-test-file",CallT(SVar("string-ends-with"),[],[NoAnnoList(Str("\".spt\""))])),SDefNoArgs("is-test-language",Match(NoAnnoList(Str("\"Spoofax-Testing\"")))),SDefT("is-test-input",[],[DefaultVarDec("language"),DefaultVarDec("path")],LChoice(BA(CallNoArgs(SVar("is-test-language")),Var("language")),BA(CallNoArgs(SVar("is-test-file")),Var("path")))),SDefNoArgs("fake-file",LChoice(CallNoArgs(SVar("is-test-file")),CallNoArgs(SVar("index-is-fake-file")))),SDefNoArgs("index-filepair-to-file",Seq(CallNoArgs(SVar("Fst")),CallT(SVar("string-replace"),[],[NoAnnoList(StringQuotation1("                           ",[StringEscape1("                           ",RootApp(CallNoArgs(SVar("project-path")))),QStr("/")])),NoAnnoList(Str("\"\""))]))),RDefT("ast-uri-to-ast-file",[],[DefaultVarDec("full-path")],RuleNoCond(NoAnnoList(Tuple([Var("ast"),Var("uri")])),NoAnnoList(Tuple([Var("ast"),NoAnnoList(Tuple([Var("full-path"),Var("uri")]))])))),RDefT("index-is-name-substring",[],[DefaultVarDec("name")],Rule(Var("template"),RootApp(Id),[WithClause(Assign(NoAnnoList(ListTail([Wld,Var("uri-name")],Wld)),RootApp(CallNoArgs(SVar("index-uri"))))),WhereClause(BA(Call(SVar("is-substring"),[Build(Var("name"))]),Var("uri-name")))])),RDefT("index-readwildcard-substring",[],[DefaultVarDec("prefix")],Rule(NoAnnoList(Op("ReadWildcard",[Wld,Var("name")])),RootApp(Id),BA(Call(SVar("is-substring"),[Build(Var("prefix"))]),Var("name")))),RDefT("store-wildcard-read",[],[DefaultVarDec("namespace"),DefaultVarDec("path"),DefaultVarDec("prefix")],Rule(Var("children"),RootApp(Id),[WithClause(IfThen(Assign(Var("set"),RootApp(CallNoArgs(SVar("Index-ReadSet")))),CondChoice(Assign(NoAnnoList(Int("1")),App(CallNoArgs(SVar("length")),Var("children"))),BA(CallT(SVar("iset-add"),[],[NoAnnoList(Op("Read",[NoAnnoList(ListTail([Var("namespace")],Var("path")))]))]),Var("set")),BA(CallT(SVar("iset-add"),[],[NoAnnoList(Op("ReadWildcard",[NoAnnoList(ListTail([Var("namespace")],Var("path"))),Var("prefix")]))]),Var("set")))))])),SDefT("index-is-unresolved",[],[DefaultVarDec("x"),DefaultVarDec("uri")],Seq(CallNoArgs(SVar("Index-UnresolvedSet")),LChoice(CallT(SVar("iset-contains"),[],[NoAnnoList(Tuple([Var("x"),Var("uri")]))]),Fail))),SDefT("index-add-unresolved",[],[DefaultVarDec("x"),DefaultVarDec("uri")],LChoice(Seq(CallNoArgs(SVar("Index-UnresolvedSet")),CallT(SVar("iset-add"),[],[NoAnnoList(Tuple([Var("x"),Var("uri")]))])),Id)),RDefNoArgs("index-file-dependent-construct",Rule(Var("uri"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("uses"),Var("reads")]))),[WithClause(Seq(Assign(Var("uses"),App(CallNoArgs(SVar("index-get-uses-all")),NoAnnoList(Op("Def",[Var("uri")])))),Assign(Var("reads"),App(CallNoArgs(SVar("index-get-reads-all")),NoAnnoList(Op("Def",[Var("uri")]))))))])),SDefNoArgs("index-file-dependency-filter",LChoice(Match(NoAnnoList(Op("Read",[Wld]))),LChoice(Match(NoAnnoList(Op("ReadWildcard",[Wld,Wld]))),Match(NoAnnoList(Op("Use",[Wld])))))),SDefT("do-adjust-index-lookup",[],[DefaultVarDec("namespace"),DefaultVarDec("path"),DefaultVarDec("use"),DefaultVarDec("prefix")],Call(SVar("repeat-until"),[Prim("\"SSL_EXT_get_parent\"",[RootApp(Id)]),CallT(SVar("adjust-index-lookup"),[CallT(SVar("origin-equal"),[],[Var("use")])],[Var("namespace"),Var("path"),Var("prefix")])])),SDefT("index-select",[],[DefaultVarDec("namespace"),DefaultVarDec("path"),DefaultVarDec("use")],Call(SVar("getfirst"),[Where(Match(NoAnnoList(Op("Def",[NoAnnoList(ListTail([Wld,RootApp(CallT(SVar("SRTS-EXT-eq-ignore-annos"),[],[Var("use")]))],Wld))]))))])),SDefT("index-select-all",[],[DefaultVarDec("namespace"),DefaultVarDec("path"),DefaultVarDec("use")],Call(SVar("filter"),[Where(Match(NoAnnoList(Op("Def",[NoAnnoList(ListTail([Wld,RootApp(CallT(SVar("SRTS-EXT-eq-ignore-annos"),[],[Var("use")]))],Wld))]))))])),SDefT("do-adjusted-index-path",[],[DefaultVarDec("namespace"),DefaultVarDec("path"),DefaultVarDec("def")],LChoice(CallT(SVar("adjust-index-path"),[CallT(SVar("origin-equal"),[],[Var("def")])],[Var("namespace"),Var("path")]),Build(NoAnnoList(ListTail([Var("def")],Var("path")))))),SDefT("index-eq",[],[DefaultVarDec("namespace"),DefaultVarDec("expected")],Where(Seq(Match(NoAnnoList(Op("Def",[NoAnnoList(ListTail([Wld,Var("name")],Wld))]))),BA(CallT(SVar("SRTS-EXT-eq-ignore-annos"),[],[Var("expected")]),Var("name"))))),ExtSDef("SRTS-EXT-eq-ignore-annos",[],[DefaultVarDec("t")]),SDefNoArgs("index-key-unwrap",LChoice(LRule(RuleNoCond(AnnoList(Var("key"),[Var("uri")]),AnnoList(Var("key"),[App(CallNoArgs(SVar("index-uri-unwrap")),Var("uri"))]))),Id))]),Rules([RDefT("nam-get-def",[],[DefaultVarDec("namespace")],RuleNoCond(Var("x"),NoAnnoList(Op("Def",[NoAnnoList(ListTail([Var("namespace"),Var("x")],App(LChoice(CallNoArgs(SVar("IndexPath")),Build(NoAnnoList(List([])))),Var("namespace"))))])))),RDefT("nam-annotate-use",[],[DefaultVarDec("namespace")],RuleNoCond(Var("t"),AnnoList(Var("t"),[NoAnnoList(ListTail([NoAnnoList(Op("Unresolved",[Var("namespace")])),Var("t")],App(LChoice(CallNoArgs(SVar("IndexPath")),Build(NoAnnoList(List([])))),Var("namespace"))))]))),SDefNoArgs("nam-get-scope-types",Fail),SDefNoArgs("nam-get-definition",Fail),SDefNoArgs("nam-get-definition-key",Fail),SDefT("nam-annotate-names",[],[DefaultVarDec("def-path")],Fail)])])