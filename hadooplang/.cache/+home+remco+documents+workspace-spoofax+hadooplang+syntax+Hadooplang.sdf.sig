module(unparameterized("Hadooplang"),[imports([module(unparameterized("lexical/Identifiers")),module(unparameterized("layout/layout")),module(unparameterized("grammar/Expressions")),module(unparameterized("grammar/Types"))])],[exports(conc-grammars(conc-grammars(conc-grammars(context-free-start-symbols([sort("Start")]),context-free-syntax([prod([lit("module"),namespacedef("Module",sort("ID")),iter-star(sort("Import")),iter-star(sort("RootStatement"))],sort("Start"),attrs([term("Module"),term(scope([]))])),prod([namespacedef("Import",sort("ImportPart")),lit(";")],sort("Import"),attrs([term("Import")])),prod([lit("from"),namespaceref2("Module",sort("ID")),lit("import"),lit("mapper"),sort("MapperRef")],sort("ImportPart"),attrs([term("OneImportMapper")])),prod([lit("from"),namespaceref2("Module",sort("ID")),lit("import"),lit("reducer"),sort("ReducerRef")],sort("ImportPart"),attrs([term("OneImportReducer")])),prod([lit("from"),namespaceref2("Module",sort("ID")),lit("import"),lit("rewriter"),sort("RewriteRef")],sort("ImportPart"),attrs([term("OneImportRewriter")])),prod([namespaceref2("Reducer",sort("ID"))],sort("ReducerRef"),attrs([term("ReducerRef")])),prod([namespaceref2("Rewriter",sort("ID"))],sort("RewriteRef"),attrs([term("RewriteRef")])),prod([namespaceref2("Mapper",sort("ID"))],sort("MapperRef"),attrs([term("MapperRef")])),prod([lit("rewrite"),sort("Exp"),lit("with"),sort("RewriteRef"),sort("Params")],sort("Exp"),attrs([term("Rewrite"),prefer])),prod([namespacedef("Dataset",sort("ID")),lit(":="),sort("MapReduceChain"),lit(";")],sort("RootStatement"),attrs([term("DatasetDef")])),prod([lit("store"),namespaceref2("Dataset",sort("ID")),lit(";")],sort("RootStatement"),attrs([term("Store")])),prod([sort("Rewriter")],sort("RootStatement"),attrs([])),prod([sort("Mapper")],sort("RootStatement"),attrs([])),prod([sort("Reducer")],sort("RootStatement"),attrs([])),prod([sort("Statement")],sort("MapReduceStatement"),attrs([])),prod([lit("write"),sort("Exp"),lit(":"),sort("Exp"),lit(";")],sort("Statement"),attrs([term("write")])),prod([sort("MRInput"),lit("->"),sort("MRMapper"),lit("->"),sort("MRReducer")],sort("MapReduceChain"),attrs([term("MapReduceChain")])),prod([lit("input"),sort("ID"),lit("("),iter-star-sep(sort("Exp"),lit(",")),lit(")")],sort("MRInput"),attrs([term("MRInputMethod")])),prod([lit("input"),namespaceref2("Dataset",sort("ID"))],sort("MRInput"),attrs([term("MRInputSet")])),prod([lit("map"),lit("with"),sort("MapperRef")],sort("MRMapper"),attrs([term("MRMapper")])),prod([lit("reduce"),lit("with"),sort("ReducerRef")],sort("MRReducer"),attrs([term("MRReducer")])),prod([lit("{"),iter-star(sort("Statement")),lit("}")],sort("Block"),attrs([term("Block"),term(scope([]))])),prod([lit("{"),iter-star(sort("MapReduceStatement")),lit("}")],sort("BlockMR"),attrs([term("BlockMR"),term(scope([]))])),prod([lit("{"),iter-star(sort("Statement")),lit("return"),sort("Exp"),lit(";"),lit("}")],sort("BlockReturn"),attrs([term("BlockReturn"),term(scope([]))]))])),context-free-syntax([prod([sort("Type"),namespacedef("Datavar",sort("ID"))],sort("RewriterParameter"),attrs([term("RewriterParameter")])),prod([sort("Type"),namespacedef("Datavar",sort("ID"))],sort("Parameter"),attrs([term("Parameter")])),prod([lit(","),sort("Type"),namespacedef("Datavar",sort("ID"))],sort("CommaParameter"),attrs([term("Parameter")])),prod([sort("Type"),namespacedef("Datavar",sort("ID"))],sort("ReduceIterator"),attrs([term("ReduceIterator")])),prod([lit("mapper"),namespacedef("Mapper",sort("ID")),sort("MapInner")],sort("Mapper"),attrs([term("Mapper"),term(scope([]))])),prod([lit("reducer"),namespacedef("Reducer",sort("ID")),sort("RedInner")],sort("Reducer"),attrs([term("Reducer"),term(scope([]))])),prod([lit(":"),sort("MRKey"),lit(":"),sort("Parameter"),sort("BlockMR")],sort("MapInner"),attrs([term("MapInner"),term(scope([]))])),prod([lit(":"),sort("MRKey"),lit(":"),sort("ReduceIterator"),sort("BlockMR")],sort("RedInner"),attrs([term("RedInner"),term(scope([]))])),prod([lit("rewriter"),namespacedef("Rewriter",sort("ID")),sort("RewriterParameter"),iter-star(sort("CommaParameter")),sort("BlockReturn")],sort("Rewriter"),attrs([term("Rewriter"),term(scope([]))])),prod([lit("rewriter"),namespacedef("Rewriter",sort("ID")),sort("RewriterParameter"),iter-star(sort("CommaParameter")),lit("alias"),iter-star-sep(sort("JAVACLASS"),lit(".")),lit("returns"),sort("Type")],sort("Rewriter"),attrs([term("RewriterAlias"),term(scope([]))])),prod([sort("Type"),namespacedef("Datavar",sort("ID"))],sort("MRKey"),attrs([term("MapReduceKey")]))])),context-free-syntax([prod([namespacedef("Datavar",sort("ID")),lit(":="),sort("Exp"),lit(";")],sort("Statement"),attrs([term("DatasetDefStatement")])),prod([sort("DatasetRef"),lit("="),sort("Exp"),lit(";")],sort("Statement"),attrs([term("DatasetSetVar")])),prod([sort("DatasetRef"),lit("["),lit("]"),lit("="),sort("Exp"),lit(";")],sort("Statement"),attrs([term("ListAddItem")])),prod([sort("DictAccess"),lit("="),sort("Exp"),lit(";")],sort("Statement"),attrs([term("ListDictSetItem")])),prod([sort("If")],sort("Statement"),attrs([])),prod([sort("LoopStatement")],sort("Statement"),attrs([term("loop"),term(scope([]))])),prod([sort("Block")],sort("LoopBlock"),attrs([term("loopblock"),term(scope([]))])),prod([lit("for"),namespacedef("Datavar",sort("ID")),lit("in"),sort("Exp"),sort("LoopBlock")],sort("LoopStatement"),attrs([term("ForloopSet"),term(scope([]))])),prod([lit("for"),sort("ForKeyDef"),lit(":"),namespacedef("Datavar",sort("ID")),lit("in"),sort("Exp"),sort("LoopBlock")],sort("LoopStatement"),attrs([term("ForloopDict"),term(scope([]))])),prod([lit("for"),namespacedef("Datavar",sort("ID")),lit("in"),sort("Exp"),lit("where"),lit("("),sort("Exp"),lit(")"),sort("LoopBlock")],sort("LoopStatement"),attrs([term("ForloopSet"),term(scope([]))])),prod([lit("for"),sort("ForKeyDef"),lit(":"),namespacedef("Datavar",sort("ID")),lit("in"),sort("Exp"),lit("where"),lit("("),sort("Exp"),lit(")"),sort("LoopBlock")],sort("LoopStatement"),attrs([term("ForloopDict"),term(scope([]))])),prod([namespacedef("Datavar",sort("ID"))],sort("ForKeyDef"),attrs([term("ForKeyDef")])),prod([lit("if"),lit("("),sort("Exp"),lit(")"),sort("Block"),opt(sort("IfElse"))],sort("If"),attrs([term("If")])),prod([lit("else"),sort("Block")],sort("IfElse"),attrs([term("IfElse")]))])))])