Module("trans/check",[Imports([Import("libstratego-lib"),Import("include/Hadooplang"),Import("lib/editor-common.generated"),Import("lib/analysis-auto.generated"),Import("lib/index-library.generated"),Import("lib/analysis-library.generated"),Import("lib/analysis-library-internal.generated"),Import("trans/index"),Import("trans/types/typeof")]),Rules([RDefNoArgs("constraint-error",RuleNoCond(AnnoList(Var("x"),[NoAnnoList(ListTail([NoAnnoList(Op("Unresolved",[Var("t")]))],Wld))]),NoAnnoList(Tuple([Var("x"),NoAnnoList(StringQuotation1("                                    ",[QStr("Unable to resolve: "),StringEscape1("                                                       ",Var("x")),QStr(".")]))]))))]),Rules([SDefNoArgs("is-unique-namespace",Match(NoAnnoList(Op("Import",[])))),SDefNoArgs("is-unique-namespace",Match(NoAnnoList(Op("Rewriter",[])))),SDefNoArgs("is-unique-namespace",Match(NoAnnoList(Op("Mapper",[])))),SDefNoArgs("is-unique-namespace",Match(NoAnnoList(Op("Rewriter",[])))),SDefNoArgs("is-unique-namespace",Match(NoAnnoList(Op("Dataset",[])))),SDefNoArgs("is-unique-namespace",Match(NoAnnoList(Op("Datavar",[])))),RDefNoArgs("constraint-error",RuleNoCond(Var("definition"),App(CallNoArgs(SVar("is-duplicate")),Var("definition")))),RDefNoArgs("is-duplicate",Rule(Var("definition"),NoAnnoList(Tuple([Var("definition"),NoAnnoList(StringQuotation1("                                             ",[QStr("Duplicate definition: "),StringEscape1("                                                                   ",Var("key")),QStr(".")]))])),Seq(Assign(AnnoList(Var("key"),[NoAnnoList(ListTail([Var("ns")],Wld))]),App(CallNoArgs(SVar("nam-get-definition-key")),Var("definition"))),Seq(BA(CallNoArgs(SVar("is-unique-namespace")),Var("ns")),Seq(Assign(Var("definitions"),App(CallNoArgs(SVar("index-lookup-all")),Var("key"))),BA(CallNoArgs(SVar("gt")),NoAnnoList(Tuple([App(CallNoArgs(SVar("length")),Var("definitions")),NoAnnoList(Int("1"))]))))))))]),Rules([SDefNoArgs("is-usable-namespace",Match(NoAnnoList(Op("Dataset",[])))),SDefNoArgs("is-usable-namespace",Match(NoAnnoList(Op("Datavar",[])))),RDefNoArgs("constraint-warning",Rule(Var("def'"),NoAnnoList(Tuple([Var("def'"),NoAnnoList(StringQuotation1("                     ",[QStr("Unused definition")]))])),Seq(Assign(AnnoList(Var("key"),[NoAnnoList(ListTail([Var("ns")],Var("path")))]),App(CallNoArgs(SVar("nam-get-definition-key")),Var("def'"))),Seq(BA(CallNoArgs(SVar("is-usable-namespace")),Var("ns")),Assign(NoAnnoList(List([])),App(CallNoArgs(SVar("index-get-uses-all")),NoAnnoList(Op("Def",[NoAnnoList(ListTail([Var("ns")],Var("path")))]))))))))]),Rules([RDefNoArgs("as_not_defined_error",RuleNoCond(Var("x"),NoAnnoList(Tuple([Var("x"),NoAnnoList(StringQuotation1("                                    ",[QStr("Use, but is not defined (yet).")]))])))),SDefNoArgs("is-ordered-namespace",Match(NoAnnoList(Op("Dataset",[])))),SDefNoArgs("is-ordered-namespace",Match(NoAnnoList(Op("Datavar",[])))),RDefNoArgs("constraint-error",Rule(AnnoList(Var("x"),[Wld]),App(CallNoArgs(SVar("as_not_defined_error")),Var("x")),Seq(Not(BA(CallNoArgs(SVar("index-is-definition")),Var("x"))),Seq(Assign(Var("namespace"),App(CallNoArgs(SVar("index-uri-namespace")),Var("x"))),Seq(BA(CallNoArgs(SVar("is-ordered-namespace")),Var("namespace")),Seq(Assign(Var("def'"),App(CallNoArgs(SVar("index-lookup")),Var("x"))),Seq(Not(BA(CallNoArgs(SVar("is-duplicate")),App(CallNoArgs(SVar("get-node")),Var("x")))),Seq(BA(CallNoArgs(SVar("gt")),NoAnnoList(Tuple([App(CallNoArgs(SVar("Fst")),App(CallNoArgs(SVar("origin-offset")),Var("def'"))),App(CallNoArgs(SVar("Fst")),App(CallNoArgs(SVar("origin-offset")),Var("x")))]))),Seq(Assign(Var("currentFile"),App(CallNoArgs(SVar("origin-file")),Var("x"))),Seq(Assign(NoAnnoList(ListTail([Var("otherFile")],Wld)),App(CallNoArgs(SVar("index-get-files-of")),Var("def'"))),BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("currentFile"),App(CallNoArgs(SVar("Fst")),Var("otherFile"))])))))))))))))]),Rules([RDefT("is-matching-datsetref",[],[DefaultVarDec("x")],Rule(As(Var("d"),NoAnnoList(Op("DatasetRef",[Var("n")]))),Var("d"),BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([Var("x"),Var("n")]))))),RDefNoArgs("constraint-error",Rule(As(Var("d"),NoAnnoList(Op("DatasetDefStatement",[Var("name"),Var("expr")]))),Var("errors"),Seq(Assign(Var("matches"),App(Call(SVar("collect-all"),[CallT(SVar("is-matching-datsetref"),[],[Var("name")]),CallNoArgs(SVar("conc"))]),Var("expr"))),Seq(BA(CallNoArgs(SVar("gt")),NoAnnoList(Tuple([App(CallNoArgs(SVar("length")),Var("matches")),NoAnnoList(Int("0"))]))),Assign(Var("errors"),App(Call(SVar("map"),[CallNoArgs(SVar("as_not_defined_error"))]),Var("matches")))))))])])