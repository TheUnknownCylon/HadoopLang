Module("trans/codegen/compiler",[Imports([Import("libstratego-lib"),Import("libstratego-gpp"),Import("libstratego-aterm"),Import("include/Hadooplang"),Import("lib/editor-common.generated"),Import("lib/compilation-library.generated"),Import("trans/types/typeof"),Import("lib/index-library.generated")]),Signature([Constructors([OpDecl("JavaFile",FunType([ConstType(SortVar("package")),ConstType(SortVar("filename")),ConstType(SortVar("content"))],ConstType(SortNoArgs("JavaFile")))),OpDecl("JavaFile",FunType([ConstType(SortVar("package")),ConstType(SortVar("filename")),ConstType(SortVar("throws")),ConstType(SortVar("content"))],ConstType(SortNoArgs("JavaFile")))),OpDecl("NoFile",FunType([ConstType(SortVar("content"))],ConstType(SortNoArgs("JavaFile"))))])]),Rules([RDefT("compile-log",[],[DefaultVarDec("depth")],Rule(Var("query"),App(Call(SVar("debug"),[Build(Var("indent"))]),Var("query")),LChoice(Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([Var("depth"),NoAnnoList(Int("0"))]))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),LChoice(Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([Var("depth"),NoAnnoList(Int("1"))]))),Assign(Var("indent"),NoAnnoList(Str("\"  \"")))),LChoice(Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([Var("depth"),NoAnnoList(Int("2"))]))),Assign(Var("indent"),NoAnnoList(Str("\"    \"")))),LChoice(Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([Var("depth"),NoAnnoList(Int("3"))]))),Assign(Var("indent"),NoAnnoList(Str("\"      \"")))),Assign(Var("indent"),NoAnnoList(Str("\"        \""))))))))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(List([])),NoAnnoList(List([])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(ListTail([Var("x")],Var("xs"))),App(CallNoArgs(SVar("flatten-list")),NoAnnoList(ListTail([App(CallNoArgs(SVar("to-java")),Var("x"))],App(CallNoArgs(SVar("to-java")),Var("xs")))))))]),Rules([RDefNoArgs("to-java",Rule(Var("x"),NoAnnoList(StringQuotation1("                  ",[QStr("\n      /* TODO */")])),BA(Call(SVar("debug"),[Build(NoAnnoList(Str("\"TODO: \"")))]),Var("x"))))])])