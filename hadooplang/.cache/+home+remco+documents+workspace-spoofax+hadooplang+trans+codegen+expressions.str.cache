Module("trans/codegen/expressions",[Imports([Import("include/Hadooplang"),Import("lib/editor-common.generated"),Import("trans/index"),Import("trans/lib/lists"),Import("trans/types/typeof"),Import("trans/types/operators"),Import("trans/codegen/compiler"),Import("trans/codegen/types"),Import("trans/codegen/vars"),Import("trans/codegen/names")]),Rules([RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("String",[Var("v")])),NoAnnoList(StringQuotation1("                            ",[StringEscape1("                            ",Var("v"))])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("Num",[Var("v")])),NoAnnoList(StringQuotation1("                            ",[StringEscape1("                            ",Var("v")),QStr("d")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("True",[])),NoAnnoList(StringQuotation1("                            ",[QStr("true")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("False",[])),NoAnnoList(StringQuotation1("                            ",[QStr("false")])))),RDefNoArgs("to-java",Rule(NoAnnoList(Op("List",[Var("type"),Var("values")])),Var("javacode"),[WhereClause(Seq(Assign(Var("javatype"),App(CallNoArgs(SVar("type'-to-java")),App(CallNoArgs(SVar("type-of")),Var("type")))),Seq(Assign(Var("valueslist'"),App(Call(SVar("map"),[CallNoArgs(SVar("to-java"))]),Var("values"))),Seq(Assign(Var("valueslist"),App(CallNoArgs(SVar("concat-strings")),App(CallT(SVar("add-in-between"),[],[NoAnnoList(Str("\",\""))]),Var("valueslist'")))),LChoice(Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("length")),Var("valueslist'")),NoAnnoList(Int("0"))]))),Assign(Var("initiallist"),NoAnnoList(StringQuotation1("                                 ",[])))),Assign(Var("initiallist"),NoAnnoList(StringQuotation1("                                 ",[QStr("Arrays.asList("),StringEscape1("                                               ",Var("valueslist")),QStr(")")])))))))),WhereClause(Assign(Var("javacode"),NoAnnoList(StringQuotation1("                          ",[QStr("new ArrayList<"),StringEscape1("                                        ",Var("javatype")),QStr(">("),StringEscape1("                                                    ",Var("initiallist")),QStr(");\n            ")]))))])),RDefNoArgs("add-dictadd",RuleNoCond(NoAnnoList(Op("DictItem",[Var("key"),Var("value")])),NoAnnoList(StringQuotation1("                                           ",[StringEscape1("                                           ",App(CallNoArgs(SVar("to-java")),Var("key"))),QStr(", "),StringEscape1("                                                            ",App(CallNoArgs(SVar("to-java")),Var("value"))),QStr("\n    ")])))),RDefNoArgs("to-java",Rule(NoAnnoList(Op("Dict",[Var("type"),Var("values")])),Var("javacode"),[WhereClause(Seq(Not(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("length")),Var("values")),NoAnnoList(Int("0"))])))),Seq(Assign(Var("javatype"),App(CallNoArgs(SVar("type'-to-java")),App(CallNoArgs(SVar("type-of")),Var("type")))),Seq(Assign(Var("valueslist'"),App(Call(SVar("map"),[CallNoArgs(SVar("add-dictadd"))]),Var("values"))),Assign(Var("immutablevalues"),App(CallNoArgs(SVar("concat-strings")),App(CallT(SVar("add-in-between"),[],[NoAnnoList(Str("\",\""))]),Var("valueslist'")))))))),WhereClause(Assign(Var("javacode"),NoAnnoList(StringQuotation1("                          ",[QStr("\n            /* TODO! Not very efficient, but allows acces to (non) final objects in a one-liner!\n            **May** be fixed by desugaring expressions.*/\n            Maps.newHashMap(ImmutableMap.of("),StringEscape1("                                            ",Var("immutablevalues")),QStr("));\n            ")]))))])),RDefNoArgs("to-java",Rule(NoAnnoList(Op("Dict",[Var("type"),Var("values")])),Var("javacode"),[WhereClause(Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("length")),Var("values")),NoAnnoList(Int("0"))]))),Assign(Var("javatype"),App(CallNoArgs(SVar("type'-to-java")),App(CallNoArgs(SVar("type-of")),Var("type")))))),WhereClause(Assign(Var("javacode"),NoAnnoList(StringQuotation1("                          ",[QStr("new HashMap<String, "),StringEscape1("                                              ",Var("javatype")),QStr(">();\n            ")]))))]))]),Rules([RDefNoArgs("add-pre-comma",RuleNoCond(Var("str"),NoAnnoList(StringQuotation1("                            ",[QStr(", "),StringEscape1("                              ",Var("str"))])))),RDefNoArgs("to-java",Rule(NoAnnoList(Op("Rewrite",[Var("set"),NoAnnoList(Op("RewriteRef",[Var("rewriter'")])),Var("args'")])),Var("javacode"),[WhereClause(Seq(Assign(NoAnnoList(Op("RewriterAlias",[Wld,Wld,Wld,Var("class"),Wld])),App(CallNoArgs(SVar("get-node")),Var("rewriter'"))),Seq(Assign(Var("class'"),App(CallT(SVar("add-in-between"),[],[NoAnnoList(Str("\".\""))]),Var("class"))),Seq(Assign(Var("argset"),App(CallNoArgs(SVar("to-java")),Var("set"))),LChoice(Seq(Assign(NoAnnoList(Op("Params",[Var("args")])),Var("args'")),Assign(Var("otherargs"),App(CallNoArgs(SVar("concat-strings")),App(Call(SVar("map"),[CallNoArgs(SVar("add-pre-comma"))]),App(Call(SVar("map"),[CallNoArgs(SVar("to-java"))]),Var("args")))))),Assign(Var("otherargs"),NoAnnoList(StringQuotation1("                               ",[])))))))),WhereClause(Assign(Var("javacode"),NoAnnoList(StringQuotation1("                          ",[StringEscape1("                          ",Var("class'")),QStr("("),StringEscape1("                                   ",Var("argset")),QStr(" "),StringEscape1("                                            ",Var("otherargs")),QStr(")")]))))])),RDefNoArgs("to-java",Rule(NoAnnoList(Op("Rewrite",[Var("set"),NoAnnoList(Op("RewriteRef",[Var("rewriter")])),Var("args'")])),NoAnnoList(StringQuotation1("                                                            ",[StringEscape1("                                                            ",Var("rewriterclass")),QStr("."),StringEscape1("                                                                            ",Var("rewritermethod")),QStr("("),StringEscape1("                                                                                             ",Var("argset")),QStr(" "),StringEscape1("                                                                                                      ",Var("otherargs")),QStr(")")])),Seq(Assign(Var("rewriterclass"),App(CallNoArgs(SVar("name-of")),App(CallNoArgs(SVar("get-node")),Var("rewriter")))),Seq(LChoice(Seq(BA(CallNoArgs(SVar("is-dataset")),App(CallNoArgs(SVar("type-of")),Var("set"))),Assign(Var("rewritermethod"),NoAnnoList(StringQuotation1("                                    ",[QStr("withHadoop")])))),Assign(Var("rewritermethod"),NoAnnoList(StringQuotation1("                                    ",[QStr("withJava")])))),Seq(Assign(Var("argset"),App(CallNoArgs(SVar("to-java")),Var("set"))),LChoice(Seq(Assign(NoAnnoList(Op("Params",[Var("args")])),Var("args'")),Assign(Var("otherargs"),App(CallNoArgs(SVar("concat-strings")),App(Call(SVar("map"),[CallNoArgs(SVar("add-pre-comma"))]),App(Call(SVar("map"),[CallNoArgs(SVar("to-java"))]),Var("args")))))),Assign(Var("otherargs"),NoAnnoList(StringQuotation1("                               ",[])))))))))]),Rules([RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("DictAccess",[Var("ref"),Var("index")])),NoAnnoList(StringQuotation1("                                         ",[StringEscape1("                                         ",App(CallNoArgs(SVar("to-java")),Var("ref"))),QStr(".get("),StringEscape1("                                                             ",App(CallNoArgs(SVar("to-java")),Var("index"))),QStr(")")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("Brackets",[Var("t")])),NoAnnoList(StringQuotation1("                                 ",[QStr("("),StringEscape1("                                  ",App(CallNoArgs(SVar("to-java")),Var("t"))),QStr(")")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("OpExp",[NoAnnoList(Op("OpPlus",[])),Var("t1"),Var("t2")])),NoAnnoList(StringQuotation1("                                                   ",[QStr("("),StringEscape1("                                                    ",App(CallNoArgs(SVar("to-java")),Var("t1"))),QStr(" + "),StringEscape1("                                                                     ",App(CallNoArgs(SVar("to-java")),Var("t2"))),QStr(")")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("OpExp",[NoAnnoList(Op("OpTimes",[])),Var("t1"),Var("t2")])),NoAnnoList(StringQuotation1("                                                   ",[QStr("("),StringEscape1("                                                    ",App(CallNoArgs(SVar("to-java")),Var("t1"))),QStr(" * "),StringEscape1("                                                                     ",App(CallNoArgs(SVar("to-java")),Var("t2"))),QStr(")")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("OpExp",[NoAnnoList(Op("OpMin",[])),Var("t1"),Var("t2")])),NoAnnoList(StringQuotation1("                                                   ",[QStr("("),StringEscape1("                                                    ",App(CallNoArgs(SVar("to-java")),Var("t1"))),QStr(" - "),StringEscape1("                                                                     ",App(CallNoArgs(SVar("to-java")),Var("t2"))),QStr(")")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("OpExp",[NoAnnoList(Op("OpDivide",[])),Var("t1"),Var("t2")])),NoAnnoList(StringQuotation1("                                                   ",[QStr("("),StringEscape1("                                                    ",App(CallNoArgs(SVar("to-java")),Var("t1"))),QStr(" / "),StringEscape1("                                                                     ",App(CallNoArgs(SVar("to-java")),Var("t2"))),QStr(")")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("OpExp",[NoAnnoList(Op("OpModulo",[])),Var("t1"),Var("t2")])),NoAnnoList(StringQuotation1("                                                   ",[QStr("("),StringEscape1("                                                    ",App(CallNoArgs(SVar("to-java")),Var("t1"))),QStr(" % "),StringEscape1("                                                                     ",App(CallNoArgs(SVar("to-java")),Var("t2"))),QStr(")")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("OpExp",[NoAnnoList(Op("OpAnd",[])),Var("t1"),Var("t2")])),NoAnnoList(StringQuotation1("                                                   ",[QStr("("),StringEscape1("                                                    ",App(CallNoArgs(SVar("to-java")),Var("t1"))),QStr(" && "),StringEscape1("                                                                      ",App(CallNoArgs(SVar("to-java")),Var("t2"))),QStr(")")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("OpExp",[NoAnnoList(Op("OpOr",[])),Var("t1"),Var("t2")])),NoAnnoList(StringQuotation1("                                                   ",[QStr("("),StringEscape1("                                                    ",App(CallNoArgs(SVar("to-java")),Var("t1"))),QStr(" || "),StringEscape1("                                                                      ",App(CallNoArgs(SVar("to-java")),Var("t2"))),QStr(")")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("OpExp",[NoAnnoList(Op("OpGreaterThan",[])),Var("t1"),Var("t2")])),NoAnnoList(StringQuotation1("                                                   ",[QStr("("),StringEscape1("                                                    ",App(CallNoArgs(SVar("to-java")),Var("t1"))),QStr(") > ("),StringEscape1("                                                                       ",App(CallNoArgs(SVar("to-java")),Var("t2"))),QStr(")")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("OpExp",[NoAnnoList(Op("OpSmallerThan",[])),Var("t1"),Var("t2")])),NoAnnoList(StringQuotation1("                                                   ",[QStr("("),StringEscape1("                                                    ",App(CallNoArgs(SVar("to-java")),Var("t1"))),QStr(") < ("),StringEscape1("                                                                       ",App(CallNoArgs(SVar("to-java")),Var("t2"))),QStr(")")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("OpExp",[NoAnnoList(Op("OpEqSmallerThan",[])),Var("t1"),Var("t2")])),NoAnnoList(StringQuotation1("                                                   ",[QStr("("),StringEscape1("                                                    ",App(CallNoArgs(SVar("to-java")),Var("t1"))),QStr(") >= ("),StringEscape1("                                                                        ",App(CallNoArgs(SVar("to-java")),Var("t2"))),QStr(")")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("OpExp",[NoAnnoList(Op("OpEqGreaterThan",[])),Var("t1"),Var("t2")])),NoAnnoList(StringQuotation1("                                                   ",[QStr("("),StringEscape1("                                                    ",App(CallNoArgs(SVar("to-java")),Var("t1"))),QStr(") <= ("),StringEscape1("                                                                        ",App(CallNoArgs(SVar("to-java")),Var("t2"))),QStr(")")])))),RDefNoArgs("to-java",Rule(NoAnnoList(Op("OpExp",[NoAnnoList(Op("OpEquals",[])),Var("t1"),Var("t2")])),NoAnnoList(StringQuotation1("                                                   ",[QStr("("),StringEscape1("                                                    ",App(CallNoArgs(SVar("to-java")),Var("t1"))),QStr(") == ("),StringEscape1("                                                                        ",App(CallNoArgs(SVar("to-java")),Var("t2"))),QStr(")")])),LChoice(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("type-type-of")),Var("t1")),NoAnnoList(Op("Num",[]))]))),BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("type-type-of")),Var("t1")),NoAnnoList(Op("Bool",[]))])))))),RDefNoArgs("to-java",Rule(NoAnnoList(Op("OpExp",[NoAnnoList(Op("OpEquals",[])),Var("t1"),Var("t2")])),NoAnnoList(StringQuotation1("                                                   ",[QStr("("),StringEscape1("                                                    ",App(CallNoArgs(SVar("to-java")),Var("t1"))),QStr(").equals(("),StringEscape1("                                                                            ",App(CallNoArgs(SVar("to-java")),Var("t2"))),QStr("))")])),BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("type-type-of")),Var("t1")),NoAnnoList(Op("String",[]))])))))])])