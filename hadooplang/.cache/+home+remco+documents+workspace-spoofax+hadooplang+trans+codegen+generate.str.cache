Module("trans/codegen/generate",[Imports([Import("libstratego-lib"),Import("libstratego-gpp"),Import("libstratego-aterm"),Import("include/Hadooplang"),Import("lib/editor-common.generated"),Import("lib/compilation-library.generated"),Import("trans/lib/string"),Import("trans/types/typeof"),Import("trans/codegen/compiler"),Import("trans/codegen/output"),Import("trans/codegen/desugar"),Import("trans/codegen/modules/module"),Import("trans/check"),Import("trans/types/checks"),Import("lib/index-library.generated")]),Rules([RDefNoArgs("is-not-empty",Rule(Var("x"),Var("x"),Not(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([NoAnnoList(List([])),Var("x")])))))),RDefNoArgs("generate-java",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Op("None",[])),Seq(CallNoArgs(SVar("editor-init")),Seq(CallT(SVar("index-setup"),[],[RootApp(CallNoArgs(SVar("language"))),NoAnnoList(List([RootApp(CallNoArgs(SVar("project-path")))])),NoAnnoList(Str("\".\""))]),Seq(BA(CallT(SVar("compile-log"),[],[NoAnnoList(Int("0"))]),NoAnnoList(StringQuotation1("                            ",[QStr("=====================")]))),Seq(BA(CallT(SVar("compile-log"),[],[NoAnnoList(Int("0"))]),NoAnnoList(StringQuotation1("                            ",[QStr("Begin compiling")]))),Seq(Assign(Var("errors"),App(Call(SVar("filter"),[CallNoArgs(SVar("is-not-empty"))]),App(Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-error")),CallNoArgs(SVar("conc"))]),Var("ast")))),Seq(LChoice(Seq(Not(Call(SVar("equal"),[BA(CallNoArgs(SVar("length")),Var("errors")),IntCong("0")])),Seq(BA(CallT(SVar("compile-log"),[],[NoAnnoList(Int("0"))]),NoAnnoList(StringQuotation1("                                  ",[QStr("There are errors! Trying to compile, but no guarantees.")]))),BA(Call(SVar("debug"),[Build(NoAnnoList(Str("\" Errors: \"")))]),Var("errors")))),BA(CallT(SVar("compile-log"),[],[NoAnnoList(Int("0"))]),NoAnnoList(StringQuotation1("                                  ",[QStr("No errors found.")])))),Seq(Assign(Var("ast'"),App(CallNoArgs(SVar("desugar-compiler")),Var("ast"))),Seq(Assign(Var("java"),App(CallNoArgs(SVar("to-java")),Var("ast'"))),Seq(BA(Call(SVar("debug"),[Build(NoAnnoList(Str("\"Done \"")))]),NoAnnoList(StringQuotation1("                            ",[]))),Seq(BA(Call(SVar("map"),[CallT(SVar("to-file"),[],[NoAnnoList(Str("\"output\"")),Var("java")])]),Var("java")),BA(CallT(SVar("compile-log"),[],[NoAnnoList(Int("0"))]),NoAnnoList(StringQuotation1("                            ",[QStr("Compiling finished")]))))))))))))))),RDefNoArgs("isnone",RuleNoCond(NoAnnoList(Op("None",[])),NoAnnoList(Op("None",[])))),RDefNoArgs("compile-java",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Op("None",[])),Seq(CallNoArgs(SVar("editor-init")),Seq(CallT(SVar("index-setup"),[],[RootApp(CallNoArgs(SVar("language"))),NoAnnoList(List([RootApp(CallNoArgs(SVar("project-path")))])),NoAnnoList(Str("\".\""))]),Seq(BA(CallT(SVar("compile-log"),[],[NoAnnoList(Int("0"))]),NoAnnoList(StringQuotation1("                            ",[QStr("=====================")]))),Seq(BA(CallT(SVar("compile-log"),[],[NoAnnoList(Int("0"))]),NoAnnoList(StringQuotation1("                            ",[QStr("Begin compiling")]))),Seq(Assign(Var("errors"),App(Call(SVar("filter"),[CallNoArgs(SVar("is-not-empty"))]),App(Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-error")),CallNoArgs(SVar("conc"))]),Var("ast")))),LChoice(Seq(Not(Call(SVar("equal"),[BA(CallNoArgs(SVar("length")),Var("errors")),IntCong("0")])),Seq(BA(CallT(SVar("compile-log"),[],[NoAnnoList(Int("0"))]),NoAnnoList(StringQuotation1("                                ",[QStr("There are errors! Aborting compilation to runnable JAR.")]))),BA(Call(SVar("debug"),[Build(NoAnnoList(Str("\" Errors: \"")))]),Var("errors")))),Seq(BA(CallT(SVar("compile-log"),[],[NoAnnoList(Int("0"))]),NoAnnoList(StringQuotation1("	                            ",[QStr("No errors found.")]))),Seq(Assign(Var("ast'"),App(CallNoArgs(SVar("desugar-compiler")),Var("ast"))),Seq(Assign(Var("java"),App(CallNoArgs(SVar("to-java")),Var("ast'"))),Seq(BA(Call(SVar("debug"),[Build(NoAnnoList(Str("\"Done\"")))]),NoAnnoList(StringQuotation1("	                           ",[]))),Seq(Assign(Var("builddir"),App(CallNoArgs(SVar("new-temp-dir")),NoAnnoList(Str("\"output\"")))),Seq(BA(CallT(SVar("compile-log"),[],[NoAnnoList(Int("1"))]),NoAnnoList(StringQuotation1("	                            ",[QStr("output dir: "),StringEscape1("	                                        ",Var("builddir"))]))),Seq(Assign(Var("libdir"),NoAnnoList(Str("\"./lib_java\""))),Seq(Assign(Var("libfiles"),App(Call(SVar("map"),[CallT(SVar("append-libdir"),[],[Var("libdir")])]),App(CallNoArgs(SVar("readdir")),Var("libdir")))),Seq(Assign(Var("javaclibs"),NoAnnoList(StringQuotation1("	                       ",[StringEscape1("	                       ",App(CallNoArgs(SVar("concat-strings")),App(Call(SVar("map"),[CallNoArgs(SVar("add-colon"))]),Var("libfiles")))),QStr(".")]))),Seq(Assign(Var("outputfiles"),App(Call(SVar("filter"),[Not(CallNoArgs(SVar("isnone")))]),App(Call(SVar("map"),[CallT(SVar("to-file"),[],[Var("builddir"),Var("java")])]),Var("java")))),Seq(Assign(Var("outputfilesstr"),App(CallNoArgs(SVar("concat-strings")),App(Call(SVar("map"),[CallNoArgs(SVar("add-space"))]),Var("outputfiles")))),Seq(BA(CallNoArgs(SVar("mkdir")),NoAnnoList(StringQuotation1("	                  ",[StringEscape1("	                  ",Var("builddir")),QStr("/compiled")]))),Seq(Assign(Var("javac"),NoAnnoList(Tuple([NoAnnoList(StringQuotation1("	              ",[QStr("javac")])),App(CallT(SVar("string-tokenize"),[],[NoAnnoList(List([NoAnnoList(Char("' '"))]))]),NoAnnoList(StringQuotation1("	                                        ",[QStr("-d "),StringEscape1("	                                           ",Var("builddir")),QStr("/compiled -cp "),StringEscape1("	                                                                   ",Var("javaclibs")),QStr(" "),StringEscape1("	                                                                               ",Var("outputfilesstr"))])))]))),Seq(BA(CallT(SVar("compile-log"),[],[NoAnnoList(Int("1"))]),NoAnnoList(StringQuotation1("	                            ",[QStr("Compiling generated Java files to Java bytecode.")]))),Seq(BA(CallNoArgs(SVar("call")),Var("javac")),Seq(BA(CallT(SVar("compile-log"),[],[NoAnnoList(Int("1"))]),NoAnnoList(StringQuotation1("	                            ",[QStr("Preparing all external libraries.")]))),Seq(BA(Call(SVar("map"),[CallT(SVar("extract-jar"),[],[NoAnnoList(StringQuotation1("	                            ",[StringEscape1("	                            ",Var("builddir")),QStr("/compiled")]))])]),Var("libfiles")),Seq(BA(CallNoArgs(SVar("call")),NoAnnoList(Tuple([NoAnnoList(StringQuotation1("	                  ",[QStr("rm")])),NoAnnoList(List([NoAnnoList(StringQuotation1("	                          ",[QStr("-R")])),NoAnnoList(StringQuotation1("	                                 ",[QStr("-f")])),NoAnnoList(StringQuotation1("	                                        ",[StringEscape1("	                                        ",Var("builddir")),QStr("/compiled/META-INF")]))]))]))),Seq(BA(CallT(SVar("compile-log"),[],[NoAnnoList(Int("1"))]),NoAnnoList(StringQuotation1("	                            ",[QStr("Building .jar file")]))),Seq(Assign(Var("f"),App(CallNoArgs(SVar("fopen")),NoAnnoList(Tuple([NoAnnoList(StringQuotation1("	                       ",[StringEscape1("	                       ",Var("builddir")),QStr("/manifest")])),NoAnnoList(Str("\"w\""))])))),Seq(BA(CallNoArgs(SVar("fputs")),NoAnnoList(Tuple([NoAnnoList(StringQuotation1("	                   ",[QStr("Main-Class: hdp.jobs\n	        ")])),Var("f")]))),Seq(BA(CallNoArgs(SVar("fclose")),Var("f")),Seq(BA(CallNoArgs(SVar("call")),NoAnnoList(Tuple([NoAnnoList(StringQuotation1("	                  ",[QStr("jar")])),NoAnnoList(List([NoAnnoList(StringQuotation1("	                           ",[QStr("cfm")])),NoAnnoList(StringQuotation1("	                                   ",[QStr("output.jar")])),NoAnnoList(StringQuotation1("	                                                  ",[StringEscape1("	                                                  ",Var("builddir")),QStr("/manifest")])),NoAnnoList(StringQuotation1("	                                                                          ",[QStr("-C")])),NoAnnoList(StringQuotation1("	                                                                                 ",[StringEscape1("	                                                                                 ",Var("builddir")),QStr("/compiled")])),NoAnnoList(StringQuotation1("	                                                                                                         ",[QStr(".")]))]))]))),BA(CallT(SVar("compile-log"),[],[NoAnnoList(Int("0"))]),NoAnnoList(StringQuotation1("	                            ",[QStr("Compiling finished")])))))))))))))))))))))))))))))))))),RDefT("append-libdir",[],[DefaultVarDec("d")],RuleNoCond(Var("str"),NoAnnoList(StringQuotation1("                              ",[StringEscape1("                              ",Var("d")),QStr("/"),StringEscape1("                                  ",Var("str"))])))),RDefT("extract-jar",[],[DefaultVarDec("destination")],Rule(Var("file"),NoAnnoList(Op("None",[])),Call(SVar("try"),[BA(CallNoArgs(SVar("call")),NoAnnoList(Tuple([NoAnnoList(StringQuotation1("                        ",[QStr("unzip")])),NoAnnoList(List([NoAnnoList(Str("\"-o\"")),NoAnnoList(Str("\"-d\"")),Var("destination"),Var("file"),NoAnnoList(Str("\"*\""))]))])))])))])])