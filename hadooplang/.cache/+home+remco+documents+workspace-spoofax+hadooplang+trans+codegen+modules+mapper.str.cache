Module("trans/codegen/modules/mapper",[Imports([Import("include/Hadooplang"),Import("trans/codegen/compiler"),Import("trans/types/typeof"),Import("trans/codegen/types"),Import("trans/codegen/statements"),Import("trans/codegen/expressions"),Import("trans/codegen/names"),Import("trans/index")]),Rules([RDefNoArgs("to-java",Rule(As(Var("m"),NoAnnoList(Op("Mapper",[Var("name'"),Var("keydef"),Var("valuedef"),Var("blockmr")]))),NoAnnoList(Tuple([NoAnnoList(Op("JavaFile",[NoAnnoList(Str("\"hdp.mappers\"")),NoAnnoList(StringQuotation1("                               ",[StringEscape1("                               ",Var("name"))])),Var("content")])),Var("rewriters")])),[WhereClause(Seq(Assign(Var("name"),App(CallNoArgs(SVar("name-of")),Var("m"))),Seq(Assign(NoAnnoList(Op("MapReduceKey",[Wld,Var("keyname")])),Var("keydef")),Seq(Assign(NoAnnoList(Op("Parameter",[Wld,Var("valuename")])),Var("valuedef")),Seq(Assign(Var("keyname'"),NoAnnoList(StringQuotation1("                       ",[StringEscape1("                       ",Var("keyname")),QStr("_")]))),Seq(Assign(Var("valuename'"),NoAnnoList(StringQuotation1("                       ",[StringEscape1("                       ",Var("valuename")),QStr("_")]))),Seq(Assign(Var("keytype"),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("keydef")))),Seq(Assign(Var("valuetype"),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("valuedef")))),Seq(Assign(Var("keytypehadoop"),App(CallNoArgs(SVar("type'-to-hadoop-input")),Var("keytype"))),Seq(Assign(Var("valuetypehadoop"),App(CallNoArgs(SVar("type'-to-hadoop-input")),Var("valuetype"))),Seq(Assign(NoAnnoList(Op("TwoType",[Var("writetypekey"),Var("writetypevalue")])),App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("m"))))),Seq(Assign(Var("writetypekeyhadoop"),App(CallNoArgs(SVar("type'-to-hadoop")),Var("writetypekey"))),Seq(Assign(Var("writetypevaluehadoop"),App(CallNoArgs(SVar("type'-to-hadoop")),Var("writetypevalue"))),Seq(Assign(Var("mapperbody"),App(CallNoArgs(SVar("to-java")),Var("blockmr"))),Seq(LChoice(Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([NoAnnoList(Int("0")),App(CallNoArgs(SVar("length")),App(CallNoArgs(SVar("get-uses")),Var("keyname")))]))),Assign(Var("convertkeytojava"),NoAnnoList(List([])))),Assign(Var("convertkeytojava"),App(CallNoArgs(SVar("type-hadoop-to-java")),NoAnnoList(Tuple([NoAnnoList(Op("TEMPVAR",[Var("keytype"),Var("keyname'")])),Var("keyname")]))))),Seq(LChoice(Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([NoAnnoList(Int("0")),App(CallNoArgs(SVar("length")),App(CallNoArgs(SVar("get-uses")),Var("valuename")))]))),Assign(Var("convertvaluetojava"),NoAnnoList(List([])))),Assign(Var("convertvaluetojava"),App(CallNoArgs(SVar("type-hadoop-to-java")),NoAnnoList(Tuple([NoAnnoList(Op("TEMPVAR",[Var("valuetype"),Var("valuename'")])),Var("valuename")]))))),Assign(Var("rewriters"),App(CallNoArgs(SVar("nub")),App(Call(SVar("collect-all"),[CallNoArgs(SVar("is-rewrite")),CallNoArgs(SVar("conc"))]),Var("m")))))))))))))))))))),WithClause(Assign(Var("content"),NoAnnoList(StringQuotation1("                      ",[QStr("\n      public class "),StringEscape1("                   ",Var("name")),QStr(" extends Mapper<"),StringEscape1("                                         ",Var("keytypehadoop")),QStr(", "),StringEscape1("                                                          ",Var("valuetypehadoop")),QStr(", "),StringEscape1("                                                                             ",Var("writetypekeyhadoop")),QStr(", "),StringEscape1("                                                                                                   ",Var("writetypevaluehadoop")),QStr("> {\n          public void map("),StringEscape1("                          ",Var("keytypehadoop")),QStr(" "),StringEscape1("                                          ",Var("keyname'")),QStr(", "),StringEscape1("                                                      ",Var("valuetypehadoop")),QStr(" "),StringEscape1("                                                                        ",Var("valuename'")),QStr(", Context context) {\n              /* Convert input types */\n              "),StringEscape1("              ",Var("convertkeytojava")),QStr("\n              "),StringEscape1("              ",Var("convertvaluetojava")),QStr("\n              \n              /* Execute main body */\n              "),StringEscape1("              ",Var("mapperbody")),QStr("\n          }\n      }\n    ")]))))]))])])