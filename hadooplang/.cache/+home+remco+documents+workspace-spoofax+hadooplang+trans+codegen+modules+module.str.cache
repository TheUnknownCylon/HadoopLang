Module("trans/codegen/modules/module",[Imports([Import("include/Hadooplang"),Import("lib/analysis-library.generated"),Import("trans/index"),Import("trans/types/typeof"),Import("trans/inputs/inputs"),Import("trans/codegen/compiler"),Import("trans/codegen/types"),Import("trans/codegen/modules/rewriter"),Import("trans/codegen/modules/mapper"),Import("trans/codegen/modules/reducer"),Import("trans/codegen/statements"),Import("trans/codegen/expressions"),Import("trans/codegen/inputs"),Import("trans/codegen/names")]),Rules([RDefNoArgs("to-java",Rule(As(Var("m"),NoAnnoList(Op("Module",[Var("filename"),Var("imports"),Var(ListVar("rules*"))]))),App(CallNoArgs(SVar("concat")),NoAnnoList(List([Var("mapperfiles"),Var("reducerfiles"),Var("rewriterfiles"),NoAnnoList(List([Var("javafile")]))]))),[WithClause(Assign(NoAnnoList(Tuple([Var("chaincode"),Var("mappers"),Var("reducers")])),App(CallNoArgs(SVar("get-chain")),Var("m")))),WhereClause(Assign(Var("jobjava"),NoAnnoList(StringQuotation1("                       ",[QStr("\n        public class jobs {\n            public static void main(String"),StringEscape1("                                          ",NoAnnoList(Str("\"[]\""))),QStr(" args) throws IOException, InterruptedException, ClassNotFoundException {\n                "),StringEscape1("                ",Var("chaincode")),QStr("\n            }\n        }\n    ")])))),WhereClause(Seq(Assign(Var("javafile"),NoAnnoList(Op("JavaFile",[NoAnnoList(Str("\"hdp\"")),NoAnnoList(StringQuotation1("                                      ",[QStr("jobs")])),Var("jobjava")]))),Seq(Assign(NoAnnoList(Tuple([Var("mapperfiles"),Var("rewritersm")])),App(CallNoArgs(SVar("mappers-to-java")),Var("mappers"))),Seq(Assign(NoAnnoList(Tuple([Var("reducerfiles"),Var("rewritersr")])),App(CallNoArgs(SVar("reducers-to-java")),Var("reducers"))),Seq(Assign(Var("rootrewriters"),App(CallNoArgs(SVar("nub")),App(CallNoArgs(SVar("concat")),NoAnnoList(List([Var("rewritersm"),Var("rewritersr")]))))),Assign(Var("rewriterfiles"),App(CallNoArgs(SVar("rewriters-to-java")),NoAnnoList(Tuple([NoAnnoList(List([])),Var("rootrewriters")])))))))))]))]),Rules([RDefNoArgs("mappers-to-java",RuleNoCond(NoAnnoList(List([])),NoAnnoList(Tuple([NoAnnoList(List([])),NoAnnoList(List([]))])))),RDefNoArgs("mappers-to-java",Rule(NoAnnoList(ListTail([Var("map'")],Var("rest"))),NoAnnoList(Tuple([Var("javafiles'"),Var("rewriterslist'")])),Seq(Assign(Var("mapper"),App(CallNoArgs(SVar("get-node")),Var("map'"))),Seq(Assign(NoAnnoList(Tuple([Var("javafile"),Var("rewriterlist")])),App(CallNoArgs(SVar("to-java")),Var("mapper"))),Seq(Assign(NoAnnoList(Tuple([Var("javafiles"),Var("rewriters")])),App(CallNoArgs(SVar("mappers-to-java")),Var("rest"))),Seq(Assign(Var("javafiles'"),App(CallNoArgs(SVar("concat")),NoAnnoList(List([NoAnnoList(List([Var("javafile")])),Var("javafiles")])))),Assign(Var("rewriterslist'"),App(CallNoArgs(SVar("nub")),App(CallNoArgs(SVar("concat")),NoAnnoList(List([Var("rewriterlist"),Var("rewriters")]))))))))))),RDefNoArgs("reducers-to-java",RuleNoCond(NoAnnoList(List([])),NoAnnoList(Tuple([NoAnnoList(List([])),NoAnnoList(List([]))])))),RDefNoArgs("reducers-to-java",Rule(NoAnnoList(ListTail([Var("red'")],Var("rest"))),NoAnnoList(Tuple([Var("javafiles'"),Var("rewriterslist'")])),Seq(Assign(Var("reducer"),App(CallNoArgs(SVar("get-node")),Var("red'"))),Seq(Assign(NoAnnoList(Tuple([Var("javafile"),Var("rewriterlist")])),App(CallNoArgs(SVar("to-java")),Var("reducer"))),Seq(Assign(NoAnnoList(Tuple([Var("javafiles"),Var("rewriters")])),App(CallNoArgs(SVar("reducers-to-java")),Var("rest"))),Seq(Assign(Var("javafiles'"),App(CallNoArgs(SVar("concat")),NoAnnoList(List([NoAnnoList(List([Var("javafile")])),Var("javafiles")])))),Assign(Var("rewriterslist'"),App(CallNoArgs(SVar("nub")),App(CallNoArgs(SVar("concat")),NoAnnoList(List([Var("rewriterlist"),Var("rewriters")]))))))))))),RDefNoArgs("rewriters-to-java",RuleNoCond(NoAnnoList(Tuple([Var("parsedlist"),NoAnnoList(List([]))])),NoAnnoList(List([])))),RDefNoArgs("rewriters-to-java",Rule(NoAnnoList(Tuple([Var("parsedlist"),NoAnnoList(ListTail([NoAnnoList(Op("RewriteRef",[Var("rew")]))],Var("rest")))])),Var("javafiles'"),Seq(Assign(Var("rewriter"),App(CallNoArgs(SVar("get-node")),Var("rew"))),Seq(Assign(Var("parsedlist'"),App(CallNoArgs(SVar("concat")),NoAnnoList(List([NoAnnoList(List([Var("rew")])),Var("parsedlist")])))),Seq(LChoice(Seq(Assign(NoAnnoList(Op("Rewriter",[Wld,Wld,Wld,Wld])),Var("rewriter")),Assign(NoAnnoList(Tuple([Var("javafile"),Var("rewriterslist")])),App(CallNoArgs(SVar("to-java")),Var("rewriter")))),Seq(Assign(Var("javafile"),NoAnnoList(List([]))),Assign(Var("rewriterslist"),NoAnnoList(List([]))))),Seq(Assign(Var("rest'"),App(CallNoArgs(SVar("nub")),App(CallNoArgs(SVar("concat")),NoAnnoList(List([App(CallNoArgs(SVar("find-unparsed")),NoAnnoList(Tuple([Var("rewriterslist"),Var("parsedlist'")]))),Var("rest")]))))),Seq(Assign(Var("javafiles"),App(CallNoArgs(SVar("rewriters-to-java")),NoAnnoList(Tuple([Var("parsedlist'"),Var("rest'")])))),Assign(Var("javafiles'"),App(CallNoArgs(SVar("concat")),NoAnnoList(List([NoAnnoList(List([Var("javafile")])),Var("javafiles")]))))))))))),RDefNoArgs("find-unparsed",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(List([])),Var("parsedlist")])),NoAnnoList(List([])))),RDefNoArgs("find-unparsed",Rule(NoAnnoList(Tuple([NoAnnoList(ListTail([Var("rw")],Var("morerw"))),Var("parsedlist")])),App(CallNoArgs(SVar("nub")),Var("parsedlist'")),LChoice(Seq(Not(BA(Call(SVar("fetch"),[Match(Var("rw"))]),Var("parsedlist"))),Assign(Var("parsedlist'"),App(CallNoArgs(SVar("concat")),NoAnnoList(List([NoAnnoList(List([Var("rw")])),App(CallNoArgs(SVar("find-unparsed")),NoAnnoList(Tuple([Var("morerw"),Var("parsedlist")])))]))))),Assign(Var("parsedlist'"),App(CallNoArgs(SVar("find-unparsed")),NoAnnoList(Tuple([Var("morerw"),Var("parsedlist")])))))))]),Rules([RDefNoArgs("get-chain",Rule(As(Var("m"),NoAnnoList(Op("Module",[Var("filename"),Var("imports"),Var(ListVar("rules*"))]))),NoAnnoList(Tuple([Var("javacode"),Var("mappers"),Var("reducers")])),Seq(Assign(Var("mrjobs"),App(Call(SVar("collect-all"),[CallNoArgs(SVar("is-mapreduce")),CallNoArgs(SVar("conc"))]),Var("m"))),Seq(Assign(Var("stores"),App(Call(SVar("collect-all"),[CallNoArgs(SVar("is-store")),CallNoArgs(SVar("conc"))]),Var("m"))),Assign(NoAnnoList(Tuple([Var("javacode"),Var("mappers"),Var("reducers")])),App(CallT(SVar("chain-to-java"),[],[Var("stores")]),Var("mrjobs"))))))),RDefNoArgs("is-store",RuleNoCond(As(Var("s"),NoAnnoList(Op("Store",[Wld]))),Var("s"))),RDefNoArgs("is-mapreduce",RuleNoCond(As(Var("m"),NoAnnoList(Op("DatasetDef",[Wld,NoAnnoList(Op("MapReduceChain",[Wld,Wld,Wld]))]))),Var("m"))),RDefT("chain-to-java",[],[DefaultVarDec("stores")],RuleNoCond(NoAnnoList(List([])),NoAnnoList(Tuple([NoAnnoList(StringQuotation1("                                     ",[])),NoAnnoList(List([])),NoAnnoList(List([]))])))),RDefT("chain-to-java",[],[DefaultVarDec("stores")],Rule(NoAnnoList(ListTail([Var("job")],Var("jobrest"))),NoAnnoList(Tuple([Var("javacode''"),Var("mappers''"),Var("reducers''")])),Seq(Assign(NoAnnoList(Tuple([Var("javacode"),Var("mapper"),Var("reducer")])),App(CallT(SVar("chain-to-java'"),[],[Var("stores")]),Var("job"))),Seq(Assign(NoAnnoList(Tuple([Var("javacode'"),Var("mappers'"),Var("reducers'")])),App(CallT(SVar("chain-to-java"),[],[Var("stores")]),Var("jobrest"))),Seq(Assign(Var("javacode''"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([Var("javacode"),Var("javacode'")])))),Seq(Assign(Var("mappers''"),App(CallNoArgs(SVar("nub")),App(CallNoArgs(SVar("concat")),NoAnnoList(List([NoAnnoList(List([Var("mapper")])),Var("mappers'")]))))),Assign(Var("reducers''"),App(CallNoArgs(SVar("nub")),App(CallNoArgs(SVar("concat")),NoAnnoList(List([NoAnnoList(List([Var("reducer")])),Var("reducers'")]))))))))))),RDefT("chain-to-java'",[],[DefaultVarDec("stores")],Rule(NoAnnoList(Op("DatasetDef",[Var("varname"),NoAnnoList(Op("MapReduceChain",[Var("input"),NoAnnoList(Op("MRMapper",[NoAnnoList(Op("MapperRef",[Var("map'")]))])),NoAnnoList(Op("MRReducer",[NoAnnoList(Op("ReducerRef",[Var("reduce'")]))]))]))])),NoAnnoList(Tuple([Var("javacode"),Var("map'"),Var("reduce'")])),[WhereClause(Seq(Assign(Var("jobname"),RootApp(CallT(SVar("gen-new-name"),[],[NoAnnoList(Str("\"job\""))]))),Seq(Assign(Var("outputname"),NoAnnoList(StringQuotation1("                            ",[QStr("job_"),StringEscape1("                                ",Var("varname"))]))),Seq(Assign(Var("mapper"),App(CallNoArgs(SVar("get-node")),Var("map'"))),Seq(Assign(Var("reducer"),App(CallNoArgs(SVar("get-node")),Var("reduce'"))),Seq(Assign(As(Var("m"),NoAnnoList(Op("Mapper",[Var("mapperclass'"),Wld,Wld,Wld]))),Var("mapper")),Seq(Assign(As(Var("r"),NoAnnoList(Op("Reducer",[Var("reducerclass'"),Wld,Wld,Wld]))),Var("reducer")),Seq(Assign(Var("mapperclass"),App(CallNoArgs(SVar("name-of")),Var("m"))),Seq(Assign(Var("reducerclass"),App(CallNoArgs(SVar("name-of")),Var("r"))),Seq(Assign(Var("jobinput"),App(CallT(SVar("to-java-job-input"),[],[Var("jobname")]),Var("input"))),Seq(Assign(Var("joboutput"),App(CallT(SVar("to-java-job-output"),[],[Var("jobname")]),NoAnnoList(Tuple([Var("varname"),Var("outputname")])))),Seq(Assign(NoAnnoList(Op("TwoType",[Var("mapoutputkeyclass'"),Var("mapoutputvalueclass'")])),App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("mapper"))))),Seq(Assign(NoAnnoList(Op("TwoType",[Var("outputkeyclass'"),Var("outputvalueclass'")])),App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("reducer"))))),Seq(Assign(Var("mapoutputkeyclass"),App(CallNoArgs(SVar("type'-to-hadoop-nongeneric")),Var("mapoutputkeyclass'"))),Seq(Assign(Var("mapoutputvalueclass"),App(CallNoArgs(SVar("type'-to-hadoop-nongeneric")),Var("mapoutputvalueclass'"))),Seq(Assign(Var("outputkeyclass"),App(CallNoArgs(SVar("type'-to-hadoop-nongeneric")),Var("outputkeyclass'"))),Assign(Var("outputvalueclass"),App(CallNoArgs(SVar("type'-to-hadoop-nongeneric")),Var("outputvalueclass'"))))))))))))))))))),WhereClause(Assign(Var("javacode"),NoAnnoList(StringQuotation1("                            ",[QStr("\n            /** JOB **/\n              Deletedir.deleteDir(\""),StringEscape1("                                   ",Var("outputname")),QStr("\");\n              \n              Job "),StringEscape1("                  ",Var("jobname")),QStr(" = new Job(new Configuration(), \"Job "),StringEscape1("                                                                ",Var("jobname")),QStr("\");\n              "),StringEscape1("              ",Var("jobname")),QStr(".setMapperClass("),StringEscape1("                                       ",Var("mapperclass")),QStr(".class);\n              "),StringEscape1("              ",Var("jobname")),QStr(".setReducerClass("),StringEscape1("                                        ",Var("reducerclass")),QStr(".class);\n\n              /* Job input */\n              "),StringEscape1("              ",Var("jobname")),QStr(".setMapOutputKeyClass("),StringEscape1("                                             ",Var("mapoutputkeyclass")),QStr(".class);\n              "),StringEscape1("              ",Var("jobname")),QStr(".setMapOutputValueClass("),StringEscape1("                                               ",Var("mapoutputvalueclass")),QStr(".class);\n              "),StringEscape1("              ",Var("jobinput")),QStr("\n            \n              /* Job output */\n              "),StringEscape1("              ",Var("jobname")),QStr(".setOutputKeyClass("),StringEscape1("                                          ",Var("outputkeyclass")),QStr(".class);\n              "),StringEscape1("              ",Var("jobname")),QStr(".setOutputValueClass("),StringEscape1("                                            ",Var("outputvalueclass")),QStr(".class);\n              "),StringEscape1("              ",Var("joboutput")),QStr("\n                    \n              /* Execute the job */\n              "),StringEscape1("              ",Var("jobname")),QStr(".waitForCompletion(true);\n        ")]))))])),RDefT("to-java-job-input",[],[DefaultVarDec("jobname")],Rule(NoAnnoList(Op("MRInputMethod",[Var("method"),Var("params")])),Var("javacode"),Assign(Var("javacode"),App(CallT(SVar("to-java-input-job"),[],[Var("jobname"),Var("params")]),NoAnnoList(Op("DataInput",[Var("method")])))))),RDefT("to-java-job-input",[],[DefaultVarDec("jobname")],Rule(NoAnnoList(Op("MRInputSet",[Var("ref")])),Var("javacode"),[WhereClause(Seq(Assign(NoAnnoList(Op("DatasetDef",[Var("defname"),Var("deftype")])),App(CallNoArgs(SVar("get-node")),Var("ref"))),Assign(Var("inputdir"),NoAnnoList(StringQuotation1("                          ",[QStr("job_"),StringEscape1("                              ",Var("defname"))]))))),WhereClause(Assign(Var("javacode"),NoAnnoList(StringQuotation1("                          ",[QStr("\n                "),StringEscape1("                ",Var("jobname")),QStr(".setInputFormatClass(SequenceFileInputFormat.class);\n                SequenceFileInputFormat.addInputPath("),StringEscape1("                                                     ",Var("jobname")),QStr(", new Path(\""),StringEscape1("                                                                          ",Var("inputdir")),QStr("\"));\n            ")]))))])),RDefT("to-java-job-output",[],[DefaultVarDec("jobname")],Rule(NoAnnoList(Tuple([Var("varname"),Var("outputname")])),Var("javacode"),LChoice(Seq(Assign(NoAnnoList(Op("Def",[Var("uri")])),App(CallNoArgs(SVar("index-lookup")),Var("varname"))),Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([NoAnnoList(Int("0")),App(CallNoArgs(SVar("length")),App(CallNoArgs(SVar("index-get-all")),NoAnnoList(Op("StoreDatasetHDP",[Var("uri")]))))]))),Assign(Var("javacode"),NoAnnoList(StringQuotation1("                              ",[QStr("\n                    "),StringEscape1("                    ",Var("jobname")),QStr(".setOutputFormatClass(SequenceFileOutputFormat.class);\n                    SequenceFileOutputFormat.setOutputPath("),StringEscape1("                                                           ",Var("jobname")),QStr(", new Path(\""),StringEscape1("                                                                                ",Var("outputname")),QStr("\"));\n                ")]))))),Assign(Var("javacode"),NoAnnoList(StringQuotation1("                              ",[QStr("FileOutputFormat.setOutputPath("),StringEscape1("                                                             ",Var("jobname")),QStr(", new Path(\""),StringEscape1("                                                                                  ",Var("outputname")),QStr("\"));\n                ")]))))))])])