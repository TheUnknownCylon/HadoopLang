Module("trans/codegen/modules/reducer",[Imports([Import("include/Hadooplang"),Import("trans/codegen/compiler"),Import("trans/types/typeof"),Import("trans/codegen/types"),Import("trans/codegen/statements"),Import("trans/codegen/expressions"),Import("trans/codegen/names"),Import("trans/index")]),Rules([RDefNoArgs("to-java",Rule(As(Var("r"),NoAnnoList(Op("Reducer",[Var("name'"),Var("keydef"),Var("valuedef"),Var("blockmr")]))),NoAnnoList(Tuple([NoAnnoList(Op("JavaFile",[NoAnnoList(Str("\"hdp.reducers\"")),NoAnnoList(StringQuotation1("                                ",[StringEscape1("                                ",Var("name"))])),Var("content")])),Var("rewriters")])),[WhereClause(Seq(Assign(Var("name"),App(CallNoArgs(SVar("name-of")),Var("r"))),Seq(Assign(NoAnnoList(Op("MapReduceKey",[Wld,Var("keyname")])),Var("keydef")),Seq(Assign(NoAnnoList(Op("ReduceIterator",[Wld,Var("iteratorname")])),Var("valuedef")),Seq(Assign(Var("keyname'"),NoAnnoList(StringQuotation1("                         ",[StringEscape1("                         ",Var("keyname")),QStr("_")]))),Seq(Assign(Var("keytype"),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("keydef")))),Seq(Assign(Var("ittype"),App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("valuedef"))))),Seq(Assign(Var("keytypehadoop"),App(CallNoArgs(SVar("type'-to-hadoop-input")),Var("keytype"))),Seq(Assign(Var("ittypehadoop"),App(CallNoArgs(SVar("type'-to-hadoop-input")),Var("ittype"))),Seq(Assign(Var("ittypejava"),App(CallNoArgs(SVar("type'-to-java")),Var("ittype"))),Seq(Assign(NoAnnoList(Op("TwoType",[Var("writetypekey"),Var("writetypevalue")])),App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("r"))))),Seq(Assign(Var("writetypekeyhadoop"),App(CallNoArgs(SVar("type'-to-hadoop")),Var("writetypekey"))),Seq(Assign(Var("writetypevaluehadoop"),App(CallNoArgs(SVar("type'-to-hadoop")),Var("writetypevalue"))),Seq(LChoice(Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([NoAnnoList(Int("0")),App(CallNoArgs(SVar("length")),App(CallNoArgs(SVar("get-uses")),Var("keyname")))]))),Assign(Var("convertkeytojava"),NoAnnoList(List([])))),Assign(Var("convertkeytojava"),App(CallNoArgs(SVar("type-hadoop-to-java")),NoAnnoList(Tuple([NoAnnoList(Op("TEMPVAR",[Var("keytype"),Var("keyname'")])),Var("keyname")]))))),Seq(Assign(Var("reducerbody"),App(CallNoArgs(SVar("to-java")),Var("blockmr"))),Assign(Var("rewriters"),App(Call(SVar("collect-all"),[CallNoArgs(SVar("is-rewrite")),CallNoArgs(SVar("conc"))]),Var("r")))))))))))))))))),WithClause(Assign(Var("content"),NoAnnoList(StringQuotation1("                     ",[QStr("\n    public class "),StringEscape1("                 ",Var("name")),QStr(" extends Reducer<"),StringEscape1("                                        ",Var("keytypehadoop")),QStr(", "),StringEscape1("                                                         ",Var("ittypehadoop")),QStr(", "),StringEscape1("                                                                         ",Var("writetypekeyhadoop")),QStr(", "),StringEscape1("                                                                                               ",Var("writetypevaluehadoop")),QStr("> {\n        public void reduce("),StringEscape1("                           ",Var("keytypehadoop")),QStr(" "),StringEscape1("                                           ",Var("keyname'")),QStr(", Iterable<"),StringEscape1("                                                                ",Var("ittypehadoop")),QStr("> "),StringEscape1("                                                                                ",Var("iteratorname")),QStr(", Context context) {\n            "),StringEscape1("            ",Var("convertkeytojava")),QStr("\n            \n            "),StringEscape1("            ",Var("reducerbody")),QStr("        \n        }\n    }\n  ")]))))]))])])