Module("trans/codegen/modules/rewriter",[Imports([Import("include/Hadooplang"),Import("trans/codegen/compiler"),Import("trans/types/typeof"),Import("trans/codegen/types"),Import("trans/codegen/statements"),Import("trans/codegen/expressions"),Import("trans/codegen/names")]),Rules([SDefT("force-hadooploopset",[],[DefaultVarDec("mainparam")],Call(SVar("alltd"),[CallT(SVar("force-hadooploopset'"),[],[Var("mainparam")])])),RDefT("force-hadooploopset'",[],[DefaultVarDec("mainparam")],Rule(NoAnnoList(Op("ForloopSet",[Var("v"),Var("set"),Var("block")])),NoAnnoList(Op("ForloopSetHadoop",[Var("v"),Var("set"),Var("block")])),Seq(Assign(NoAnnoList(Op("DatasetRef",[Var("setname")])),Var("set")),BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([Var("mainparam"),Var("setname")]))))))]),Rules([RDefNoArgs("to-java",RuleNoCond(As(Var("r"),NoAnnoList(Op("RewriterAlias",[Wld,Wld,Wld,Wld,Wld]))),NoAnnoList(Op("None",[]))))]),Rules([RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("Parameter",[Var("t"),Var("name")])),NoAnnoList(StringQuotation1("                                   ",[StringEscape1("                                   ",App(CallNoArgs(SVar("type'-to-java")),App(CallNoArgs(SVar("type-of")),Var("t")))),QStr(" "),StringEscape1("                                                                 ",Var("name"))]))))]),Rules([RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("Parameter",[Var("t"),Var("name")])),NoAnnoList(StringQuotation1("                                   ",[StringEscape1("                                   ",App(CallNoArgs(SVar("type'-to-java")),App(CallNoArgs(SVar("type-of")),Var("t")))),QStr(" "),StringEscape1("                                                                 ",Var("name"))])))),RDefNoArgs("to-java",Rule(As(Var("r"),NoAnnoList(Op("Rewriter",[Var("name'"),Var("mainparam"),Var("params"),As(Var("b"),NoAnnoList(Op("BlockReturn",[Var("commands"),Var("return")])))]))),NoAnnoList(Tuple([NoAnnoList(Op("JavaFile",[NoAnnoList(Str("\"hdp.rewriters\"")),NoAnnoList(StringQuotation1("                                 ",[StringEscape1("                                 ",Var("name"))])),Var("content")])),Var("rewriters")])),[WhereClause(Seq(Assign(Var("name"),App(CallNoArgs(SVar("name-of")),Var("r"))),Seq(Assign(NoAnnoList(Op("RewriterParameter",[Var("paramtype"),Var("paramname")])),Var("mainparam")),Seq(Assign(Var("returntype"),App(CallNoArgs(SVar("type'-to-java")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("r"))))),Seq(Assign(Var("maintypeJava"),App(CallNoArgs(SVar("type'-to-java")),App(CallNoArgs(SVar("type-of")),Var("paramtype")))),Seq(Assign(Var("args"),App(CallNoArgs(SVar("concat-strings")),App(Call(SVar("map"),[CallNoArgs(SVar("add-pre-comma"))]),App(Call(SVar("map"),[CallNoArgs(SVar("to-java"))]),Var("params"))))),Seq(Assign(Var("rewriters"),App(CallNoArgs(SVar("nub")),App(Call(SVar("collect-all"),[CallNoArgs(SVar("is-rewrite")),CallNoArgs(SVar("conc"))]),Var("r")))),LChoice(Seq(BA(CallNoArgs(SVar("is-type-iterator")),App(CallNoArgs(SVar("type-type-of")),Var("mainparam"))),Seq(Assign(Var("maintypeHadoop"),App(CallNoArgs(SVar("type'-to-hadoop")),App(CallNoArgs(SVar("type-of")),Var("paramtype")))),Seq(Assign(Var("statementswithhadooptype"),App(CallNoArgs(SVar("to-java")),App(CallT(SVar("force-hadooploopset"),[],[Var("paramname")]),Var("b")))),Assign(Var("withhadoopmethod"),NoAnnoList(StringQuotation1("                                  ",[QStr("\n		        public static "),StringEscape1("		                      ",Var("returntype")),QStr(" withHadoop("),StringEscape1("		                                              ",Var("maintypeHadoop")),QStr(" "),StringEscape1("		                                                               ",Var("paramname")),QStr(" "),StringEscape1("		                                                                           ",Var("args")),QStr(") {\n		            "),StringEscape1("		            ",Var("statementswithhadooptype")),QStr("\n		        }\n		    ")])))))),Assign(Var("withhadoopmethod"),NoAnnoList(StringQuotation1("                                  ",[]))))))))))),WithClause(Assign(Var("content"),NoAnnoList(StringQuotation1("                    ",[QStr("\n    public class "),StringEscape1("                 ",Var("name")),QStr(" {\n        public static "),StringEscape1("                      ",Var("returntype")),QStr(" withJava("),StringEscape1("                                            ",Var("maintypeJava")),QStr(" "),StringEscape1("                                                           ",Var("paramname")),QStr(" "),StringEscape1("                                                                       ",Var("args")),QStr(") {\n            "),StringEscape1("            ",App(CallNoArgs(SVar("to-java")),Var("b"))),QStr("\n        }\n        \n        "),StringEscape1("        ",Var("withhadoopmethod")),QStr("\n    }")]))))]))])])