Module("trans/codegen/output",[Imports([Import("include/Hadooplang"),Import("lib/editor-common.generated"),Import("trans/codegen/compiler")]),Rules([RDefT("to-file",[],[DefaultVarDec("builddir"),DefaultVarDec("javafiles")],Rule(NoAnnoList(Op("JavaFile",[Var("package"),Var("classname"),Var("content")])),Var("filepath"),Seq(Assign(Var("content'"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([App(CallT(SVar("generate-header"),[],[Var("javafiles")]),Var("package")),Var("content")])))),Seq(Assign(Var("dirname"),App(CallT(SVar("create-packagedir"),[],[Var("builddir")]),Var("package"))),Seq(Assign(Var("filepath"),NoAnnoList(StringQuotation1("                      ",[StringEscape1("                      ",Var("dirname")),QStr("/"),StringEscape1("                                ",Var("classname")),QStr(".java")]))),Seq(Assign(Var("f"),App(CallNoArgs(SVar("fopen")),NoAnnoList(Tuple([Var("filepath"),NoAnnoList(Str("\"w\""))])))),Seq(BA(CallNoArgs(SVar("fputs")),NoAnnoList(Tuple([Var("content'"),Var("f")]))),Seq(BA(CallNoArgs(SVar("fclose")),Var("f")),Seq(Call(SVar("try"),[BA(CallNoArgs(SVar("refresh-workspace-file")),Var("filepath"))]),BA(CallT(SVar("compile-log"),[],[NoAnnoList(Int("1"))]),NoAnnoList(StringQuotation1("                            ",[QStr("output file: "),StringEscape1("                                         ",Var("filepath"))])))))))))))),RDefT("to-file",[],[DefaultVarDec("builddir"),DefaultVarDec("javafiles")],RuleNoCond(Var("n"),NoAnnoList(Op("None",[]))))]),Rules([RDefT("generate-header",[],[DefaultVarDec("javafiles")],Rule(Var("package"),NoAnnoList(StringQuotation1("                                            ",[QStr("\n  	package "),StringEscape1("  	        ",Var("package")),QStr(";\n  	\n  	import java.io.IOException;\n  	\n  	import java.util.List;\n    import java.util.HashMap;\n    import java.util.ArrayList;\n  	import java.lang.Iterable;\n  	import java.util.Arrays;\n\n  	import org.hadooplanghelpers.Deletedir;\n  	import org.hadooplanghelpers.ArrayWritableHDP;\n 	import org.hadooplanghelpers.ArrayListWritable;\n 	import org.hadooplanghelpers.MapWritableHdp;\n\n	import org.apache.hadoop.io.Text;\n	import org.apache.hadoop.io.DoubleWritable;\n	import org.apache.hadoop.io.BooleanWritable;\n\n    import org.apache.hadoop.io.Writable;\n	import org.apache.hadoop.io.LongWritable;\n	import org.apache.hadoop.io.IntWritable;\n\n    import org.apache.hadoop.io.ArrayWritable; \n    import org.apache.hadoop.io.MapWritable;\n\n	import org.apache.hadoop.mapreduce.Mapper;\n	import org.apache.hadoop.mapreduce.Reducer;\n	\n	import org.apache.hadoop.fs.Path;\n	import org.apache.hadoop.conf.Configuration;\n	import org.apache.hadoop.mapreduce.Job;\n	import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\n	import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\n    import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;\n    import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;\n    \n    import com.google.common.collect.ImmutableMap;\n    import com.google.common.collect.Maps;\n\n	"),StringEscape1("	",Var("hdpimports")),QStr("\n  ")])),Seq(Assign(Var("javafiles'"),App(Call(SVar("filter"),[CallNoArgs(SVar("is-javafile"))]),Var("javafiles"))),Assign(Var("hdpimports"),App(CallNoArgs(SVar("concat-strings")),App(Call(SVar("map"),[CallNoArgs(SVar("fileimportcode"))]),Var("javafiles'"))))))),RDefNoArgs("is-javafile",RuleNoCond(As(Var("x"),NoAnnoList(Op("JavaFile",[Wld,Wld,Wld]))),Var("x"))),RDefNoArgs("fileimportcode",RuleNoCond(As(Var("x"),NoAnnoList(Op("JavaFile",[Var("package"),Var("classname"),Wld]))),NoAnnoList(StringQuotation1("                                                         ",[QStr("\n      import "),StringEscape1("             ",Var("package")),QStr("."),StringEscape1("                       ",Var("classname")),QStr(";")])))),RDefT("create-packagedir",[],[DefaultVarDec("root")],Rule(Var("package"),Var("dirname"),Seq(Assign(Var("dirname'"),App(CallT(SVar("string-replace"),[],[NoAnnoList(Str("\".\"")),NoAnnoList(Str("\"/\""))]),Var("package"))),Seq(Assign(Var("dirname"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([Var("root"),NoAnnoList(StringQuotation1("                                              ",[QStr("/")])),Var("dirname'")])))),Seq(Assign(Var("dirparts"),App(CallT(SVar("string-tokenize"),[],[NoAnnoList(List([NoAnnoList(Char("'/'"))]))]),Var("dirname"))),LChoice(Seq(BA(CallT(SVar("string-starts-with"),[],[NoAnnoList(Str("\"/\""))]),Var("root")),BA(CallNoArgs(SVar("mkdir_recursive")),Var("dirparts"))),BA(CallT(SVar("mkdir_recursive"),[],[NoAnnoList(Str("\".\""))]),Var("dirparts"))))))))]),Rules([RDefNoArgs("mkdir_recursive",RuleNoCond(Var("dirlist"),App(CallT(SVar("mkdir_recursive"),[],[NoAnnoList(StringQuotation1("                                                  ",[]))]),Var("dirlist")))),RDefT("mkdir_recursive",[],[DefaultVarDec("prelist")],RuleNoCond(NoAnnoList(List([])),NoAnnoList(Op("None",[])))),RDefT("mkdir_recursive",[],[DefaultVarDec("prelist")],Rule(NoAnnoList(ListTail([Var("c")],Var("rest"))),App(CallT(SVar("mkdir_recursive"),[],[Var("pre")]),Var("rest")),Seq(Assign(Var("pre"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([Var("prelist"),NoAnnoList(StringQuotation1("    	                                    ",[QStr("/")])),Var("c")])))),Call(SVar("try"),[BA(CallNoArgs(SVar("mkdir")),Var("pre"))]))))])])