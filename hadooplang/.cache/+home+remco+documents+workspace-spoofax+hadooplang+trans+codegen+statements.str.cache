Module("trans/codegen/statements",[Imports([Import("include/Hadooplang"),Import("lib/editor-common.generated"),Import("trans/codegen/compiler"),Import("trans/codegen/expressions"),Import("trans/codegen/types"),Import("trans/types/typeof")]),Signature([Constructors([OpDecl("ForloopSetHadoop",FunType([ConstType(SortVar("vardef")),ConstType(SortVar("expr")),ConstType(SortVar("block"))],ConstType(SortNoArgs("ForloopSetHadoop"))))])]),Rules([RDefNoArgs("name",RuleNoCond(Var("e"),Var("e"))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("loop",[Var("l")])),App(CallNoArgs(SVar("to-java")),Var("l")))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("loopblock",[Var("b")])),App(CallNoArgs(SVar("to-java")),Var("b")))),RDefNoArgs("to-java",Rule(NoAnnoList(Op("write",[Var("refKey"),Var("refValue")])),NoAnnoList(StringQuotation1("                                          ",[QStr("\n        \n        "),StringEscape1("        ",Var("initcodeK")),QStr("\n        "),StringEscape1("        ",Var("initcodeV")),QStr("\n        try { context.write("),StringEscape1("                            ",Var("refKey'")),QStr(", "),StringEscape1("                                       ",Var("refValue'")),QStr("); }\n        catch (IOException e) {e.printStackTrace();}\n        catch (InterruptedException e) {e.printStackTrace();}\n        ")])),[WhereClause(Assign(NoAnnoList(Tuple([Var("refKey'"),Var("initcodeK")])),App(CallNoArgs(SVar("type-java-to-hadoop")),Var("refKey")))),WhereClause(Assign(NoAnnoList(Tuple([Var("refValue'"),Var("initcodeV")])),App(CallNoArgs(SVar("type-java-to-hadoop")),Var("refValue"))))])),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("Block",[Var("statements")])),NoAnnoList(StringQuotation1("                                      ",[QStr("{"),StringEscape1("                                       ",App(CallNoArgs(SVar("to-java")),Var("statements"))),QStr("}")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("BlockMR",[Var("statements")])),NoAnnoList(StringQuotation1("                                      ",[StringEscape1("                                      ",App(CallNoArgs(SVar("to-java")),Var("statements")))])))),RDefNoArgs("to-java",Rule(NoAnnoList(Op("BlockReturn",[Var("statements"),Var("return")])),NoAnnoList(StringQuotation1("          ",[StringEscape1("          ",Var("javablock")),QStr("\n        "),StringEscape1("        ",Var("javareturn"))])),[WhereClause(Assign(Var("javablock"),App(CallNoArgs(SVar("to-java")),Var("statements")))),WhereClause(Assign(Var("javareturn"),NoAnnoList(StringQuotation1("                            ",[QStr("return "),StringEscape1("                                   ",App(CallNoArgs(SVar("to-java")),Var("return"))),QStr(";")]))))]))]),Rules([RDefNoArgs("to-java",Rule(NoAnnoList(Op("If",[Var("expr"),Var("blockif"),NoAnnoList(Op("None",[]))])),Var("javacode"),Assign(Var("javacode"),NoAnnoList(StringQuotation1("                          ",[QStr("\n        if("),StringEscape1("           ",App(CallNoArgs(SVar("to-java")),Var("expr"))),QStr(") {\n            "),StringEscape1("            ",App(CallNoArgs(SVar("to-java")),Var("blockif"))),QStr("\n        }\n    ")]))))),RDefNoArgs("to-java",Rule(NoAnnoList(Op("If",[Var("expr"),Var("blockif"),NoAnnoList(Op("Some",[NoAnnoList(Op("IfElse",[Var("blockelse")]))]))])),Var("javacode"),Assign(Var("javacode"),NoAnnoList(StringQuotation1("                          ",[QStr("\n        if("),StringEscape1("           ",App(CallNoArgs(SVar("to-java")),Var("expr"))),QStr(") {\n            "),StringEscape1("            ",App(CallNoArgs(SVar("to-java")),Var("blockif"))),QStr("\n        } else {\n            "),StringEscape1("            ",App(CallNoArgs(SVar("to-java")),Var("blockelse"))),QStr("\n        }\n    ")])))))]),Rules([RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("ListAddItem",[Var("listref"),Var("expr")])),NoAnnoList(StringQuotation1("                                             ",[StringEscape1("                                             ",App(CallNoArgs(SVar("to-java")),Var("listref"))),QStr(".add("),StringEscape1("                                                                     ",App(CallNoArgs(SVar("to-java")),Var("expr"))),QStr(");\n    ")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("ListDictSetItem",[NoAnnoList(Op("DictAccess",[Var("ref"),Var("i")])),Var("value")])),NoAnnoList(StringQuotation1("                                                             ",[QStr("\n        "),StringEscape1("        ",App(CallNoArgs(SVar("to-java")),Var("ref"))),QStr(".put("),StringEscape1("                            ",App(CallNoArgs(SVar("to-java")),Var("i"))),QStr(", "),StringEscape1("                                           ",App(CallNoArgs(SVar("to-java")),Var("value"))),QStr(");\n    ")]))))]),Rules([RDefNoArgs("to-java",Rule(NoAnnoList(Op("ForloopSet",[Var("vardef"),Var("expr"),Var("block")])),App(CallNoArgs(SVar("to-java")),NoAnnoList(Op("ForloopSetHadoop",[Var("vardef"),Var("expr"),Var("block")]))),BA(CallNoArgs(SVar("is-dataset")),App(CallNoArgs(SVar("type-of")),Var("expr"))))),RDefNoArgs("to-java",Rule(NoAnnoList(Op("ForloopSetHadoop",[Var("vardef"),Var("expr"),Var("block")])),NoAnnoList(StringQuotation1("          ",[QStr("\n          for("),StringEscape1("              ",Var("ittype'")),QStr(" "),StringEscape1("                        ",Var("name'")),QStr(" : "),StringEscape1("                                  ",Var("expr'")),QStr(") {\n              /* Convert hadoop type to java type */\n              "),StringEscape1("              ",Var("convert-to-java")),QStr("\n              \n              "),StringEscape1("              ",Var("block'")),QStr("\n          }\n        ")])),Seq(Assign(Var("name"),Var("vardef")),Seq(Assign(Var("name'"),NoAnnoList(StringQuotation1("                     ",[StringEscape1("                     ",Var("name")),QStr("_")]))),Seq(Assign(Var("expr'"),App(CallNoArgs(SVar("to-java")),Var("expr"))),Seq(Assign(Var("block'"),NoAnnoList(List([App(CallNoArgs(SVar("to-java")),Var("block"))]))),Seq(Assign(Var("ittype'"),App(CallNoArgs(SVar("type'-to-hadoop-input")),App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("expr")))))),Seq(Assign(Var("ittype"),App(CallNoArgs(SVar("type'-to-java")),App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("expr")))))),Assign(Var("convert-to-java"),App(CallNoArgs(SVar("type-hadoop-to-java")),NoAnnoList(Tuple([NoAnnoList(Op("TEMPVAR",[App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("expr")))),Var("name'")])),Var("name")])))))))))))),RDefNoArgs("to-java",Rule(NoAnnoList(Op("ForloopDict",[Var("key"),Var("vardef"),Var("expr"),Var("block")])),NoAnnoList(StringQuotation1("          ",[QStr("\n          for (Map.Entry<"),StringEscape1("                         ",Var("keytype")),QStr(", "),StringEscape1("                                    ",Var("valuetype")),QStr("> entry : "),StringEscape1("                                                         ",Var("set")),QStr(".entrySet()) {\n            "),StringEscape1("            ",Var("keytype")),QStr(" "),StringEscape1("                      ",Var("keyname")),QStr(" = entry.getKey();\n			"),StringEscape1("			",Var("valuetype")),QStr(" "),StringEscape1("			            ",Var("valuename")),QStr(" = entry.getValue();\n            "),StringEscape1("            ",Var("block'")),QStr("\n		  }\n        ")])),Seq(Assign(Var("block'"),App(CallNoArgs(SVar("to-java")),Var("block"))),Seq(Assign(Var("keytype"),App(CallNoArgs(SVar("type'-to-java")),NoAnnoList(Op("String",[])))),Seq(Assign(NoAnnoList(Op("ForKeyDef",[Var("keyname")])),Var("key")),Seq(Assign(Var("valuetype"),App(CallNoArgs(SVar("type'-to-java")),App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("expr")))))),Seq(Assign(Var("valuename"),Var("vardef")),Assign(Var("set"),App(CallNoArgs(SVar("to-java")),Var("expr"))))))))))])])