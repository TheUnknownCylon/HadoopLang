Module("trans/codegen/types",[Imports([Import("include/Hadooplang"),Import("trans/types/typeof"),Import("trans/types/checks"),Import("trans/codegen/statements"),Import("trans/codegen/expressions"),Import("trans/codegen/vars"),Import("trans/codegen/names")]),Signature([Constructors([OpDecl("TEMPVAR",FunType([ConstType(SortVar("type")),ConstType(SortVar("value"))],ConstType(SortNoArgs("TEMPVAR"))))])]),Rules([RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("TEMPVAR",[Var("t"),Wld])),NoAnnoList(Op("Type",[Var("t"),NoAnnoList(Int("0"))])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("TEMPVAR",[Wld,Var("v")])),Var("v")))]),Rules([RDefNoArgs("type-to-java",RuleNoCond(NoAnnoList(Op("Type",[Var("t"),Wld])),App(CallNoArgs(SVar("type'-to-java")),Var("t")))),RDefNoArgs("type-to-hadoop",RuleNoCond(As(Var("x"),NoAnnoList(Op("Type",[Var("t"),Wld]))),App(CallNoArgs(SVar("type'-to-hadoop")),Var("t")))),RDefNoArgs("type-to-hadoop",Rule(Var("x"),RootApp(Fail),[WithClause(BA(Call(SVar("debug"),[Build(NoAnnoList(Str("\"COMPILERBUG: type-to-hadoop failed: \"")))]),RootApp(Id)))])),RDefNoArgs("type'-to-hadoop-input",RuleNoCond(NoAnnoList(Op("Num",[])),NoAnnoList(StringQuotation1("                                    ",[QStr("Writable")])))),RDefNoArgs("type'-to-hadoop-input",RuleNoCond(Var("x"),App(CallNoArgs(SVar("type'-to-hadoop")),Var("x")))),RDefNoArgs("type'-to-hadoop-nongeneric",RuleNoCond(NoAnnoList(Op("List",[Var("t")])),NoAnnoList(StringQuotation1("                                           ",[QStr("ArrayListWritable")])))),RDefNoArgs("type'-to-hadoop-nongeneric",RuleNoCond(Var("x"),App(CallNoArgs(SVar("type'-to-hadoop")),Var("x")))),RDefNoArgs("type'-to-hadoop",RuleNoCond(NoAnnoList(Op("String",[])),NoAnnoList(StringQuotation1("                                 ",[QStr("Text")])))),RDefNoArgs("type'-to-hadoop",RuleNoCond(NoAnnoList(Op("Num",[])),NoAnnoList(StringQuotation1("                                 ",[QStr("DoubleWritable")])))),RDefNoArgs("type'-to-hadoop",RuleNoCond(NoAnnoList(Op("Bool",[])),NoAnnoList(StringQuotation1("                                 ",[QStr("BooleanWritable")])))),RDefNoArgs("type'-to-hadoop",RuleNoCond(NoAnnoList(Op("List",[Var("t")])),NoAnnoList(StringQuotation1("                                 ",[QStr("ArrayListWritable<"),StringEscape1("                                                   ",App(CallNoArgs(SVar("type'-to-hadoop")),Var("t"))),QStr(">")])))),RDefNoArgs("type'-to-hadoop",RuleNoCond(NoAnnoList(Op("Dict",[Var("t")])),NoAnnoList(StringQuotation1("                                 ",[QStr("MapWritableHdp")])))),RDefNoArgs("type'-to-hadoop",RuleNoCond(NoAnnoList(Op("Iterator",[Var("t")])),NoAnnoList(StringQuotation1("                                     ",[QStr("Iterable<Writable>")])))),RDefNoArgs("type'-to-java",RuleNoCond(NoAnnoList(Op("String",[])),NoAnnoList(StringQuotation1("                                 ",[QStr("String")])))),RDefNoArgs("type'-to-java",RuleNoCond(NoAnnoList(Op("Num",[])),NoAnnoList(StringQuotation1("                                 ",[QStr("Double")])))),RDefNoArgs("type'-to-java",RuleNoCond(NoAnnoList(Op("Bool",[])),NoAnnoList(StringQuotation1("                                 ",[QStr("Boolean")])))),RDefNoArgs("type'-to-java",RuleNoCond(NoAnnoList(Op("List",[Var("t")])),NoAnnoList(StringQuotation1("                                 ",[QStr("List<"),StringEscape1("                                      ",App(CallNoArgs(SVar("type'-to-java")),Var("t"))),QStr(">")])))),RDefNoArgs("type'-to-java",RuleNoCond(NoAnnoList(Op("Dict",[Var("t")])),NoAnnoList(StringQuotation1("                                 ",[QStr("HashMap<String, "),StringEscape1("                                                 ",App(CallNoArgs(SVar("type'-to-java")),Var("t"))),QStr(">")])))),RDefNoArgs("type'-to-java",RuleNoCond(NoAnnoList(Op("Iterator",[Var("t")])),NoAnnoList(StringQuotation1("                                   ",[QStr("Iterable<"),StringEscape1("                                            ",App(CallNoArgs(SVar("type'-to-java")),Var("t"))),QStr(">")]))))]),Rules([RDefNoArgs("type-hadoop-to-java",Rule(NoAnnoList(Tuple([Var("ref"),Var("varname")])),Var("javacode"),[WhereClause(BA(CallT(SVar("typecheck"),[],[NoAnnoList(Op("String",[]))]),Var("ref"))),WhereClause(Assign(Var("javacode"),App(CallNoArgs(SVar("to-java")),NoAnnoList(Op("DatasetDefStatement",[Var("varname"),NoAnnoList(Op("TEMPVAR",[NoAnnoList(Op("String",[])),NoAnnoList(StringQuotation1("                                                                                 ",[StringEscape1("                                                                                 ",App(CallNoArgs(SVar("to-java")),Var("ref"))),QStr(".toString()")]))]))])))))])),RDefNoArgs("type-hadoop-to-java",Rule(NoAnnoList(Tuple([Var("ref"),Var("varname")])),Var("javacode"),[WhereClause(BA(CallT(SVar("typecheck"),[],[NoAnnoList(Op("Num",[]))]),Var("ref"))),WhereClause(Seq(Assign(Var("tempvar"),RootApp(CallNoArgs(SVar("gen-new-name")))),Assign(Var("javacode"),NoAnnoList(StringQuotation1("                      ",[QStr("\n	        "),StringEscape1("	        ",App(CallNoArgs(SVar("type'-to-java")),App(CallNoArgs(SVar("type-type-of")),Var("ref")))),QStr(" "),StringEscape1("	                                             ",Var("varname")),QStr(" = null;\n	        Writable "),StringEscape1("	                 ",Var("tempvar")),QStr(" = "),StringEscape1("	                             ",App(CallNoArgs(SVar("to-java")),Var("ref"))),QStr("; \n	        try {"),StringEscape1("	             ",Var("varname")),QStr(" = ((DoubleWritable)"),StringEscape1("	                                          ",Var("tempvar")),QStr(").get();}catch(Exception "),StringEscape1("	                                                                            ",RootApp(CallT(SVar("gen-new-name"),[],[NoAnnoList(Str("\"e\""))]))),QStr(") {\n	          try {"),StringEscape1("	               ",Var("varname")),QStr(" = (double) ((LongWritable)"),StringEscape1("	                                                   ",Var("tempvar")),QStr(").get();}catch(Exception "),StringEscape1("	                                                                                     ",RootApp(CallT(SVar("gen-new-name"),[],[NoAnnoList(Str("\"e\""))]))),QStr(") {\n	            try {"),StringEscape1("	                 ",Var("varname")),QStr(" = (double) ((IntWritable)"),StringEscape1("	                                                    ",Var("tempvar")),QStr(").get();}catch(Exception "),StringEscape1("	                                                                                      ",RootApp(CallT(SVar("gen-new-name"),[],[NoAnnoList(Str("\"e\""))]))),QStr(") {\n	                throw new RuntimeException(\"Input value is not a number\");\n	            }\n	          }\n	        }\n        ")])))))])),RDefNoArgs("type-hadoop-to-java",Rule(NoAnnoList(Tuple([Var("ref"),Var("varname")])),Var("javacode"),[WhereClause(BA(CallT(SVar("typecheck"),[],[NoAnnoList(Op("Bool",[]))]),Var("ref"))),WhereClause(Assign(Var("javacode"),NoAnnoList(StringQuotation1("                        ",[StringEscape1("                        ",App(CallNoArgs(SVar("type'-to-java")),App(CallNoArgs(SVar("type-type-of")),Var("ref")))),QStr(" "),StringEscape1("                                                             ",Var("varname")),QStr(" = "),StringEscape1("                                                                         ",App(CallNoArgs(SVar("to-java")),Var("ref"))),QStr(".get();")]))))])),RDefNoArgs("type-hadoop-to-java",Rule(NoAnnoList(Tuple([Var("ref"),Var("varname")])),Var("javacode"),[WhereClause(BA(CallNoArgs(SVar("is-type-list")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("ref"))))),WhereClause(Seq(Assign(Var("arraylisttype"),App(CallNoArgs(SVar("type'-to-java")),App(CallNoArgs(SVar("type-type-of")),Var("ref")))),Seq(Assign(Var("innertype"),App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type-type-of")),Var("ref")))),Seq(Assign(Var("innertypehdp"),App(CallNoArgs(SVar("type'-to-hadoop")),Var("innertype"))),Seq(Assign(Var("innertypejava"),App(CallNoArgs(SVar("type'-to-java")),Var("innertype"))),Seq(Assign(Var("itname"),RootApp(CallNoArgs(SVar("gen-new-name")))),Seq(Assign(Var("awname"),RootApp(CallNoArgs(SVar("gen-new-name")))),Seq(Assign(Var("for_valuename"),RootApp(CallNoArgs(SVar("gen-new-name")))),Seq(Assign(Var("valuefromarray"),NoAnnoList(StringQuotation1("                            ",[QStr("(("),StringEscape1("                              ",Var("innertypehdp")),QStr(")"),StringEscape1("                                             ",Var("awname")),QStr(".get("),StringEscape1("                                                          ",Var("itname")),QStr("))")]))),Assign(Var("innerjava"),App(CallNoArgs(SVar("type-hadoop-to-java")),NoAnnoList(Tuple([NoAnnoList(Op("TEMPVAR",[Var("innertype"),Var("valuefromarray")])),Var("for_valuename")]))))))))))))),WhereClause(Assign(Var("javacode"),NoAnnoList(StringQuotation1("                      ",[QStr("\n            ArrayListWritable<"),StringEscape1("                              ",Var("innertypehdp")),QStr("> "),StringEscape1("                                              ",Var("awname")),QStr(" = "),StringEscape1("                                                         ",App(CallNoArgs(SVar("to-java")),Var("ref"))),QStr(";\n            ArrayList<"),StringEscape1("                      ",Var("innertypejava")),QStr("> "),StringEscape1("                                       ",Var("varname")),QStr(" = new ArrayList<"),StringEscape1("                                                                 ",Var("innertypejava")),QStr(">();\n            for(int "),StringEscape1("                    ",Var("itname")),QStr("=0; "),StringEscape1("                                ",Var("itname")),QStr("<"),StringEscape1("                                         ",Var("awname")),QStr(".size(); "),StringEscape1("                                                          ",Var("itname")),QStr("++) {\n                "),StringEscape1("                ",Var("innerjava")),QStr("\n                "),StringEscape1("                ",Var("varname")),QStr(".add("),StringEscape1("                              ",Var("for_valuename")),QStr(");\n            }\n        ")]))))])),RDefNoArgs("type-hadoop-to-java",Rule(NoAnnoList(Tuple([Var("ref"),Var("varname")])),Var("javacode"),[WhereClause(BA(CallNoArgs(SVar("is-type-dict")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("ref"))))),WhereClause(Seq(Assign(Var("hashmaptype"),App(CallNoArgs(SVar("type'-to-java")),App(CallNoArgs(SVar("type-type-of")),Var("ref")))),Seq(Assign(Var("for_keyname"),RootApp(CallNoArgs(SVar("gen-new-name")))),Seq(Assign(Var("for_keyname'"),RootApp(CallNoArgs(SVar("gen-new-name")))),Seq(Assign(Var("mapname"),RootApp(CallNoArgs(SVar("gen-new-name")))),Seq(Assign(Var("for_valuename"),RootApp(CallNoArgs(SVar("gen-new-name")))),Seq(Assign(Var("innertype"),App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type-type-of")),Var("ref")))),Seq(Assign(Var("innertypehdp"),App(CallNoArgs(SVar("type'-to-hadoop")),Var("innertype"))),Seq(Assign(Var("valuefrommap"),NoAnnoList(StringQuotation1("                           ",[QStr("(("),StringEscape1("                             ",Var("innertypehdp")),QStr(")"),StringEscape1("                                            ",Var("mapname")),QStr(".get("),StringEscape1("                                                          ",Var("for_keyname")),QStr("))")]))),Assign(Var("innerjava"),App(CallNoArgs(SVar("type-hadoop-to-java")),NoAnnoList(Tuple([NoAnnoList(Op("TEMPVAR",[Var("innertype"),Var("valuefrommap")])),Var("for_valuename")]))))))))))))),WhereClause(Assign(Var("javacode"),NoAnnoList(StringQuotation1("                      ",[QStr("\n            MapWritableHdp "),StringEscape1("                           ",Var("mapname")),QStr(" = "),StringEscape1("                                       ",App(CallNoArgs(SVar("to-java")),Var("ref"))),QStr(";\n            "),StringEscape1("            ",Var("hashmaptype")),QStr(" "),StringEscape1("                          ",Var("varname")),QStr(" = new "),StringEscape1("                                          ",Var("hashmaptype")),QStr("();\n            for(Writable "),StringEscape1("                         ",Var("for_keyname")),QStr(" : "),StringEscape1("                                         ",Var("mapname")),QStr(".keySet()) {\n                String "),StringEscape1("                       ",Var("for_keyname'")),QStr(" = ((Text)"),StringEscape1("                                               ",Var("for_keyname")),QStr(").toString();\n                "),StringEscape1("                ",Var("innerjava")),QStr("\n                "),StringEscape1("                ",Var("varname")),QStr(".put("),StringEscape1("                              ",Var("for_keyname'")),QStr(", "),StringEscape1("                                              ",Var("for_valuename")),QStr(");\n            }\n        ")]))))]))]),Rules([RDefNoArgs("type-java-to-hadoop",Rule(Var("ref"),NoAnnoList(Tuple([Var("newname"),Var("javacode")])),[WhereClause(BA(CallT(SVar("typecheck"),[],[NoAnnoList(Op("String",[]))]),Var("ref"))),WhereClause(Seq(Assign(Var("newname"),RootApp(CallNoArgs(SVar("gen-new-name")))),Assign(Var("javacode"),NoAnnoList(StringQuotation1("                      ",[QStr("Text "),StringEscape1("                           ",Var("newname")),QStr(" = new Text("),StringEscape1("                                                ",App(CallNoArgs(SVar("to-java")),Var("ref"))),QStr(");")])))))])),RDefNoArgs("type-java-to-hadoop",Rule(Var("ref"),NoAnnoList(Tuple([Var("newname"),Var("javacode")])),[WhereClause(BA(CallT(SVar("typecheck"),[],[NoAnnoList(Op("Num",[]))]),Var("ref"))),WhereClause(Seq(Assign(Var("newname"),RootApp(CallNoArgs(SVar("gen-new-name")))),Assign(Var("javacode"),NoAnnoList(StringQuotation1("                      ",[QStr("DoubleWritable "),StringEscape1("                                     ",Var("newname")),QStr(" = new DoubleWritable("),StringEscape1("                                                                    ",App(CallNoArgs(SVar("to-java")),Var("ref"))),QStr(");")])))))])),RDefNoArgs("type-java-to-hadoop",Rule(Var("ref"),NoAnnoList(Tuple([Var("newname"),Var("javacode")])),[WhereClause(BA(CallT(SVar("typecheck"),[],[NoAnnoList(Op("Bool",[]))]),Var("ref"))),WhereClause(Seq(Assign(Var("newname"),RootApp(CallNoArgs(SVar("gen-new-name")))),Assign(Var("javacode"),NoAnnoList(StringQuotation1("                      ",[QStr("BooleanWritable "),StringEscape1("                                      ",Var("newname")),QStr(" = new BooleanWritable("),StringEscape1("                                                                      ",App(CallNoArgs(SVar("to-java")),Var("ref"))),QStr(");")])))))])),RDefNoArgs("type-java-to-hadoop",Rule(Var("ref"),NoAnnoList(Tuple([Var("newname"),Var("javacode")])),[WhereClause(LChoice(BA(CallNoArgs(SVar("is-type-list")),App(CallNoArgs(SVar("type-type-of")),Var("ref"))),BA(CallNoArgs(SVar("is-type-iterator")),App(CallNoArgs(SVar("type-type-of")),Var("ref"))))),WhereClause(Seq(Assign(Var("newname"),RootApp(CallNoArgs(SVar("gen-new-name")))),Seq(Assign(Var("innertypehadoop"),App(CallNoArgs(SVar("type'-to-hadoop")),App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type-type-of")),Var("ref"))))),Seq(Assign(Var("arraylistname"),RootApp(CallT(SVar("gen-new-name"),[],[NoAnnoList(StringQuotation1("                                          ",[QStr("arraylistname")]))]))),Seq(Assign(Var("mapitername"),RootApp(CallT(SVar("gen-new-name"),[],[NoAnnoList(StringQuotation1("                                        ",[QStr("mapwritable_iter")]))]))),Seq(Assign(Var("mapiterkey"),RootApp(CallT(SVar("gen-new-name"),[],[NoAnnoList(StringQuotation1("                                       ",[QStr("mapwritable_key")]))]))),Seq(Assign(Var("mapitertype"),App(CallNoArgs(SVar("type'-to-java")),App(CallNoArgs(SVar("type-type-of")),Var("ref")))),Seq(Assign(Var("temparray"),RootApp(CallT(SVar("gen-new-name"),[],[NoAnnoList(StringQuotation1("                                      ",[QStr("temparray")]))]))),Seq(Assign(Var("innertype"),App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("ref"))))),Seq(Assign(Var("innername"),RootApp(CallT(SVar("gen-new-name"),[],[NoAnnoList(StringQuotation1("                                      ",[QStr("iter")]))]))),Seq(Assign(Var("itname"),RootApp(CallNoArgs(SVar("gen-new-name")))),Assign(NoAnnoList(Tuple([Var("innertohadoop_var"),Var("innertohadoop_java")])),App(CallNoArgs(SVar("type-java-to-hadoop")),NoAnnoList(Op("TEMPVAR",[Var("innertype"),Var("mapiterkey")]))))))))))))))),WhereClause(Assign(Var("javacode"),NoAnnoList(StringQuotation1("                      ",[QStr("\n            "),StringEscape1("            ",Var("mapitertype")),QStr(" "),StringEscape1("                          ",Var("mapitername")),QStr(" = "),StringEscape1("                                          ",App(CallNoArgs(SVar("to-java")),Var("ref"))),QStr(";\n            ArrayList<Writable> "),StringEscape1("                                ",Var("arraylistname")),QStr(" = new ArrayList<Writable>();\n            for("),StringEscape1("                ",App(CallNoArgs(SVar("type'-to-java")),Var("innertype"))),QStr(" "),StringEscape1("                                            ",Var("mapiterkey")),QStr(" : "),StringEscape1("                                                           ",Var("mapitername")),QStr(") {\n                "),StringEscape1("                ",Var("innertohadoop_java")),QStr("\n                "),StringEscape1("                ",Var("arraylistname")),QStr(".add("),StringEscape1("                                    ",Var("innertohadoop_var")),QStr(");\n            }\n            ArrayListWritable<"),StringEscape1("                              ",Var("innertypehadoop")),QStr("> "),StringEscape1("                                                 ",Var("newname")),QStr(" = new ArrayListWritable<"),StringEscape1("                                                                                   ",Var("innertypehadoop")),QStr(">();\n            Writable"),StringEscape1("                    ",NoAnnoList(Str("\"[]\""))),QStr(" "),StringEscape1("                           ",Var("temparray")),QStr(" = new Writable"),StringEscape1("                                                     ",NoAnnoList(Str("\"[\""))),QStr(" "),StringEscape1("                                                           ",Var("arraylistname")),QStr(".size() "),StringEscape1("                                                                                  ",NoAnnoList(Str("\"]\""))),QStr(";\n            "),StringEscape1("            ",Var("arraylistname")),QStr(".toArray("),StringEscape1("                                    ",Var("temparray")),QStr(");\n            for(int "),StringEscape1("                    ",Var("itname")),QStr(" = 0; "),StringEscape1("                                  ",Var("itname")),QStr("<"),StringEscape1("                                           ",Var("temparray")),QStr(".length; "),StringEscape1("                                                               ",Var("itname")),QStr("++) {\n                "),StringEscape1("                ",Var("newname")),QStr(".add(("),StringEscape1("                               ",Var("innertypehadoop")),QStr(")"),StringEscape1("                                                 ",Var("temparray")),StringEscape1("                                                            ",NoAnnoList(Str("\"[\""))),StringEscape1("                                                                 ",Var("itname")),StringEscape1("                                                                         ",NoAnnoList(Str("\"]\""))),QStr(");\n            }\n        ")]))))])),RDefNoArgs("type-java-to-hadoop",Rule(Var("ref"),NoAnnoList(Tuple([Var("newname"),Var("javacode")])),[WhereClause(BA(CallNoArgs(SVar("is-type-dict")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("ref"))))),WhereClause(Seq(Assign(Var("newname"),RootApp(CallNoArgs(SVar("gen-new-name")))),Seq(Assign(Var("mapitername"),RootApp(CallT(SVar("gen-new-name"),[],[NoAnnoList(StringQuotation1("                                        ",[QStr("mapwritable_iter")]))]))),Seq(Assign(Var("mapiterkey"),RootApp(CallT(SVar("gen-new-name"),[],[NoAnnoList(StringQuotation1("                                       ",[QStr("mapwritable_key")]))]))),Seq(Assign(Var("mapitertype"),App(CallNoArgs(SVar("type'-to-java")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("ref"))))),Seq(Assign(Var("innertype"),App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("ref"))))),Seq(Assign(Var("innername"),RootApp(CallT(SVar("gen-new-name"),[],[NoAnnoList(StringQuotation1("                                      ",[QStr("iter")]))]))),Assign(NoAnnoList(Tuple([Var("innertohadoop_var"),Var("innertohadoop_java")])),App(CallNoArgs(SVar("type-java-to-hadoop")),NoAnnoList(Op("TEMPVAR",[Var("innertype"),Var("innername")]))))))))))),WhereClause(Assign(Var("javacode"),NoAnnoList(StringQuotation1("                      ",[QStr("\n            MapWritableHdp "),StringEscape1("                           ",Var("newname")),QStr(" = new MapWritableHdp();\n            "),StringEscape1("            ",Var("mapitertype")),QStr(" "),StringEscape1("                          ",Var("mapitername")),QStr(" = "),StringEscape1("                                          ",App(CallNoArgs(SVar("to-java")),Var("ref"))),QStr(";\n\n            for(String "),StringEscape1("                       ",Var("mapiterkey")),QStr(" : "),StringEscape1("                                      ",Var("mapitername")),QStr(".keySet()) {\n                "),StringEscape1("                ",App(CallNoArgs(SVar("type'-to-java")),Var("innertype"))),QStr(" "),StringEscape1("                                            ",Var("innername")),QStr(" = "),StringEscape1("                                                          ",Var("mapitername")),QStr(".get("),StringEscape1("                                                                            ",Var("mapiterkey")),QStr(");\n                "),StringEscape1("                ",Var("innertohadoop_java")),QStr("\n                "),StringEscape1("                ",Var("newname")),QStr(".put(new Text("),StringEscape1("                                       ",Var("mapiterkey")),QStr("), "),StringEscape1("                                                      ",Var("innertohadoop_var")),QStr(");\n            }\n        ")]))))]))])])