Module("trans/codegen/vars",[Imports([Import("include/Hadooplang"),Import("lib/editor-common.generated"),Import("trans/index"),Import("trans/types/typeof"),Import("trans/types/operators"),Import("trans/codegen/compiler"),Import("trans/codegen/types"),Import("trans/codegen/names")]),Rules([RDefNoArgs("to-java",Rule(NoAnnoList(Op("DatasetRef",[Var("varref")])),NoAnnoList(StringQuotation1("                                     ",[StringEscape1("                                     ",Var("varref")),QStr(".toString()")])),Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([NoAnnoList(Op("String",[])),App(CallNoArgs(SVar("type-type-of")),App(CallNoArgs(SVar("get-node")),Var("varref")))]))),Not(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("length")),App(CallNoArgs(SVar("get-all-dataupdates")),Var("varref"))),NoAnnoList(Int("0"))]))))))),RDefNoArgs("to-java",Rule(NoAnnoList(Op("DatasetDefStatement",[Var("key"),Var("value")])),NoAnnoList(StringQuotation1("             ",[QStr("StringBuffer "),StringEscape1("                          ",Var("key")),QStr(" = new StringBuffer("),StringEscape1("                                                   ",App(CallNoArgs(SVar("to-java")),Var("value"))),QStr(");\n        ")])),Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([NoAnnoList(Op("String",[])),App(CallNoArgs(SVar("type-type-of")),Var("value"))]))),Not(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("length")),App(CallNoArgs(SVar("get-all-dataupdates")),Var("key"))),NoAnnoList(Int("0"))]))))))),RDefNoArgs("to-java",Rule(NoAnnoList(Op("DatasetSetVar",[NoAnnoList(Op("DatasetRef",[Var("varref")])),Var("expr")])),NoAnnoList(StringQuotation1("                                                          ",[StringEscape1("                                                          ",Var("varref")),QStr(".append("),StringEscape1("                                                                          ",App(CallNoArgs(SVar("to-java")),Var("expr'"))),QStr(");\n    ")])),Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([NoAnnoList(Op("String",[])),App(CallNoArgs(SVar("type-type-of")),App(CallNoArgs(SVar("get-node")),Var("varref")))]))),Assign(Var("expr'"),App(CallT(SVar("is-stringbufferupdate"),[],[Var("varref")]),Var("expr")))))),RDefNoArgs("to-java",Rule(NoAnnoList(Op("DatasetSetVar",[NoAnnoList(Op("DatasetRef",[Var("varref")])),Var("expr")])),NoAnnoList(StringQuotation1("                                                          ",[StringEscape1("                                                          ",Var("varref")),QStr(" = new StringBuffer("),StringEscape1("                                                                                      ",App(CallNoArgs(SVar("to-java")),Var("expr"))),QStr(");")])),Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([NoAnnoList(Op("String",[])),App(CallNoArgs(SVar("type-type-of")),App(CallNoArgs(SVar("get-node")),Var("varref")))]))),Not(BA(CallT(SVar("is-stringbufferupdate"),[],[Var("varref")]),Var("expr")))))),RDefT("is-stringbufferupdate",[],[DefaultVarDec("varref")],Rule(NoAnnoList(Op("OpExp",[NoAnnoList(Op("OpPlus",[])),NoAnnoList(Op("DatasetRef",[Var("a")])),Var("b")])),Var("b"),BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([Var("a"),Var("varref")]))))),RDefT("is-stringbufferupdate",[],[DefaultVarDec("varref")],RuleNoCond(NoAnnoList(Op("OpExp",[NoAnnoList(Op("OpPlus",[])),Var("a"),Var("b")])),NoAnnoList(Op("OpExp",[NoAnnoList(Op("OpPlus",[])),App(CallT(SVar("is-stringbufferupdate"),[],[Var("varref")]),Var("a")),Var("b")]))))]),Rules([RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("DatasetRef",[Var("key")])),NoAnnoList(StringQuotation1("                                  ",[StringEscape1("                                  ",Var("key"))]))))]),Rules([RDefNoArgs("to-java",Rule(NoAnnoList(Op("DatasetDefStatement",[Var("key"),Var("value")])),NoAnnoList(StringQuotation1("                                                  ",[StringEscape1("                                                  ",Var("type")),QStr(" "),StringEscape1("                                                         ",Var("key")),QStr(" = "),StringEscape1("                                                                 ",App(CallNoArgs(SVar("to-java")),Var("value"))),QStr(";\n    ")])),Assign(Var("type"),App(CallNoArgs(SVar("type-to-java")),App(CallNoArgs(SVar("type-of")),Var("value")))))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("DatasetSetVar",[Var("varref"),Var("value")])),NoAnnoList(StringQuotation1("                                               ",[StringEscape1("                                               ",App(CallNoArgs(SVar("to-java")),Var("varref"))),QStr(" = "),StringEscape1("                                                                    ",App(CallNoArgs(SVar("to-java")),Var("value"))),QStr(";")])))),RDefNoArgs("to-java",Rule(NoAnnoList(Op("ForloopSet",[Var("vardef"),Var("expr"),Var("block")])),NoAnnoList(StringQuotation1("          ",[QStr("\n          for("),StringEscape1("              ",Var("ittype")),QStr(" "),StringEscape1("                       ",Var("name")),QStr(" : "),StringEscape1("                                ",Var("expr'")),QStr(") "),StringEscape1("                                         ",Var("block'")),QStr("\n        ")])),[WhereClause(Not(BA(CallNoArgs(SVar("is-dataset")),App(CallNoArgs(SVar("type-of")),Var("expr"))))),WhereClause(Seq(Assign(Var("name"),Var("vardef")),Seq(Assign(Var("expr'"),App(CallNoArgs(SVar("to-java")),Var("expr"))),Seq(Assign(Var("block'"),App(CallNoArgs(SVar("to-java")),Var("block"))),Assign(Var("ittype"),App(CallNoArgs(SVar("type'-to-java")),App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("expr"))))))))))]))])])