Module("trans/types/operators",[Imports([Import("include/Hadooplang"),Import("trans/types/typeof")]),Signature([Constructors([OpDecl("OpExp",FunType([ConstType(SortNoArgs("OpType")),ConstType(SortVar("a")),ConstType(SortVar("b"))],ConstType(SortNoArgs("OpExp")))),OpDecl("OpPlus",ConstType(SortNoArgs("OPType"))),OpDecl("OpMin",ConstType(SortNoArgs("OpType"))),OpDecl("OpTimes",ConstType(SortNoArgs("OpType"))),OpDecl("OpDivide",ConstType(SortNoArgs("OpType"))),OpDecl("OpModulo",ConstType(SortNoArgs("OpType"))),OpDecl("OpAnd",ConstType(SortNoArgs("OpType"))),OpDecl("OpOr",ConstType(SortNoArgs("OpType"))),OpDecl("OpGreaterThan",ConstType(SortNoArgs("OpType"))),OpDecl("OpSmallerThan",ConstType(SortNoArgs("OpType"))),OpDecl("OpEqSmallerThan",ConstType(SortNoArgs("OpType"))),OpDecl("OpEqGreaterThan",ConstType(SortNoArgs("OpType"))),OpDecl("OpEquals",ConstType(SortNoArgs("OpType")))])]),Rules([RDef("type-of-op",[],Rule(NoAnnoList(Tuple([NoAnnoList(Op("OpPlus",[])),Var("a"),Var("b")])),NoAnnoList(Op("Num",[])),BA(CallT(SVar("type-both"),[],[NoAnnoList(Op("Num",[]))]),NoAnnoList(Tuple([Var("a"),Var("b")]))))),RDef("type-of-op",[],Rule(NoAnnoList(Tuple([NoAnnoList(Op("OpPlus",[])),Var("a"),Var("b")])),NoAnnoList(Op("String",[])),BA(CallT(SVar("type-both"),[],[NoAnnoList(Op("String",[]))]),NoAnnoList(Tuple([Var("a"),Var("b")]))))),RDef("type-of-op",[],Rule(NoAnnoList(Tuple([NoAnnoList(Op("OpPlus",[])),Var("a"),Var("b")])),NoAnnoList(Op("String",[])),BA(CallT(SVar("type-oneshouldbeXotherY"),[],[NoAnnoList(Op("Num",[])),NoAnnoList(Op("String",[]))]),NoAnnoList(Tuple([Var("a"),Var("b")])))))]),Rules([RDefNoArgs("type-of-op",Rule(NoAnnoList(Tuple([NoAnnoList(Op("OpMin",[])),Var("a"),Var("b")])),NoAnnoList(Op("Num",[])),BA(CallT(SVar("type-both"),[],[NoAnnoList(Op("Num",[]))]),NoAnnoList(Tuple([Var("a"),Var("b")]))))),RDefNoArgs("type-of-op",Rule(NoAnnoList(Tuple([NoAnnoList(Op("OpTimes",[])),Var("a"),Var("b")])),NoAnnoList(Op("Num",[])),BA(CallT(SVar("type-both"),[],[NoAnnoList(Op("Num",[]))]),NoAnnoList(Tuple([Var("a"),Var("b")]))))),RDefNoArgs("type-of-op",Rule(NoAnnoList(Tuple([NoAnnoList(Op("OpDivide",[])),Var("a"),Var("b")])),NoAnnoList(Op("Num",[])),BA(CallT(SVar("type-both"),[],[NoAnnoList(Op("Num",[]))]),NoAnnoList(Tuple([Var("a"),Var("b")]))))),RDefNoArgs("type-of-op",Rule(NoAnnoList(Tuple([NoAnnoList(Op("OpModulo",[])),Var("a"),Var("b")])),NoAnnoList(Op("Num",[])),BA(CallT(SVar("type-both"),[],[NoAnnoList(Op("Num",[]))]),NoAnnoList(Tuple([Var("a"),Var("b")]))))),RDefNoArgs("type-of-op",Rule(NoAnnoList(Tuple([NoAnnoList(Op("OpGreaterThan",[])),Var("a"),Var("b")])),NoAnnoList(Op("Bool",[])),BA(CallT(SVar("type-both"),[],[NoAnnoList(Op("Num",[]))]),NoAnnoList(Tuple([Var("a"),Var("b")]))))),RDefNoArgs("type-of-op",Rule(NoAnnoList(Tuple([NoAnnoList(Op("OpSmallerThan",[])),Var("a"),Var("b")])),NoAnnoList(Op("Bool",[])),BA(CallT(SVar("type-both"),[],[NoAnnoList(Op("Num",[]))]),NoAnnoList(Tuple([Var("a"),Var("b")]))))),RDefNoArgs("type-of-op",Rule(NoAnnoList(Tuple([NoAnnoList(Op("OpEqGreaterThan",[])),Var("a"),Var("b")])),NoAnnoList(Op("Bool",[])),BA(CallT(SVar("type-both"),[],[NoAnnoList(Op("Num",[]))]),NoAnnoList(Tuple([Var("a"),Var("b")]))))),RDefNoArgs("type-of-op",Rule(NoAnnoList(Tuple([NoAnnoList(Op("OpEqSmallerThan",[])),Var("a"),Var("b")])),NoAnnoList(Op("Bool",[])),BA(CallT(SVar("type-both"),[],[NoAnnoList(Op("Num",[]))]),NoAnnoList(Tuple([Var("a"),Var("b")]))))),RDefNoArgs("type-of-op",Rule(NoAnnoList(Tuple([NoAnnoList(Op("OpAnd",[])),Var("a"),Var("b")])),NoAnnoList(Op("Bool",[])),BA(CallT(SVar("type-both"),[],[NoAnnoList(Op("Bool",[]))]),NoAnnoList(Tuple([Var("a"),Var("b")]))))),RDefNoArgs("type-of-op",Rule(NoAnnoList(Tuple([NoAnnoList(Op("OpOr",[])),Var("a"),Var("b")])),NoAnnoList(Op("Bool",[])),BA(CallT(SVar("type-both"),[],[NoAnnoList(Op("Bool",[]))]),NoAnnoList(Tuple([Var("a"),Var("b")]))))),RDefNoArgs("type-of-op",Rule(NoAnnoList(Tuple([NoAnnoList(Op("OpEquals",[])),Var("a"),Var("b")])),NoAnnoList(Op("Bool",[])),BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("type-of")),Var("a")),App(CallNoArgs(SVar("type-of")),Var("b"))])))))]),Rules([RDefNoArgs("type-of-op",Rule(As(Var("x"),NoAnnoList(Tuple([Var("op"),Var("a"),Var("b")]))),RootApp(Fail),BA(Call(SVar("debug"),[Build(NoAnnoList(Str("\" Type of op failed for \"")))]),Var("x"))))]),Rules([RDefT("type-both",[],[DefaultVarDec("desiredtype")],Rule(As(Var("x"),NoAnnoList(Tuple([Var("a"),Var("b")]))),Var("x"),Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("type-type-of")),Var("a")),Var("desiredtype")]))),BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("type-type-of")),Var("b")),Var("desiredtype")])))))),RDefT("type-oneshouldbeXotherY",[],[DefaultVarDec("desiredtypeA"),DefaultVarDec("desiredtypeB")],Rule(As(Var("x"),NoAnnoList(Tuple([Var("a"),Var("b")]))),Var("x"),LChoice(Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("type-type-of")),Var("a")),Var("desiredtypeA")]))),BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("type-type-of")),Var("b")),Var("desiredtypeB")])))),Seq(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("type-type-of")),Var("a")),Var("desiredtypeB")]))),BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("type-type-of")),Var("b")),Var("desiredtypeA")])))))))])])