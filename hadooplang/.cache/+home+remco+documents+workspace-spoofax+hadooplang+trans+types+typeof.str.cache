Module("trans/types/typeof",[Imports([Import("include/Hadooplang"),Import("trans/index"),Import("trans/inputs/inputs"),Import("trans/lib/string"),Import("trans/types/operators"),Import("lib/analysis-library.generated")]),Signature([Constructors([OpDecl("TwoType",FunType([ConstType(SortNoArgs("Type")),ConstType(SortNoArgs("Type"))],ConstType(SortNoArgs("Type")))),OpDecl("Type",FunType([ConstType(SortNoArgs("Type")),ConstType(SortNoArgs("IsHadoop"))],ConstType(SortNoArgs("Type")))),OpDecl("Bool",ConstType(SortNoArgs("Type"))),OpDecl("Num",ConstType(SortNoArgs("Type"))),OpDecl("String",ConstType(SortNoArgs("Type"))),OpDecl("List",FunType([ConstType(SortNoArgs("Innertype"))],ConstType(SortNoArgs("Type")))),OpDecl("Dict",FunType([ConstType(SortNoArgs("Innertype"))],ConstType(SortNoArgs("Type")))),OpDecl("Iterator",FunType([ConstType(SortNoArgs("Innertype"))],ConstType(SortNoArgs("Type")))),OpDecl("Unknown",ConstType(SortNoArgs("Type")))])]),Rules([RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("DatasetRef",[Var("d")])),App(CallNoArgs(SVar("type-of")),App(CallNoArgs(SVar("index-lookup")),Var("d"))))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("DictAccess",[Var("ref"),Var("index")])),NoAnnoList(Op("Type",[App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type-type-of")),Var("ref"))),NoAnnoList(Int("0"))]))))]),Rules([RDefNoArgs("type-name",RuleNoCond(NoAnnoList(Op("Type",[Var("t"),Wld])),App(CallNoArgs(SVar("type-name")),Var("t")))),RDefNoArgs("type-name",RuleNoCond(NoAnnoList(Op("Bool",[])),NoAnnoList(StringQuotation1("                              ",[QStr("Boolean")])))),RDefNoArgs("type-name",RuleNoCond(NoAnnoList(Op("Num",[])),NoAnnoList(StringQuotation1("                              ",[QStr("Number")])))),RDefNoArgs("type-name",RuleNoCond(NoAnnoList(Op("String",[])),NoAnnoList(StringQuotation1("                              ",[QStr("String")])))),RDefNoArgs("type-name",RuleNoCond(NoAnnoList(Op("List",[Var("l")])),NoAnnoList(StringQuotation1("                              ",[StringEscape1("                              ",App(CallNoArgs(SVar("type-name")),Var("l"))),QStr("-list")])))),RDefNoArgs("type-name",RuleNoCond(NoAnnoList(Op("Dict",[Var("d")])),NoAnnoList(StringQuotation1("                              ",[StringEscape1("                              ",App(CallNoArgs(SVar("type-name")),Var("d"))),QStr("-dict")])))),RDefNoArgs("type-name",RuleNoCond(NoAnnoList(Op("Iterator",[Var("i")])),NoAnnoList(StringQuotation1("                                ",[StringEscape1("                                ",App(CallNoArgs(SVar("type-name")),Var("i"))),QStr("-iterator")])))),RDefNoArgs("type-name",RuleNoCond(NoAnnoList(Op("Unknown",[])),NoAnnoList(StringQuotation1("                              ",[QStr("Unknown (bug!!!)")])))),RDefNoArgs("type-name",RuleNoCond(NoAnnoList(Op("TwoType",[Var("k"),Var("v")])),NoAnnoList(StringQuotation1("                                  ",[QStr("Key/value pair ("),StringEscape1("                                                  ",App(CallNoArgs(SVar("type-name")),Var("k"))),QStr(", "),StringEscape1("                                                                   ",App(CallNoArgs(SVar("type-name")),Var("v"))),QStr(")")])))),RDefNoArgs("type-name",Rule(Var("l"),NoAnnoList(StringQuotation1("                      ",[QStr("One of {"),StringEscape1("                              ",Var("typelist")),QStr("}")])),Seq(BA(CallNoArgs(SVar("gt")),NoAnnoList(Tuple([App(CallNoArgs(SVar("length")),Var("l")),NoAnnoList(Int("1"))]))),Assign(Var("typelist"),App(CallNoArgs(SVar("concat-strings")),App(Call(SVar("map"),[Seq(CallNoArgs(SVar("type-name")),CallNoArgs(SVar("add-comma")))]),Var("l"))))))),RDefNoArgs("type-name",Rule(Var("l"),App(CallNoArgs(SVar("type-name")),Var("l1")),Assign(NoAnnoList(ListTail([Var("l1")],Wld)),Var("l")))),RDefNoArgs("type-of-name",RuleNoCond(Var("x"),App(CallNoArgs(SVar("type-name")),App(CallNoArgs(SVar("type-of")),Var("x"))))),RDefNoArgs("type-of-name",RuleNoCond(Var("x"),App(CallNoArgs(SVar("type-name")),NoAnnoList(Op("Unknown",[])))))]),Rules([RDefNoArgs("innertype",RuleNoCond(NoAnnoList(Op("Dict",[Var("x")])),Var("x"))),RDefNoArgs("innertype",RuleNoCond(NoAnnoList(Op("List",[Var("x")])),Var("x"))),RDefNoArgs("innertype",RuleNoCond(NoAnnoList(Op("Iterator",[Var("t")])),Var("t"))),RDefNoArgs("is-rewrite",RuleNoCond(NoAnnoList(Op("RewriteRef",[Wld])),RootApp(Id))),RDefNoArgs("is-rewrite",RuleNoCond(Wld,RootApp(Fail))),RDefNoArgs("is-type-list",RuleNoCond(NoAnnoList(Op("List",[Wld])),RootApp(Id))),RDefNoArgs("is-type-list",RuleNoCond(Wld,RootApp(Fail))),RDefNoArgs("is-type-dict",RuleNoCond(NoAnnoList(Op("Dict",[Wld])),RootApp(Id))),RDefNoArgs("is-type-dict",RuleNoCond(Wld,RootApp(Fail))),RDefNoArgs("is-type-iterator",RuleNoCond(NoAnnoList(Op("Iterator",[Wld])),RootApp(Id))),RDefNoArgs("is-type-iterator",RuleNoCond(Wld,RootApp(Fail))),RDefNoArgs("is-dataset",Rule(As(Var("e"),NoAnnoList(Op("Type",[Var("datatype"),Var("dataset")]))),Var("e"),BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([Var("dataset"),NoAnnoList(Int("1"))]))))),RDefNoArgs("type-of-is-dataset",Rule(Var("e"),Var("e"),BA(CallNoArgs(SVar("is-dataset")),App(CallNoArgs(SVar("type-of")),Var("e")))))]),Rules([RDefNoArgs("type-type-of",RuleNoCond(Var("x"),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("x"))))),RDefNoArgs("type",RuleNoCond(NoAnnoList(Op("Type",[Var("x"),Wld])),Var("x"))),RDefNoArgs("type",RuleNoCond(NoAnnoList(Op("TwoType",[Var("a"),Var("b")])),NoAnnoList(Tuple([App(CallNoArgs(SVar("type")),Var("a")),App(CallNoArgs(SVar("type")),Var("b"))])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("Def",[Var("uri")])),App(CallNoArgs(SVar("type-of")),App(CallNoArgs(SVar("index-get-value")),NoAnnoList(Op("StoredNode",[Var("uri"),NoAnnoList(Tuple([]))])))))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("DatasetDef",[Wld,Var("s")])),App(CallNoArgs(SVar("type-of")),Var("s")))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("DatasetDefStatement",[Wld,Var("s")])),App(CallNoArgs(SVar("type-of")),Var("s")))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("True",[])),NoAnnoList(Op("Type",[NoAnnoList(Op("Bool",[])),NoAnnoList(Int("0"))])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("False",[])),NoAnnoList(Op("Type",[NoAnnoList(Op("Bool",[])),NoAnnoList(Int("0"))])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("TypeString",[])),NoAnnoList(Op("String",[])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("TypeNum",[])),NoAnnoList(Op("Num",[])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("TypeBoolean",[])),NoAnnoList(Op("Bool",[])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("TypeDict",[Var("t")])),NoAnnoList(Op("Dict",[App(CallNoArgs(SVar("type-of")),Var("t"))])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("TypeList",[Var("t")])),NoAnnoList(Op("List",[App(CallNoArgs(SVar("type-of")),Var("t"))])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("TypeIterator",[Var("t")])),NoAnnoList(Op("Iterator",[App(CallNoArgs(SVar("type-of")),Var("t"))])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("Num",[Wld])),NoAnnoList(Op("Type",[NoAnnoList(Op("Num",[])),NoAnnoList(Int("0"))])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("String",[Wld])),NoAnnoList(Op("Type",[NoAnnoList(Op("String",[])),NoAnnoList(Int("0"))])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("Dict",[Var("t"),Wld])),NoAnnoList(Op("Type",[NoAnnoList(Op("Dict",[App(CallNoArgs(SVar("type-of")),Var("t"))])),NoAnnoList(Int("0"))])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("List",[Var("t"),Wld])),NoAnnoList(Op("Type",[NoAnnoList(Op("List",[App(CallNoArgs(SVar("type-of")),Var("t"))])),NoAnnoList(Int("0"))])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("DictItem",[Var("k"),Var("t")])),App(CallNoArgs(SVar("type-of")),Var("t"))))]),Rules([RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("Brackets",[Var("t")])),App(CallNoArgs(SVar("type-of")),Var("t")))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("OpExp",[Var("op"),Var("a"),Var("b")])),NoAnnoList(Op("Type",[App(CallNoArgs(SVar("type-of-op")),NoAnnoList(Tuple([Var("op"),Var("a"),Var("b")]))),NoAnnoList(Int("0"))]))))]),Rules([RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("RewriterAlias",[Wld,Wld,Wld,Wld,Var("r")])),NoAnnoList(Op("Type",[App(CallNoArgs(SVar("type-of")),Var("r")),NoAnnoList(Int("0"))])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("Rewriter",[Wld,Wld,Wld,Var("block")])),App(CallNoArgs(SVar("type-of")),Var("block")))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("BlockReturn",[Wld,Var("r")])),App(CallNoArgs(SVar("type-of")),Var("r")))),RDefNoArgs("type-of",Rule(As(Var("r"),NoAnnoList(Op("Rewrite",[Var("dataset"),NoAnnoList(Op("RewriteRef",[Var("rewriter")])),Var("args")]))),NoAnnoList(Op("Type",[Var("type"),Var("ds")])),Seq(Assign(Var("type"),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),App(CallNoArgs(SVar("index-lookup")),Var("rewriter"))))),LChoice(Seq(BA(CallNoArgs(SVar("is-dataset")),App(CallNoArgs(SVar("type-of")),App(CallNoArgs(SVar("index-lookup")),Var("rewriter")))),Assign(Var("ds"),NoAnnoList(Int("1")))),Assign(Var("ds"),NoAnnoList(Int("0")))))))]),Rules([RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("MRInputSet",[Var("ref")])),App(CallNoArgs(SVar("type-of")),App(CallNoArgs(SVar("index-lookup")),Var("ref"))))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("MRInputMethod",[Var("name"),Var("args")])),App(CallNoArgs(SVar("type-of")),NoAnnoList(Op("DataInput",[Var("name")]))))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("MapReduceChain",[Wld,Wld,Var("t3")])),App(CallNoArgs(SVar("type-of")),Var("t3")))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("MRMapper",[NoAnnoList(Op("MapperRef",[Var("m")]))])),App(CallNoArgs(SVar("type-of")),App(CallNoArgs(SVar("index-lookup")),Var("m"))))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("MRReducer",[NoAnnoList(Op("ReducerRef",[Var("r")]))])),App(CallNoArgs(SVar("type-of")),App(CallNoArgs(SVar("index-lookup")),Var("r"))))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("MapReduceKey",[Var("t"),Wld])),NoAnnoList(Op("Type",[App(CallNoArgs(SVar("type-of")),Var("t")),NoAnnoList(Int("0"))])))),RDefNoArgs("type-of",RuleNoCond(As(Var("m"),NoAnnoList(Op("Mapper",[Wld,Wld]))),App(CallNoArgs(SVar("type-of-by-write")),Var("m")))),RDefNoArgs("type-of",RuleNoCond(As(Var("r"),NoAnnoList(Op("Reducer",[Wld,Wld]))),App(CallNoArgs(SVar("type-of-by-write")),Var("r")))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("RewriterParameter",[Var("t"),Wld])),NoAnnoList(Op("Type",[App(CallNoArgs(SVar("type-of")),Var("t")),NoAnnoList(Int("0"))])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("Parameter",[Var("t"),Wld])),NoAnnoList(Op("Type",[App(CallNoArgs(SVar("type-of")),Var("t")),NoAnnoList(Int("0"))])))),RDefNoArgs("type-of",Rule(NoAnnoList(Op("ReduceIterator",[Var("t"),Var("ds")])),NoAnnoList(Op("Type",[App(CallNoArgs(SVar("type-of")),Var("t")),NoAnnoList(Int("1"))])),BA(CallNoArgs(SVar("is-type-iterator")),App(CallNoArgs(SVar("type-of")),Var("t"))))),RDefNoArgs("type-of",Rule(As(Var("w"),NoAnnoList(Op("write",[Var("key"),Var("value")]))),Var("t"),[WhereClause(Seq(LChoice(Seq(BA(CallNoArgs(SVar("is-type-iterator")),App(CallNoArgs(SVar("type-type-of")),Var("key"))),Assign(Var("type-key"),NoAnnoList(Op("List",[App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type-type-of")),Var("key")))])))),Assign(Var("type-key"),App(CallNoArgs(SVar("type-type-of")),Var("key")))),LChoice(Seq(BA(CallNoArgs(SVar("is-type-iterator")),App(CallNoArgs(SVar("type-type-of")),Var("value"))),Assign(Var("type-value"),NoAnnoList(Op("List",[App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type-type-of")),Var("value")))])))),Assign(Var("type-value"),App(CallNoArgs(SVar("type-type-of")),Var("value")))))),WhereClause(Assign(Var("t"),NoAnnoList(Op("Type",[NoAnnoList(Op("List",[NoAnnoList(Op("TwoType",[Var("type-key"),Var("type-value")]))])),NoAnnoList(Int("1"))]))))])),RDefNoArgs("type-of-by-write",Rule(Var("t"),App(CallNoArgs(SVar("type-of")),Var("write")),Assign(NoAnnoList(ListTail([Var("write")],Wld)),App(CallNoArgs(SVar("get-all-writes")),Var("t"))))),RDefNoArgs("get-all-writes",RuleNoCond(Var("subtree"),App(Call(SVar("collect-all"),[CallNoArgs(SVar("get-write")),CallNoArgs(SVar("conc"))]),Var("subtree")))),RDefNoArgs("get-write",RuleNoCond(As(Var("w"),NoAnnoList(Op("write",[Wld,Wld]))),Var("w")))]),Rules([RDefNoArgs("type-of",Rule(NoAnnoList(Op("ForloopDict",[Wld,Var("k"),Var("set"),Wld])),NoAnnoList(Op("Type",[App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("set")))),Var("ds")])),LChoice(Seq(BA(CallNoArgs(SVar("is-dataset")),App(CallNoArgs(SVar("type-of")),Var("set"))),Assign(Var("ds"),NoAnnoList(Int("1")))),Assign(Var("ds"),NoAnnoList(Int("0")))))),RDefNoArgs("type-of",Rule(NoAnnoList(Op("ForloopSet",[Wld,Var("set"),Wld])),NoAnnoList(Op("Type",[App(CallNoArgs(SVar("innertype")),App(CallNoArgs(SVar("type")),App(CallNoArgs(SVar("type-of")),Var("set")))),Var("ds")])),LChoice(Seq(BA(CallNoArgs(SVar("is-dataset")),App(CallNoArgs(SVar("type-of")),Var("set"))),Assign(Var("ds"),NoAnnoList(Int("1")))),Assign(Var("ds"),NoAnnoList(Int("0")))))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("ForKeyDef",[Wld])),App(CallNoArgs(SVar("type-of")),NoAnnoList(Op("String",[NoAnnoList(Str("\"\""))])))))]),Rules([RDefNoArgs("type-of",Rule(Var("x"),RootApp(Fail),BA(Call(SVar("debug"),[Build(NoAnnoList(Str("\"ERROR, Type-of-failed: \"")))]),Var("x"))))])])