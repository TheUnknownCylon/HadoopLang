definition
module grammar/Types

%% Variable types free to be chosen by user

exports
  context-free syntax
    "String"                -> Type {cons("TypeString")}
    "Number"                -> Type {cons("TypeNum")}        %% double: xx.yy
    "Boolean"               -> Type {cons("TypeBoolean")}
    "Dict" "(" Type ")"     -> Type {cons("TypeDict")}
    "List" "(" Type ")"     -> Type {cons("TypeList")}
    "Iterator" "(" Type ")" -> Type {cons("TypeIterator")}

module grammar/Expressions

imports
    lexical/Identifiers
    grammar/Types

exports
  context-free syntax
    
    %% Expressions
    NUM                     -> Exp  {cons("Num")}
    STRING                  -> Exp  {cons("String")}
    DatasetRef              -> Exp
   
    ID              -> DatasetRef  {cons("DatasetRef")}
    DatasetRef "[" Exp "]"  -> DictAccess  {cons("DictAccess")}

  context-free syntax
    "True"                  -> Exp {cons("True")}
    "False"                 -> Exp {cons("False")}


  context-free syntax
    %% Dicts and lists should have explicit types
    Type "{" {DictItem ","}* "}" -> Exp  {cons("Dict")}
    Type "[" {Exp ","}* "]"      -> Exp  {cons("List")}
    Exp ":" Exp                  -> DictItem {cons("DictItem")}


  context-free syntax
    "," {Exp ","}*                -> Params {cons("Params")}
                                  -> Params {cons("Params")}
    %%Datavar@ID -> DatavarRef {"DatavarRef"}

  context-free syntax
    DictAccess              -> Exp {cons("ExpDictaccess"), left, prefer}
    "(" Exp ")"             -> Exp {cons("Brackets")}
    
    Exp "+" Exp             -> Exp {cons("Plus"),   left} %% Num
    Exp "*" Exp             -> Exp {cons("Times"),  left} %% Num
    Exp "-" Exp             -> Exp {cons("Min"),    left} %% Num
    Exp "/" Exp             -> Exp {cons("Divide"), left} %% Num
    Exp "%" Exp             -> Exp {cons("Modulo"), left} %% Num
    
    Exp "&&" Exp            -> Exp {cons("And"),    left} %% Bool
    Exp "||" Exp            -> Exp {cons("Or"),     left} %% Bool
    
    Exp "==" Exp            -> Exp {cons("Equals"), left} %% Bool
    
    Exp ">"  Exp            -> Exp {cons("GreaterThan"),   left} %% Bool
    Exp "<"  Exp            -> Exp {cons("SmallerThan"),   left} %% Bool
    Exp ">=" Exp            -> Exp {cons("EqSmallerThan"), left} %% Bool
    Exp "<=" Exp            -> Exp {cons("EqGreaterThan"), left} %% Bool
    
   
  context-free priorities
    { left:
      Exp "[" Exp "]" -> Exp
    } > { non-assoc:
      Exp "%" Exp -> Exp
    } > { left:
      Exp "/" Exp -> Exp
      Exp "*" Exp -> Exp 
    } > { left:
      Exp "+" Exp -> Exp
      Exp "-" Exp -> Exp
    } > { non-assoc:
      Exp ">"  Exp -> Exp
      Exp "<"  Exp -> Exp
      Exp ">=" Exp -> Exp
      Exp "<=" Exp -> Exp
    } > { left:
      Exp "==" Exp -> Exp
    } > { left:
      Exp "&&" Exp -> Exp
    } > { left:
      Exp "||" Exp -> Exp
    }

module layout/layout

imports lexical/Identifiers

exports
  lexical syntax
    [\ \t\n\r] -> LAYOUT
    
  lexical syntax
    [\*]                             -> CommentChar
    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
    
  lexical restrictions
    %% Ensure greedy matching for lexicals
    CommentChar   -/- [\/]

    %% Backslash chars in strings may not be followed by "   
    BackSlashChar -/- [\"]

  %% Ensure greedy matching for comments
  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/].[\/]
    LAYOUT? -/- [\/].[\*]

module lexical/Keywords

exports
    
    lexical syntax
    	"import"   -> KeyWord
        "module"   -> KeyWord
        "store"    -> KeyWord

        "from"     -> KeyWord
        "with"     -> KeyWord
        "where"    -> KeyWord
        "write"    -> KeyWord

        "List"     -> KeyWord
        "Dict"     -> KeyWord
        "String"   -> KeyWord
        "Number"   -> KeyWord
        "Boolean"  -> KeyWord
        
        
        "map"      -> KeyWord
        "reduce"   -> KeyWord
        "for"      -> KeyWord
        "store"    -> KeyWord
        "in"       -> KeyWord
        "to"       -> KeyWord
        
        "nowarning" -> KeyWord
        
        "True"     -> KeyWord
        "False"    -> KeyWord
        
        "mapper"   -> KeyWord
        "reducer"  -> KeyWord
        "rewriter" -> KeyWord
        
        "_"        -> KeyWord

module lexical/Identifiers

imports
    lexical/Keywords

exports
  lexical syntax
  
    [a-zA-Z][a-zA-Z0-9]* -> ID
    "-"? [0-9]+          -> NUM
    [a-zA-Z0-9\_]*       -> JAVACLASS 
                         -> EOF
    
    "\"" StringChar* "\"" -> STRING
    ~[\"\n]               -> StringChar
    "\\\""                -> StringChar
    BackSlashChar         -> StringChar
    "\\"                  -> BackSlashChar
  

  lexical restrictions
    NUM           -/- [0-9]
    ID            -/- [a-zA-Z0-9\_]
    
    %% EOF may not be followed by any char
    EOF           -/- ~[]
  
  lexical syntax
    KeyWord             -> ID{reject}

module Hadooplang

imports
    lexical/Identifiers
    layout/layout
    grammar/Expressions
    grammar/Types

exports

  context-free start-symbols
    Start

  context-free syntax
  
    "module" ID Import* RootStatement* -> Start {cons("Module"), scope(Dataset, Datavar, Import, Rewriter, Mapper, Reducer)}
    
    ImportPart";"                            -> Import {cons("Import")}
    "from" ID "import" "mapper"   MapperRef   -> ImportPart {cons("OneImportMapper")}
    "from" ID "import" "reducer"  ReducerRef  -> ImportPart {cons("OneImportReducer")}
    "from" ID "import" "rewriter" RewriteRef  -> ImportPart {cons("OneImportRewriter")}
    
    ID     -> ReducerRef {cons("ReducerRef")}
    ID    -> RewriteRef {cons("RewriteRef")}
    ID      -> MapperRef  {cons("MapperRef")}
    
    "rewrite" Exp "with" RewriteRef Params -> Exp {cons("Rewrite"), prefer}

    ID ":=" MapReduceChain ";" -> RootStatement {cons("DatasetDef")}
    "store" ID ";"         -> RootStatement {cons("Store")} 

    Rewriter                       -> RootStatement
    Mapper                         -> RootStatement
    Reducer                        -> RootStatement
    
    Statement                      -> MapReduceStatement
    "write" Exp ":" Exp ";"        -> Statement{cons("write")}


    MRInput "->" MRMapper "->" MRReducer -> MapReduceChain {cons("MapReduceChain")} 
    "input" ID "(" {Exp ","}* ")"        -> MRInput   {cons("MRInputMethod")}
    "input" ID                   -> MRInput   {cons("MRInputSet")}
    "map" "with" MapperRef               -> MRMapper  {cons("MRMapper")}
    "reduce" "with" ReducerRef           -> MRReducer {cons("MRReducer")}

    "{" Statement* "}"                   -> Block{cons("Block"), scope(Dataset, Datavar)}
    "{" MapReduceStatement* "}"          -> BlockMR{cons("BlockMR"), scope(Dataset, Datavar, Mapper)} 
    "{" Statement* "return" Exp ";" "}"  -> BlockReturn{cons("BlockReturn"), scope(Dataset, Datavar)} 


  context-free syntax
    Type ID     -> RewriterParameter{cons("RewriterParameter")}
    Type ID     -> Parameter        {cons("Parameter")}
    "," Type ID -> CommaParameter   {cons("Parameter")}
    
    Type ID -> ReduceIterator {cons("ReduceIterator")}

    "mapper"   ID  MapInner -> Mapper{cons("Mapper"), scope(Dataset, Datavar, Rewriter, Mapper, Reducer)}
    "reducer"  ID RedInner -> Reducer{cons("Reducer"), scope(Dataset, Datavar, Rewriter, Mapper, Reducer)}

    ":" MRKey ":" Parameter BlockMR      -> MapInner{cons("MapInner"), scope(Dataset, Datavar, Rewriter, Mapper, Reducer)}
    ":" MRKey ":" ReduceIterator BlockMR -> RedInner{cons("RedInner"), scope(Dataset, Datavar, Rewriter, Mapper, Reducer)}
    

    "rewriter" ID RewriterParameter CommaParameter* BlockReturn
                                            -> Rewriter {cons("Rewriter"), scope(Dataset, Datavar)}

    "rewriter" ID RewriterParameter CommaParameter* "alias" {JAVACLASS "."}* "returns" Type
                                            -> Rewriter {cons("RewriterAlias"), scope(Dataset, Datavar)}

    Type ID -> MRKey      {cons("MapReduceKey")}

 
  context-free syntax   
    %% Statements
    ID ":=" Exp ";"        -> Statement  {cons("DatasetDefStatement")}
    DatasetRef "=" Exp ";"          -> Statement  {cons("DatasetSetVar")}
    DatasetRef"[""]" "=" Exp ";"    -> Statement  {cons("ListAddItem")}
    DictAccess "=" Exp ";" -> Statement  {cons("ListDictSetItem")}

    If                        -> Statement
    
    %%enforce a new scope for for-loops. 
    LoopStatement             -> Statement {cons("loop"), scope(Dataset, Datavar)}
    Block                     -> LoopBlock {cons("loopblock"), scope(Dataset, Datavar)}

    
    "for" ID "in" Exp LoopBlock               -> LoopStatement{cons("ForloopSet"), scope(Dataset, Datavar)}
    "for" ForKeyDef ":" ID "in" Exp LoopBlock -> LoopStatement{cons("ForloopDict"), scope(Dataset, Datavar)}

    %%for loops with filter option
    "for" ID "in" Exp "where" "(" Exp ")" LoopBlock                -> LoopStatement{cons("ForloopSet"), scope(Dataset, Datavar)}
    "for" ForKeyDef ":" ID "in" Exp  "where" "(" Exp ")" LoopBlock -> LoopStatement{cons("ForloopDict"), scope(Dataset, Datavar)}


    ID                      -> ForKeyDef{cons("ForKeyDef")}

    
    "if" "(" Exp ")" Block IfElse? -> If{cons("If")}
    "else" Block                   -> IfElse{cons("IfElse")}