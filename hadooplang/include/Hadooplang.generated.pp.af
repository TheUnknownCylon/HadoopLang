PP-Table([PP-Entry(Path1("TypeString"),[FBOX(KW,S("\"String\""))]),PP-Entry(Path1("TypeNum"),[FBOX(KW,S("\"Number\""))]),PP-Entry(Path1("TypeBoolean"),[FBOX(KW,S("\"Boolean\""))]),PP-Entry(Path1("TypeDict"),[FBOX(KW,S("\"Dict\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("TypeList"),[FBOX(KW,S("\"List\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("TypeIterator"),[FBOX(KW,S("\"Iterator\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("Num"),[Arg("1")]),PP-Entry(Path1("String"),[Arg("1")]),PP-Entry(Path1("DatasetRef"),[Arg("1")]),PP-Entry(Path1("DictAccess"),[Arg("1"),FBOX(KW,S("\"[\"")),Arg("2"),FBOX(KW,S("\"]\""))]),PP-Entry(Path1("True"),[FBOX(KW,S("\"True\""))]),PP-Entry(Path1("False"),[FBOX(KW,S("\"False\""))]),PP-Entry(Path1("Dict"),[Arg("1"),FBOX(KW,S("\"{\"")),Arg("2"),FBOX(KW,S("\"}\""))]),PP-Entry(Path("Dict",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("List"),[Arg("1"),FBOX(KW,S("\"[\"")),Arg("2"),FBOX(KW,S("\"]\""))]),PP-Entry(Path("List",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("DictItem"),[Arg("1"),FBOX(KW,S("\":\"")),Arg("2")]),PP-Entry(Path1("Params"),V([],[H([],[FBOX(KW,S("\",\""))]),Arg("1")])),PP-Entry(Path("Params",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("Params"),[]),PP-Entry(Path1("ExpDictaccess"),[Arg("1")]),PP-Entry(Path1("Brackets"),[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("Plus"),[Arg("1"),FBOX(KW,S("\"+\"")),Arg("2")]),PP-Entry(Path1("Times"),[Arg("1"),FBOX(KW,S("\"*\"")),Arg("2")]),PP-Entry(Path1("Min"),[Arg("1"),FBOX(KW,S("\"-\"")),Arg("2")]),PP-Entry(Path1("Divide"),[Arg("1"),FBOX(KW,S("\"/\"")),Arg("2")]),PP-Entry(Path1("Modulo"),[Arg("1"),FBOX(KW,S("\"%\"")),Arg("2")]),PP-Entry(Path1("And"),[Arg("1"),FBOX(KW,S("\"&&\"")),Arg("2")]),PP-Entry(Path1("Or"),[Arg("1"),FBOX(KW,S("\"||\"")),Arg("2")]),PP-Entry(Path1("Equals"),[Arg("1"),FBOX(KW,S("\"==\"")),Arg("2")]),PP-Entry(Path1("GreaterThan"),[Arg("1"),FBOX(KW,S("\">\"")),Arg("2")]),PP-Entry(Path1("SmallerThan"),[Arg("1"),FBOX(KW,S("\"<\"")),Arg("2")]),PP-Entry(Path1("EqSmallerThan"),[Arg("1"),FBOX(KW,S("\">=\"")),Arg("2")]),PP-Entry(Path1("EqGreaterThan"),[Arg("1"),FBOX(KW,S("\"<=\"")),Arg("2")]),PP-Entry(Path1("Module"),[FBOX(KW,S("\"module\"")),Arg("1"),Arg("2"),Arg("3")]),PP-Entry(Path("Module",[selector("2","iter-star")]),[Arg("1")]),PP-Entry(Path("Module",[selector("3","iter-star")]),[Arg("1")]),PP-Entry(Path1("Import"),[Arg("1"),FBOX(KW,S("\";\""))]),PP-Entry(Path1("OneImportMapper"),[FBOX(KW,S("\"from\"")),Arg("1"),FBOX(KW,S("\"import\"")),FBOX(KW,S("\"mapper\"")),Arg("2")]),PP-Entry(Path1("OneImportReducer"),[FBOX(KW,S("\"from\"")),Arg("1"),FBOX(KW,S("\"import\"")),FBOX(KW,S("\"reducer\"")),Arg("2")]),PP-Entry(Path1("OneImportRewriter"),[FBOX(KW,S("\"from\"")),Arg("1"),FBOX(KW,S("\"import\"")),FBOX(KW,S("\"rewriter\"")),Arg("2")]),PP-Entry(Path1("ReducerRef"),[Arg("1")]),PP-Entry(Path1("RewriteRef"),[Arg("1")]),PP-Entry(Path1("MapperRef"),[Arg("1")]),PP-Entry(Path1("Rewrite"),[FBOX(KW,S("\"rewrite\"")),Arg("1"),FBOX(KW,S("\"with\"")),Arg("2"),Arg("3")]),PP-Entry(Path1("DatasetDef"),[Arg("1"),FBOX(KW,S("\":=\"")),Arg("2"),FBOX(KW,S("\";\""))]),PP-Entry(Path1("Store"),[FBOX(KW,S("\"store\"")),Arg("1"),FBOX(KW,S("\";\""))]),PP-Entry(Path1("write"),[FBOX(KW,S("\"write\"")),Arg("1"),FBOX(KW,S("\":\"")),Arg("2"),FBOX(KW,S("\";\""))]),PP-Entry(Path1("MapReduceChain"),[Arg("1"),FBOX(KW,S("\"->\"")),Arg("2"),FBOX(KW,S("\"->\"")),Arg("3")]),PP-Entry(Path1("MRInputMethod"),[FBOX(KW,S("\"input\"")),Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path("MRInputMethod",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("MRInputSet"),[FBOX(KW,S("\"input\"")),Arg("1")]),PP-Entry(Path1("MRMapper"),[FBOX(KW,S("\"map\"")),FBOX(KW,S("\"with\"")),Arg("1")]),PP-Entry(Path1("MRReducer"),[FBOX(KW,S("\"reduce\"")),FBOX(KW,S("\"with\"")),Arg("1")]),PP-Entry(Path1("Block"),V([],[[V([SOpt(VS,"2")],[FBOX(KW,S("\"{\"")),Arg("1")])],FBOX(KW,S("\"}\""))])),PP-Entry(Path("Block",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("BlockMR"),V([],[[V([SOpt(VS,"2")],[FBOX(KW,S("\"{\"")),Arg("1")])],FBOX(KW,S("\"}\""))])),PP-Entry(Path("BlockMR",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("BlockReturn"),[FBOX(KW,S("\"{\"")),Arg("1"),FBOX(KW,S("\"return\"")),Arg("2"),FBOX(KW,S("\";\"")),FBOX(KW,S("\"}\""))]),PP-Entry(Path("BlockReturn",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("RewriterParameter"),[Arg("1"),Arg("2")]),PP-Entry(Path1("Parameter"),[Arg("1"),Arg("2")]),PP-Entry(Path1("Parameter"),[FBOX(KW,S("\",\"")),Arg("1"),Arg("2")]),PP-Entry(Path1("ReduceIterator"),[Arg("1"),Arg("2")]),PP-Entry(Path1("Mapper"),[FBOX(KW,S("\"mapper\"")),Arg("1"),Arg("2")]),PP-Entry(Path1("Reducer"),[FBOX(KW,S("\"reducer\"")),Arg("1"),Arg("2")]),PP-Entry(Path1("MapInner"),[FBOX(KW,S("\":\"")),Arg("1"),FBOX(KW,S("\":\"")),Arg("2"),Arg("3")]),PP-Entry(Path1("RedInner"),[FBOX(KW,S("\":\"")),Arg("1"),FBOX(KW,S("\":\"")),Arg("2"),Arg("3")]),PP-Entry(Path1("Rewriter"),[FBOX(KW,S("\"rewriter\"")),Arg("1"),Arg("2"),Arg("3"),Arg("4")]),PP-Entry(Path("Rewriter",[selector("3","iter-star")]),[Arg("1")]),PP-Entry(Path1("RewriterAlias"),[FBOX(KW,S("\"rewriter\"")),Arg("1"),Arg("2"),Arg("3"),FBOX(KW,S("\"alias\"")),Arg("4"),FBOX(KW,S("\"returns\"")),Arg("5")]),PP-Entry(Path("RewriterAlias",[selector("3","iter-star")]),[Arg("1")]),PP-Entry(Path("RewriterAlias",[selector("4","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\".\""))]),PP-Entry(Path1("MapReduceKey"),[Arg("1"),Arg("2")]),PP-Entry(Path1("DatasetDefStatement"),[Arg("1"),FBOX(KW,S("\":=\"")),Arg("2"),FBOX(KW,S("\";\""))]),PP-Entry(Path1("DatasetSetVar"),[Arg("1"),FBOX(KW,S("\"=\"")),Arg("2"),FBOX(KW,S("\";\""))]),PP-Entry(Path1("ListAddItem"),[Arg("1"),FBOX(KW,S("\"[\"")),FBOX(KW,S("\"]\"")),FBOX(KW,S("\"=\"")),Arg("2"),FBOX(KW,S("\";\""))]),PP-Entry(Path1("ListDictSetItem"),[Arg("1"),FBOX(KW,S("\"=\"")),Arg("2"),FBOX(KW,S("\";\""))]),PP-Entry(Path1("loop"),[Arg("1")]),PP-Entry(Path1("loopblock"),[Arg("1")]),PP-Entry(Path1("ForloopSet"),[FBOX(KW,S("\"for\"")),Arg("1"),FBOX(KW,S("\"in\"")),Arg("2"),Arg("3")]),PP-Entry(Path1("ForloopDict"),[FBOX(KW,S("\"for\"")),Arg("1"),FBOX(KW,S("\":\"")),Arg("2"),FBOX(KW,S("\"in\"")),Arg("3"),Arg("4")]),PP-Entry(Path1("ForloopSet"),[FBOX(KW,S("\"for\"")),Arg("1"),FBOX(KW,S("\"in\"")),Arg("2"),FBOX(KW,S("\"where\"")),FBOX(KW,S("\"(\"")),Arg("3"),FBOX(KW,S("\")\"")),Arg("4")]),PP-Entry(Path1("ForloopDict"),[FBOX(KW,S("\"for\"")),Arg("1"),FBOX(KW,S("\":\"")),Arg("2"),FBOX(KW,S("\"in\"")),Arg("3"),FBOX(KW,S("\"where\"")),FBOX(KW,S("\"(\"")),Arg("4"),FBOX(KW,S("\")\"")),Arg("5")]),PP-Entry(Path1("ForKeyDef"),[Arg("1")]),PP-Entry(Path1("If"),[FBOX(KW,S("\"if\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\"")),Arg("2"),Arg("3")]),PP-Entry(Path("If",[selector("3","opt")]),[Arg("1")]),PP-Entry(Path1("IfElse"),[FBOX(KW,S("\"else\"")),Arg("1")])])