
regular tree grammar
  start Start
  productions
    OptIfElse0                    -> <some>(IfElse)
    OptIfElse0                    -> <none>()
    ListStarOfJAVACLASS0          -> ListPlusOfJAVACLASS0
    ListStarOfJAVACLASS0          -> <nil>()
    ListStarOfJAVACLASS0          -> <conc>(ListStarOfJAVACLASS0,ListStarOfJAVACLASS0)
    ListPlusOfJAVACLASS0          -> <conc>(ListStarOfJAVACLASS0,ListPlusOfJAVACLASS0)
    ListPlusOfJAVACLASS0          -> <conc>(ListPlusOfJAVACLASS0,ListStarOfJAVACLASS0)
    ListPlusOfJAVACLASS0          -> <conc>(ListPlusOfJAVACLASS0,ListPlusOfJAVACLASS0)
    ListPlusOfJAVACLASS0          -> <cons>(JAVACLASS,ListStarOfJAVACLASS0)
    ListStarOfCommaParameter0     -> ListPlusOfCommaParameter0
    ListStarOfCommaParameter0     -> <nil>()
    ListStarOfCommaParameter0     -> <conc>(ListStarOfCommaParameter0,ListStarOfCommaParameter0)
    ListPlusOfCommaParameter0     -> <conc>(ListStarOfCommaParameter0,ListPlusOfCommaParameter0)
    ListPlusOfCommaParameter0     -> <conc>(ListPlusOfCommaParameter0,ListStarOfCommaParameter0)
    ListPlusOfCommaParameter0     -> <conc>(ListPlusOfCommaParameter0,ListPlusOfCommaParameter0)
    ListPlusOfCommaParameter0     -> <cons>(CommaParameter,ListStarOfCommaParameter0)
    ListStarOfStatement0          -> ListPlusOfStatement0
    ListStarOfStatement0          -> <nil>()
    ListStarOfStatement0          -> <conc>(ListStarOfStatement0,ListStarOfStatement0)
    ListPlusOfStatement0          -> <conc>(ListStarOfStatement0,ListPlusOfStatement0)
    ListPlusOfStatement0          -> <conc>(ListPlusOfStatement0,ListStarOfStatement0)
    ListPlusOfStatement0          -> <conc>(ListPlusOfStatement0,ListPlusOfStatement0)
    ListPlusOfStatement0          -> <cons>(Statement,ListStarOfStatement0)
    ListStarOfMapReduceStatement0 -> ListPlusOfMapReduceStatement0
    ListStarOfMapReduceStatement0 -> <nil>()
    ListStarOfMapReduceStatement0 -> <conc>(ListStarOfMapReduceStatement0,ListStarOfMapReduceStatement0)
    ListPlusOfMapReduceStatement0 -> <conc>(ListStarOfMapReduceStatement0,ListPlusOfMapReduceStatement0)
    ListPlusOfMapReduceStatement0 -> <conc>(ListPlusOfMapReduceStatement0,ListStarOfMapReduceStatement0)
    ListPlusOfMapReduceStatement0 -> <conc>(ListPlusOfMapReduceStatement0,ListPlusOfMapReduceStatement0)
    ListPlusOfMapReduceStatement0 -> <cons>(MapReduceStatement,ListStarOfMapReduceStatement0)
    ListStarOfExp0                -> ListPlusOfExp0
    ListStarOfExp0                -> <nil>()
    ListStarOfExp0                -> <conc>(ListStarOfExp0,ListStarOfExp0)
    ListPlusOfExp0                -> <conc>(ListStarOfExp0,ListPlusOfExp0)
    ListPlusOfExp0                -> <conc>(ListPlusOfExp0,ListStarOfExp0)
    ListPlusOfExp0                -> <conc>(ListPlusOfExp0,ListPlusOfExp0)
    ListPlusOfExp0                -> <cons>(Exp,ListStarOfExp0)
    ListStarOfRootStatement0      -> ListPlusOfRootStatement0
    ListStarOfRootStatement0      -> <nil>()
    ListStarOfRootStatement0      -> <conc>(ListStarOfRootStatement0,ListStarOfRootStatement0)
    ListPlusOfRootStatement0      -> <conc>(ListStarOfRootStatement0,ListPlusOfRootStatement0)
    ListPlusOfRootStatement0      -> <conc>(ListPlusOfRootStatement0,ListStarOfRootStatement0)
    ListPlusOfRootStatement0      -> <conc>(ListPlusOfRootStatement0,ListPlusOfRootStatement0)
    ListPlusOfRootStatement0      -> <cons>(RootStatement,ListStarOfRootStatement0)
    ListStarOfImport0             -> ListPlusOfImport0
    ListStarOfImport0             -> <nil>()
    ListStarOfImport0             -> <conc>(ListStarOfImport0,ListStarOfImport0)
    ListPlusOfImport0             -> <conc>(ListStarOfImport0,ListPlusOfImport0)
    ListPlusOfImport0             -> <conc>(ListPlusOfImport0,ListStarOfImport0)
    ListPlusOfImport0             -> <conc>(ListPlusOfImport0,ListPlusOfImport0)
    ListPlusOfImport0             -> <cons>(Import,ListStarOfImport0)
    ListStarOfDictItem0           -> ListPlusOfDictItem0
    ListStarOfDictItem0           -> <nil>()
    ListStarOfDictItem0           -> <conc>(ListStarOfDictItem0,ListStarOfDictItem0)
    ListPlusOfDictItem0           -> <conc>(ListStarOfDictItem0,ListPlusOfDictItem0)
    ListPlusOfDictItem0           -> <conc>(ListPlusOfDictItem0,ListStarOfDictItem0)
    ListPlusOfDictItem0           -> <conc>(ListPlusOfDictItem0,ListPlusOfDictItem0)
    ListPlusOfDictItem0           -> <cons>(DictItem,ListStarOfDictItem0)
    ListStarOfStringChar0         -> <string>
    ListPlusOfStringChar0         -> <string>
    OptLit0                       -> <string>
    IfElse                        -> IfElse(Block)
    If                            -> If(Exp,Block,OptIfElse0)
    ForKeyDef                     -> ForKeyDef(ID)
    LoopStatement                 -> ForloopDict(ForKeyDef,ID,Exp,Exp,LoopBlock)
    LoopStatement                 -> ForloopSet(ID,Exp,Exp,LoopBlock)
    LoopStatement                 -> ForloopDict(ForKeyDef,ID,Exp,LoopBlock)
    LoopStatement                 -> ForloopSet(ID,Exp,LoopBlock)
    LoopBlock                     -> loopblock(Block)
    Statement                     -> loop(LoopStatement)
    Statement                     -> If
    Statement                     -> ListDictSetItem(DictAccess,Exp)
    Statement                     -> ListAddItem(DatasetRef,Exp)
    Statement                     -> DatasetSetVar(DatasetRef,Exp)
    Statement                     -> DatasetDefStatement(ID,Exp)
    MRKey                         -> MapReduceKey(Type,ID)
    Rewriter                      -> RewriterAlias(ID,RewriterParameter,ListStarOfCommaParameter0,ListStarOfJAVACLASS0,Type)
    Rewriter                      -> Rewriter(ID,RewriterParameter,ListStarOfCommaParameter0,BlockReturn)
    RedInner                      -> RedInner(MRKey,ReduceIterator,BlockMR)
    MapInner                      -> MapInner(MRKey,Parameter,BlockMR)
    Reducer                       -> Reducer(ID,RedInner)
    Mapper                        -> Mapper(ID,MapInner)
    ReduceIterator                -> ReduceIterator(Type,ID)
    CommaParameter                -> Parameter(Type,ID)
    Parameter                     -> Parameter(Type,ID)
    RewriterParameter             -> RewriterParameter(Type,ID)
    BlockReturn                   -> BlockReturn(ListStarOfStatement0,Exp)
    BlockMR                       -> BlockMR(ListStarOfMapReduceStatement0)
    Block                         -> Block(ListStarOfStatement0)
    MRReducer                     -> MRReducer(ReducerRef)
    MRMapper                      -> MRMapper(MapperRef)
    MRInput                       -> MRInputSet(ID)
    MRInput                       -> MRInputMethod(ID,ListStarOfExp0)
    MapReduceChain                -> MapReduceChain(MRInput,MRMapper,MRReducer)
    Statement                     -> write(Exp,Exp)
    MapReduceStatement            -> Statement
    RootStatement                 -> Reducer
    RootStatement                 -> Mapper
    RootStatement                 -> Rewriter
    RootStatement                 -> Store(ID)
    RootStatement                 -> DatasetDef(ID,MapReduceChain)
    Exp                           -> Rewrite(Exp,RewriteRef,Params)
    MapperRef                     -> MapperRef(ID)
    RewriteRef                    -> RewriteRef(ID)
    ReducerRef                    -> ReducerRef(ID)
    ImportPart                    -> OneImportRewriter(ID,RewriteRef)
    ImportPart                    -> OneImportReducer(ID,ReducerRef)
    ImportPart                    -> OneImportMapper(ID,MapperRef)
    Import                        -> Import(ImportPart)
    Start                         -> Module(ID,ListStarOfImport0,ListStarOfRootStatement0)
    Exp                           -> EqGreaterThan(Exp,Exp)
    Exp                           -> EqSmallerThan(Exp,Exp)
    Exp                           -> SmallerThan(Exp,Exp)
    Exp                           -> GreaterThan(Exp,Exp)
    Exp                           -> Equals(Exp,Exp)
    Exp                           -> Or(Exp,Exp)
    Exp                           -> And(Exp,Exp)
    Exp                           -> Modulo(Exp,Exp)
    Exp                           -> Divide(Exp,Exp)
    Exp                           -> Min(Exp,Exp)
    Exp                           -> Times(Exp,Exp)
    Exp                           -> Plus(Exp,Exp)
    Exp                           -> Brackets(Exp)
    Exp                           -> ExpDictaccess(DictAccess)
    Params                        -> Params()
    Params                        -> Params(ListStarOfExp0)
    DictItem                      -> DictItem(Exp,Exp)
    Exp                           -> List(Type,ListStarOfExp0)
    Exp                           -> Dict(Type,ListStarOfDictItem0)
    Exp                           -> False()
    Exp                           -> True()
    DictAccess                    -> DictAccess(DatasetRef,Exp)
    DatasetRef                    -> DatasetRef(ID)
    Exp                           -> DatasetRef
    Exp                           -> String(STRING)
    Exp                           -> Num(NUM)
    Type                          -> TypeIterator(Type)
    Type                          -> TypeList(Type)
    Type                          -> TypeDict(Type)
    Type                          -> TypeBoolean()
    Type                          -> TypeNum()
    Type                          -> TypeString()
    CommentChar                   -> <string>
    BackSlashChar                 -> <string>
    StringChar                    -> <string>
    STRING                        -> <string>
    EOF                           -> <string>
    JAVACLASS                     -> <string>
    NUM                           -> <string>
    ID                            -> <string>
    KeyWord                       -> <string>
