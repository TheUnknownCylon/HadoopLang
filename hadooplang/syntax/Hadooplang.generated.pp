[
   TypeString                    -- KW["String"],
   TypeNum                       -- KW["Number"],
   TypeBoolean                   -- KW["Boolean"],
   TypeDict                      -- KW["Dict"] KW["("] _1 KW[")"],
   TypeList                      -- KW["List"] KW["("] _1 KW[")"],
   TypeIterator                  -- KW["Iterator"] KW["("] _1 KW[")"],
   Num                           -- _1,
   String                        -- _1,
   DatasetRef                    -- _1,
   DictAccess                    -- _1 KW["["] _2 KW["]"],
   True                          -- KW["True"],
   False                         -- KW["False"],
   Dict                          -- _1 KW["{"] _2 KW["}"],
   Dict.2:iter-star-sep          -- _1 KW[","],
   List                          -- _1 KW["["] _2 KW["]"],
   List.2:iter-star-sep          -- _1 KW[","],
   DictItem                      -- _1 KW[":"] _2,
   Params                        -- V  [H  [KW[","]] _1],
   Params.1:iter-star-sep        -- _1 KW[","],
   Params                        -- ,
   ExpDictaccess                 -- _1,
   Brackets                      -- KW["("] _1 KW[")"],
   Plus                          -- _1 KW["+"] _2,
   Times                         -- _1 KW["*"] _2,
   Min                           -- _1 KW["-"] _2,
   Divide                        -- _1 KW["/"] _2,
   Modulo                        -- _1 KW["%"] _2,
   And                           -- _1 KW["&&"] _2,
   Or                            -- _1 KW["||"] _2,
   Equals                        -- _1 KW["=="] _2,
   GreaterThan                   -- _1 KW[">"] _2,
   SmallerThan                   -- _1 KW["<"] _2,
   EqSmallerThan                 -- _1 KW[">="] _2,
   EqGreaterThan                 -- _1 KW["<="] _2,
   Module                        -- KW["module"] _1 _2 _3,
   Module.2:iter-star            -- _1,
   Module.3:iter-star            -- _1,
   Import                        -- _1 KW[";"],
   OneImportMapper               -- KW["from"] _1 KW["import"] KW["mapper"] _2,
   OneImportReducer              -- KW["from"] _1 KW["import"] KW["reducer"] _2,
   OneImportRewriter             -- KW["from"] _1 KW["import"] KW["rewriter"] _2,
   ReducerRef                    -- _1,
   RewriteRef                    -- _1,
   MapperRef                     -- _1,
   Rewrite                       -- KW["rewrite"] _1 KW["with"] _2 _3,
   DatasetDef                    -- _1 KW[":="] _2 KW[";"],
   Store                         -- KW["store"] _1 KW[";"],
   write                         -- KW["write"] _1 KW[":"] _2 KW[";"],
   MapReduceChain                -- _1 KW["->"] _2 KW["->"] _3,
   MRInputMethod                 -- KW["input"] _1 KW["("] _2 KW[")"],
   MRInputMethod.2:iter-star-sep -- _1 KW[","],
   MRInputSet                    -- KW["input"] _1,
   MRMapper                      -- KW["map"] KW["with"] _1,
   MRReducer                     -- KW["reduce"] KW["with"] _1,
   Block                         -- V  [V vs=2 [KW["{"] _1] KW["}"]],
   Block.1:iter-star             -- _1,
   BlockMR                       -- V  [V vs=2 [KW["{"] _1] KW["}"]],
   BlockMR.1:iter-star           -- _1,
   BlockReturn                   -- KW["{"] _1 KW["return"] _2 KW[";"] KW["}"],
   BlockReturn.1:iter-star       -- _1,
   RewriterParameter             -- _1 _2,
   Parameter                     -- _1 _2,
   Parameter                     -- KW[","] _1 _2,
   ReduceIterator                -- _1 _2,
   Mapper                        -- KW["mapper"] _1 _2,
   Reducer                       -- KW["reducer"] _1 _2,
   MapInner                      -- KW[":"] _1 KW[":"] _2 _3,
   RedInner                      -- KW[":"] _1 KW[":"] _2 _3,
   Rewriter                      -- KW["rewriter"] _1 _2 _3 _4,
   Rewriter.3:iter-star          -- _1,
   RewriterAlias                 -- KW["rewriter"] _1 _2 _3 KW["alias"] _4 KW["returns"] _5,
   RewriterAlias.3:iter-star     -- _1,
   RewriterAlias.4:iter-star-sep -- _1 KW["."],
   MapReduceKey                  -- _1 _2,
   DatasetDefStatement           -- _1 KW[":="] _2 KW[";"],
   DatasetSetVar                 -- _1 KW["="] _2 KW[";"],
   ListAddItem                   -- _1 KW["["] KW["]"] KW["="] _2 KW[";"],
   ListDictSetItem               -- _1 KW["="] _2 KW[";"],
   loop                          -- _1,
   loopblock                     -- _1,
   ForloopSet                    -- KW["for"] _1 KW["in"] _2 _3,
   ForloopDict                   -- KW["for"] _1 KW[":"] _2 KW["in"] _3 _4,
   ForloopSet                    -- KW["for"] _1 KW["in"] _2 KW["where"] KW["("] _3 KW[")"] _4,
   ForloopDict                   -- KW["for"] _1 KW[":"] _2 KW["in"] _3 KW["where"] KW["("] _4 KW[")"] _5,
   ForKeyDef                     -- _1,
   If                            -- KW["if"] KW["("] _1 KW[")"] _2 _3,
   If.3:opt                      -- _1,
   IfElse                        -- KW["else"] _1
]